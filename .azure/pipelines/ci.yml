trigger:
- feature/azure-pipelines

variables:
  DOTVVM_ROOT: $(Build.SourcesDirectory)
  BUILD_CONFIGURATION: Release
  DISPLAY: :42
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  - job: testLinux
    displayName: Run tests on Linux
    pool: DockerAgentsLinux
    workspace:
      clean: all
    steps:
      - task: Cache@2
        inputs:
          key: '"npm" | "$(Agent.OS)" | src/DotVVM.Framework/package.json'
          path: $(DOTVVM_ROOT)/.npm
          restoreKeys: '"npm" | "$(Agent.OS)"'
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/*.csproj | **/packages.config'
          path: $(DOTVVM_ROOT)/.nuget
      - script: ./ci/linux/run.sh
        displayName: run.sh
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(DOTVVM_ROOT)/artifacts/test/**/*.trx
          failTaskOnFailedTests: true
          buildConfiguration: $(BUILD_CONFIGURATION)

  # - job: owinBuild
  #   displayName: Build OWIN projects (Windows)
  #   pool:
  #     name: DockerAgents
  #     demands: Agent.OS -equals Windows_NT
  #   workspace:
  #     clean: all
  #   steps:
  #     - task: Cache@2
  #       inputs:
  #         key: '"npm" | "$(Agent.OS)" | src/DotVVM.Framework/package.json'
  #         path: $(DOTVVM_ROOT)/.npm
  #         restoreKeys: '"npm" | "$(Agent.OS)"'
  #     - script: npm ci --cache $(DOTVVM_ROOT)/.npm --prefer-offline
  #       workingDirectory: src/DotVVM.Framework
  #     - script: npm run build
  #       workingDirectory: src/DotVVM.Framework
  #     - task: Cache@2
  #       inputs:
  #         key: '"nuget-owin" | "$(Agent.OS)" | **/packages.lock.json'
  #         path: $(Build.SourcesDirectory)/src/packages
  #     - task: NuGetCommand@2
  #       inputs:
  #         command: restore
  #         restoreSolution: src/Windows.sln
  #         feedsToUse: config
  #         nugetConfigPath: src/NuGet.config
  #     - task: MSBuild@1
  #       inputs:
  #         solution: src/Windows.sln
  #         configuration: $(BUILD_CONFIGURATION)
  #         msbuildArguments: >
  #           /p:DeployOnBuild=true
  #           /p:PublishProfile=$(Build.SourcesDirectory)/ci/windows/GenericPublish.pubxml
  #     - publish: $(DOTVVM_ROOT)/artifacts
  #       name: owinBuild

  # - job: uiTestsOwin
  #   displayName: Run UI tests (Windows)
  #   pool:
  #     name: DockerAgents
  #     demands: Agent.OS -equals Windows_NT
  #   # container: docker-reg.riganti.cz/dotvvm-ci:windows
  #   dependsOn: owinBuild
  #   workspace:
  #     clean: all
  #   steps:
  #     - task: DownloadPipelineArtifact@2
  #       inputs:
  #         source: current
  #         artifact: owinBuild
  #         path: $(DOTVVM_ROOT)/artifacts
  #     # - task: DownloadPipelineArtifact@2
  #     #   inputs:
  #     #     source: specific
  #     #     project: DotVVM Public
  #     #     pipeline: CI
  #     #     runVersion: specific
  #     #     runId: '111261'
  #     #     artifact: owinBuild
  #     #     path: $(DOTVVM_ROOT)/artifacts
  #     - powershell: |
  #         Copy-Item -Recurse `
  #           $(DOTVVM_ROOT)/artifacts/DotVVM.Samples.BasicSamples.Owin `
  #           C:/inetpub/dotvvm.owin
  #     - powershell: |
  #         Copy-Item -Recurse `
  #           $(DOTVVM_ROOT)/artifacts/DotVVM.Samples.BasicSamples.Api.Owin `
  #           C:/inetpub/dotvvm.api.owin
  #     - powershell: |
  #         Copy-Item -Recurse `
  #           $(Build.SourcesDirectory)/src/DotVVM.Samples.Common `
  #           C:/inetpub/DotVVM.Samples.Common
  #     - powershell: icacls C:\inetpub /grant "IIS_IUSRS:(OI)(CI)F"
  #     - powershell: New-Website -Name dotvvm.owin -PhysicalPath C:\inetpub\dotvvm.owin\ -Port 5407
  #     - powershell: New-Website -Name dotvvm.api.owin -PhysicalPath C:\inetpub\dotvvm.api.owin\ -Port 5002
  #     - powershell: |
  #         Copy-Item `
  #           $(Build.SourcesDirectory)/src/DotVVM.Samples.Tests/Profiles/seleniumconfig.owin.chrome.json `
  #           $(Build.SourcesDirectory)/src/DotVVM.Samples.Tests/seleniumconfig.json
  #     - powershell: cat $(Build.SourcesDirectory)/src/DotVVM.Samples.Tests/seleniumconfig.json
  #     - powershell: |
  #         Copy-Item `
  #           $(Build.SourcesDirectory)/src/DotVVM.Samples.Tests/Profiles/seleniumconfig.owin.chrome.json `
  #           $(DOTVVM_ROOT)/artifacts/bin/DotVVM.Samples.Tests/$(BUILD_CONFIGURATION)/netcoreapp3.1/seleniumconfig.json
  #     - powershell: cat $(Build.SourcesDirectory)/src/DotVVM.Samples.Tests/seleniumconfig.json
  #     - powershell: |
  #         dotnet test src/DotVVM.Samples.Tests `
  #           --configuration $(BUILD_CONFIGURATION) `
  #           --logger trx `
  #           --results-directory $(Agent.TempDirectory); `
  #         icm { Stop-Process -Name chrome; Stop-Process -Name chromedriver }
  #       continueOnError: true
  #     - task: PublishTestResults@2
  #       inputs:
  #         testResultsFormat: VSTest
  #         testResultsFiles: $(Agent.TempDirectory)/**/*.trx
  #         failTaskOnFailedTests: true
  #         buildConfiguration: $(BUILD_CONFIGURATION)
