trigger:
- feature/azure-pipelines

variables:
  DOTVVM_ROOT: $(Pipeline.Workspace)
  BUILD_CONFIGURATION: Release
  DISPLAY: :42
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  - job: crossplatformBuild
    displayName: Build cross-platform projects (Linux)
    pool:
      name: DockerHosts
      demands: Agent.OS -equals Linux
    container: docker-reg.riganti.cz/dotvvm-ci:linux
    steps:
      - task: Cache@2
        inputs:
          key: '"npm" | "$(Agent.OS)" | src/DotVVM.Framework/package.json'
          path: $(DOTVVM_ROOT)/.npm
          restoreKeys: '"npm" | "$(Agent.OS)"'
      - script: npm ci --cache $(DOTVVM_ROOT)/.npm --prefer-offline
        workingDirectory: src/DotVVM.Framework
      - script: npm run build
        workingDirectory: src/DotVVM.Framework
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(DOTVVM_ROOT)/.nuget
      - task: DotNetCoreCLI@2
        inputs:
          command: restore
          projects: src/Crossplatform.sln
          packagesDirectory: $(DOTVVM_ROOT)/.nuget
      - task: DotNetCoreCLI@2
        inputs:
          command: build
          projects: src/Crossplatform.sln
          arguments: --no-restore --configuration $(BUILD_CONFIGURATION)
      - publish: $(DOTVVM_ROOT)/artifacts
        name: crossplatformBuild

  - job: unitTestsCrossplatform
    displayName: Run cross-platform unit tests (Linux)
    pool:
      name: DockerHosts
      demands: Agent.OS -equals Linux
    container: docker-reg.riganti.cz/dotvvm-ci:linux
    dependsOn: crossplatformBuild
    steps:
      - download: current
        artifact: crossplatformBuild
      - script: mv $(Pipeline.Workspace)/crossplatformBuild $(DOTVVM_ROOT)/artifacts
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(DOTVVM_ROOT)/.nuget
      - task: DotNetCoreCLI@2
        inputs:
          command: test
          projects: src/DotVVM.Framework.Tests.Common
          arguments: --no-build --configuration $(BUILD_CONFIGURATION)
          publishTestResults: true

  - job: uiTestsCrossplatform
    displayName: Run UI tests (Linux)
    pool:
      name: DockerHosts
      demands: Agent.OS -equals Linux
    container: docker-reg.riganti.cz/dotvvm-ci:linux
    dependsOn: crossplatformBuild
    steps:
      - download: current
        artifact: crossplatformBuild
      - script: mv $(Pipeline.Workspace)/crossplatformBuild $(DOTVVM_ROOT)/artifacts
      - script: Xvfb $DISPLAY -screen 0 800x600x16 &
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(DOTVVM_ROOT)/.nuget
      - script: find $(DOTVVM_ROOT)/artifacts -type f -exec chmod +rwx {} \;
      - script: |
          dotnet run --project src/DotVVM.Samples.BasicSamples.AspNetCoreLatest \
            --no-build \
            --configuration $(BUILD_CONFIGURATION) \
            --urls http://localhost:16018/ &
      - script: |
          dotnet test src/DotVVM.Samples.Tests \
            --no-build \
            --configuration $(BUILD_CONFIGURATION) \
            --logger trx \
            --results-directory $(Agent.TempDirectory)
        continueOnError: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/**/*.trx
          failTaskOnFailedTests: true
          buildConfiguration: $(BUILD_CONFIGURATION)

  - job: owinBuild
    displayName: Build OWIN projects (Windows)
    pool:
      name: DockerAgents
    steps:
      - task: Cache@2
        inputs:
          key: '"npm" | "$(Agent.OS)" | src/DotVVM.Framework/package.json'
          path: $(DOTVVM_ROOT)/.npm
          restoreKeys: '"npm" | "$(Agent.OS)"'
      - script: npm ci --cache $(DOTVVM_ROOT)/.npm --prefer-offline
        workingDirectory: src/DotVVM.Framework
      - script: npm run build
        workingDirectory: src/DotVVM.Framework
      - task: Cache@2
        inputs:
          key: '"nuget-owin" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(Build.SourcesDirectory)/src/packages
      - task: NuGetCommand@2
        inputs:
          command: restore
          restoreSolution: src/Windows.sln
          feedsToUse: config
          nugetConfigPath: src/NuGet.config
      - task: MSBuild@1
        inputs:
          solution: src/Windows.sln
          configuration: $(BUILD_CONFIGURATION)
      - publish: $(DOTVVM_ROOT)/artifacts
        name: owinBuild

  - job: uiTestsOwin
    displayName: Run UI tests (Windows)
    pool:
      name: DockerHosts
      demands: Agent.OS -equals Windows_NT
    container: docker-reg.riganti.cz/dotvvm-ci:windows
    dependsOn: owinBuild
    steps:
      - download: current
        artifact: owinBuild
      - powershell: Move-Item "$(Pipeline.Workspace)/owinBuild" "$(DOTVVM_ROOT)/artifacts"
      - powershell: |
          dotnet test src/DotVVM.Samples.Tests `
            --no-build `
            --configuration $(BUILD_CONFIGURATION) `
            --logger trx `
            --results-directory $(Agent.TempDirectory)
        continueOnError: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/**/*.trx
          failTaskOnFailedTests: true
          buildConfiguration: $(BUILD_CONFIGURATION)
