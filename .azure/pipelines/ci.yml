trigger:
- feature/azure-pipelines

pool:
  vmImage: ubuntu-latest

variables:
  DOTVVM_ROOT: $(Build.Repository.LocalPath)
  BUILD_CONFIGURATION: Release
  DISPLAY: :42
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  - job: crossplatformBuild
    container: registry.gitlab.com/cafstep/dotvvm-test/dotvvm:latest
    steps:
      - task: Cache@2
        inputs:
          key: '"npm" | "$(Agent.OS)" | src/DotVVM.Framework/package.json'
          path: $(DOTVVM_ROOT)/.npm
          restoreKeys: '"npm" | "$(Agent.OS)"'
      - script: npm ci --cache $(DOTVVM_ROOT)/.npm --prefer-offline
        workingDirectory: src/DotVVM.Framework
      - script: npm run build
        workingDirectory: src/DotVVM.Framework
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(DOTVVM_ROOT)/.npm
          restoreKeys: '"nuget" | "$(Agent.OS)"'
      - task: DotNetCoreCLI@2
        inputs:
          command: restore
          projects: src/Crossplatform.sln
          packagesDirectory: $(DOTVVM_ROOT)/.nuget
      - task: DotNetCoreCLI@2
        inputs:
          command: build
          projects: src/Crossplatform.sln
          arguments: --no-restore --configuration $(BUILD_CONFIGURATION)
      - publish: artifacts/
        name: crossplatformBuild

  - job: unitTestsCrossplatform
    container: registry.gitlab.com/cafstep/dotvvm-test/dotvvm:latest
    dependsOn: crossplatformBuild
    steps:
      - download: current
        artifact: crossplatformBuild
      - script: mv $(Pipeline.Workspace)/crossplatformBuild $(DOTVVM_ROOT)/artifacts
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(DOTVVM_ROOT)/.npm
          restoreKeys: '"nuget" | "$(Agent.OS)"'
      - task: DotNetCoreCLI@2
        inputs:
          command: restore
          projects: src/DotVVM.Framework.Tests.Common
          packagesDirectory: $(DOTVVM_ROOT)/.nuget
      - task: DotNetCoreCLI@2
        inputs:
          command: test
          projects: src/DotVVM.Framework.Tests.Common
          arguments: --no-build --configuration $(BUILD_CONFIGURATION)
          publishTestResults: true

  - job: uiTestsCrossplatform
    container: registry.gitlab.com/cafstep/dotvvm-test/dotvvm:latest
    dependsOn: crossplatformBuild
    steps:
      - download: current
        artifact: crossplatformBuild
      - script: mv $(Pipeline.Workspace)/crossplatformBuild $(DOTVVM_ROOT)/artifacts
      - script: Xvfb $DISPLAY -screen 0 800x600x16 &
      - task: Cache@2
        inputs:
          key: '"nuget" | "$(Agent.OS)" | **/packages.lock.json'
          path: $(DOTVVM_ROOT)/.npm
      - task: DotNetCoreCLI@2
        inputs:
          command: restore
          projects: src/@(DotVVM.Samples.BasicSamples.AspNetCoreLatest|DotVVM.Samples.Tests)
          packagesDirectory: $(DOTVVM_ROOT)/.nuget
      - script: dotnet run --project $DOTVVM_ROOT/src/DotVVM.Samples.BasicSamples.AspNetCoreLatest --configuration Release --urls http://localhost:16018/ &
      - task: DotNetCoreCLI@2
        inputs:
          command: test
          projects: src/DotVVM.Samples.Tests
          arguments: --no-build --configuration $(BUILD_CONFIGURATION)
          publishTestResults: true
