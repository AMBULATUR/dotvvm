namespace TestApiClient {
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    
    export class Client {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "https://azurefuncwebapi.azurewebsites.net";
        }
    
        /**
         * @return Success operation
         */
        _api_HttpTriggerCSharp1_get(): Promise<Anonymous> {
            let url_ = this.baseUrl + "/api/HttpTriggerCSharp1";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.process_api_HttpTriggerCSharp1_get(_response);
            });
        }
    
        protected process_api_HttpTriggerCSharp1_get(response: Response): Promise<Anonymous> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Anonymous = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Anonymous.fromJS(resultData200) : new Anonymous();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Anonymous>(<any>null);
        }
    
        /**
         * @return Success operation
         */
        _api_HttpTriggerCSharp1_post(): Promise<void> {
            let url_ = this.baseUrl + "/api/HttpTriggerCSharp1";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "POST",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.process_api_HttpTriggerCSharp1_post(_response);
            });
        }
    
        protected process_api_HttpTriggerCSharp1_post(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    }
    
    export class Anonymous implements IAnonymous {
        id?: number;
        name?: string;
    
        constructor(data?: IAnonymous) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
            }
        }
    
        static fromJS(data: any): Anonymous {
            let result = new Anonymous();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Name"] = this.name !== undefined ? this.name : <any>null;
            return data; 
        }
    }
    
    export interface IAnonymous {
        id?: number;
        name?: string;
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        result: any; 
    
        constructor(message: string, status: number, response: string, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.result = result;
        }
    }
    
    function throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
