var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TestApiClient;
(function (TestApiClient) {
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    var Client = (function () {
        function Client(baseUrl, http) {
            this.jsonParseReviver = undefined;
            this.http = http ? http : window;
            this.baseUrl = baseUrl ? baseUrl : "https://azurefuncwebapi.azurewebsites.net";
        }
        /**
         * @return Success operation
         */
        Client.prototype._api_HttpTriggerCSharp1_get = function () {
            var _this = this;
            var url_ = this.baseUrl + "/api/HttpTriggerCSharp1";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.http.fetch(url_, options_).then(function (_response) {
                return _this.process_api_HttpTriggerCSharp1_get(_response);
            });
        };
        Client.prototype.process_api_HttpTriggerCSharp1_get = function (response) {
            var _this = this;
            var status = response.status;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Anonymous.fromJS(resultData200) : new Anonymous();
                    return result200;
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @return Success operation
         */
        Client.prototype._api_HttpTriggerCSharp1_post = function () {
            var _this = this;
            var url_ = this.baseUrl + "/api/HttpTriggerCSharp1";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            };
            return this.http.fetch(url_, options_).then(function (_response) {
                return _this.process_api_HttpTriggerCSharp1_post(_response);
            });
        };
        Client.prototype.process_api_HttpTriggerCSharp1_post = function (response) {
            var status = response.status;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve(null);
        };
        return Client;
    }());
    TestApiClient.Client = Client;
    var Anonymous = (function () {
        function Anonymous(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous.prototype.init = function (data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
            }
        };
        Anonymous.fromJS = function (data) {
            var result = new Anonymous();
            result.init(data);
            return result;
        };
        Anonymous.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Anonymous;
    }());
    TestApiClient.Anonymous = Anonymous;
    var SwaggerException = (function (_super) {
        __extends(SwaggerException, _super);
        function SwaggerException(message, status, response, result) {
            var _this = _super.call(this) || this;
            _this.message = message;
            _this.status = status;
            _this.response = response;
            _this.result = result;
            return _this;
        }
        return SwaggerException;
    }(Error));
    TestApiClient.SwaggerException = SwaggerException;
    function throwException(message, status, response, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
})(TestApiClient || (TestApiClient = {}));
