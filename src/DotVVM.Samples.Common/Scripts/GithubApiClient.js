/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.0.6306.29915 (NJsonSchema v8.30.6304.31883) (http://NSwag.org)
// </auto-generated>
//----------------------
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Client = (function () {
    function Client(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.emojis = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/emojis";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEmojis(_response);
        });
    };
    Client.prototype.processEmojis = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Emojis.fromJS(resultData200) : new Emojis();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/events";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents(_response);
        });
    };
    Client.prototype.processEvents = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.feeds = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/feeds";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFeeds(_response);
        });
    };
    Client.prototype.processFeeds = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Feeds.fromJS(resultData200) : new Feeds();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @since Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
Only gists updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.gistsAll = function (since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists?";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGistsAll(_response);
        });
    };
    Client.prototype.processGistsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(Anonymous.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.gists = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/gists";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGists(_response);
        });
    };
    Client.prototype.processGists = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Gist.fromJS(resultData201) : new Gist();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @since Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
Only gists updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.publicAll = function (since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/public?";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPublicAll(_response);
        });
    };
    Client.prototype.processPublicAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                        var item = resultData200_2[_i];
                        result200.push(Anonymous.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @since Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
Only gists updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.starredAll = function (since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/starred?";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStarredAll(_response);
        });
    };
    Client.prototype.processStarredAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                        var item = resultData200_3[_i];
                        result200.push(Anonymous.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.gists2 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGists2(_response);
        });
    };
    Client.prototype.processGists2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.gists3 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGists3(_response);
        });
    };
    Client.prototype.processGists3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Gist.fromJS(resultData200) : new Gist();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.gists4 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGists4(_response);
        });
    };
    Client.prototype.processGists4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Gist.fromJS(resultData200) : new Gist();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.commentsAll = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/comments";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCommentsAll(_response);
        });
    };
    Client.prototype.processCommentsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                        var item = resultData200_4[_i];
                        result200.push(Anonymous2.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.comments = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/comments";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments(_response);
        });
    };
    Client.prototype.processComments = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Comment.fromJS(resultData201) : new Comment();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.comments2 = function (id, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/comments/{commentId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments2(_response);
        });
    };
    Client.prototype.processComments2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments3 = function (id, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/comments/{commentId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments3(_response);
        });
    };
    Client.prototype.processComments3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Comment.fromJS(resultData200) : new Comment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments4 = function (id, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/comments/{commentId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments4(_response);
        });
    };
    Client.prototype.processComments4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Comment.fromJS(resultData200) : new Comment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Exists.
     */
    Client.prototype.forks = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/forks";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processForks(_response);
        });
    };
    Client.prototype.processForks = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Item removed.
     */
    Client.prototype.star = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/star";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStar(_response);
        });
    };
    Client.prototype.processStar = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Exists.
     */
    Client.prototype.star2 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/star";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStar2(_response);
        });
    };
    Client.prototype.processStar2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of gist.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Starred.
     */
    Client.prototype.star3 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gists/{id}/star";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStar3(_response);
        });
    };
    Client.prototype.processStar3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.templatesAll = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gitignore/templates";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTemplatesAll(_response);
        });
    };
    Client.prototype.processTemplatesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                        var item = resultData200_5[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.templates = function (language, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/gitignore/templates/{language}";
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTemplates(_response);
        });
    };
    Client.prototype.processTemplates = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GitignoreLang.fromJS(resultData200) : new GitignoreLang();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @filter Issues assigned to you / created by you / mentioning you / you're
subscribed to updates for / All issues the authenticated user can see
     * @labels String list of comma separated Label names. Example - bug,ui,@high.
     * @since Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Only issues updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issuesAll = function (filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/issues?";
        if (filter === undefined || filter === null)
            throw new Error("The parameter 'filter' must be defined and cannot be null.");
        else
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined and cannot be null.");
        else
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (labels === undefined || labels === null)
            throw new Error("The parameter 'labels' must be defined and cannot be null.");
        else
            url_ += "labels=" + encodeURIComponent("" + labels) + "&";
        if (sort === undefined || sort === null)
            throw new Error("The parameter 'sort' must be defined and cannot be null.");
        else
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (direction === undefined || direction === null)
            throw new Error("The parameter 'direction' must be defined and cannot be null.");
        else
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssuesAll(_response);
        });
    };
    Client.prototype.processIssuesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                        var item = resultData200_6[_i];
                        result200.push(Anonymous3.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @keyword The search term.
     * @state Indicates the state of the issues to return. Can be either open or closed.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.search = function (keyword, state, owner, repository, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/legacy/issues/search/{owner}/{repository}/{state}/{keyword}";
        if (keyword === undefined || keyword === null)
            throw new Error("The parameter 'keyword' must be defined.");
        url_ = url_.replace("{keyword}", encodeURIComponent("" + keyword));
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined.");
        url_ = url_.replace("{state}", encodeURIComponent("" + state));
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repository === undefined || repository === null)
            throw new Error("The parameter 'repository' must be defined.");
        url_ = url_.replace("{repository}", encodeURIComponent("" + repository));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSearch(_response);
        });
    };
    Client.prototype.processSearch = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchIssuesByKeyword.fromJS(resultData200) : new SearchIssuesByKeyword();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @keyword The search term
     * @order The sort field. if sort param is provided. Can be either asc or desc.
     * @language Filter results by language
     * @start_page The page number to fetch
     * @sort The sort field. One of stars, forks, or updated. Default: results are sorted by best match.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.search2 = function (keyword, order, language, start_page, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/legacy/repos/search/{keyword}?";
        if (keyword === undefined || keyword === null)
            throw new Error("The parameter 'keyword' must be defined.");
        url_ = url_.replace("{keyword}", encodeURIComponent("" + keyword));
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (start_page !== undefined)
            url_ += "start_page=" + encodeURIComponent("" + start_page) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSearch2(_response);
        });
    };
    Client.prototype.processSearch2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchRepositoriesByKeyword.fromJS(resultData200) : new SearchRepositoriesByKeyword();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @email The email address
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.email = function (email, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/legacy/user/email/{email}";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined.");
        url_ = url_.replace("{email}", encodeURIComponent("" + email));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEmail(_response);
        });
    };
    Client.prototype.processEmail = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchUserByEmail.fromJS(resultData200) : new SearchUserByEmail();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @keyword The search term
     * @order The sort field. if sort param is provided. Can be either asc or desc.
     * @start_page The page number to fetch
     * @sort The sort field. One of stars, forks, or updated. Default: results are sorted by best match.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.search3 = function (keyword, order, start_page, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/legacy/user/search/{keyword}?";
        if (keyword === undefined || keyword === null)
            throw new Error("The parameter 'keyword' must be defined.");
        url_ = url_.replace("{keyword}", encodeURIComponent("" + keyword));
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (start_page !== undefined)
            url_ += "start_page=" + encodeURIComponent("" + start_page) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSearch3(_response);
        });
    };
    Client.prototype.processSearch3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchUsersByKeyword.fromJS(resultData200) : new SearchUsersByKeyword();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.markdown = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/markdown";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "text/html; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMarkdown(_response);
        });
    };
    Client.prototype.processMarkdown = function (_response) {
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.raw = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/markdown/raw";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "text/plain; charset=UTF-8",
                "Accept": "text/html; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRaw(_response);
        });
    };
    Client.prototype.processRaw = function (_response) {
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.meta = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/meta";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMeta(_response);
        });
    };
    Client.prototype.processMeta = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Meta.fromJS(resultData200) : new Meta();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of the owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/networks/{owner}/{repo}/events";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents2(_response);
        });
    };
    Client.prototype.processEvents2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @all True to show notifications marked as read.
     * @participating True to show only notifications in which the user is directly participating
or mentioned.
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.notifications = function (all, participating, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications?";
        if (all !== undefined)
            url_ += "all=" + encodeURIComponent("" + all) + "&";
        if (participating !== undefined)
            url_ += "participating=" + encodeURIComponent("" + participating) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processNotifications(_response);
        });
    };
    Client.prototype.processNotifications = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Notifications.fromJS(resultData200) : new Notifications();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Marked as read.
     */
    Client.prototype.notifications2 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processNotifications2(_response);
        });
    };
    Client.prototype.processNotifications2 = function (_response) {
        var _status = _response.status;
        if (_status === 205) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of thread.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.threads = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications/threads/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processThreads(_response);
        });
    };
    Client.prototype.processThreads = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Notifications.fromJS(resultData200) : new Notifications();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of thread.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Thread marked as read.
     */
    Client.prototype.threads2 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications/threads/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processThreads2(_response);
        });
    };
    Client.prototype.processThreads2 = function (_response) {
        var _status = _response.status;
        if (_status === 205) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of thread.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No Content
     */
    Client.prototype.subscription = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications/threads/{id}/subscription";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscription(_response);
        });
    };
    Client.prototype.processSubscription = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of thread.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.subscription2 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications/threads/{id}/subscription";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscription2(_response);
        });
    };
    Client.prototype.processSubscription2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @id Id of thread.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.subscription3 = function (id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/notifications/threads/{id}/subscription";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscription3(_response);
        });
    };
    Client.prototype.processSubscription3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.orgs = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processOrgs(_response);
        });
    };
    Client.prototype.processOrgs = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Organization.fromJS(resultData200) : new Organization();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.orgs2 = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processOrgs2(_response);
        });
    };
    Client.prototype.processOrgs2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Organization.fromJS(resultData200) : new Organization();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events3 = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/events";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents3(_response);
        });
    };
    Client.prototype.processEvents3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @filter Issues assigned to you / created by you / mentioning you / you're
subscribed to updates for / All issues the authenticated user can see
     * @labels String list of comma separated Label names. Example - bug,ui,@high.
     * @since Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Only issues updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issues = function (org, filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/issues?";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (filter === undefined || filter === null)
            throw new Error("The parameter 'filter' must be defined and cannot be null.");
        else
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined and cannot be null.");
        else
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (labels === undefined || labels === null)
            throw new Error("The parameter 'labels' must be defined and cannot be null.");
        else
            url_ += "labels=" + encodeURIComponent("" + labels) + "&";
        if (sort === undefined || sort === null)
            throw new Error("The parameter 'sort' must be defined and cannot be null.");
        else
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (direction === undefined || direction === null)
            throw new Error("The parameter 'direction' must be defined and cannot be null.");
        else
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues(_response);
        });
    };
    Client.prototype.processIssues = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_7 = resultData200; _i < resultData200_7.length; _i++) {
                        var item = resultData200_7[_i];
                        result200.push(Anonymous3.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.membersAll = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/members";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembersAll(_response);
        });
    };
    Client.prototype.processMembersAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_8 = resultData200; _i < resultData200_8.length; _i++) {
                        var item = resultData200_8[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 302) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @username Name of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.members = function (org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/members/{username}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers(_response);
        });
    };
    Client.prototype.processMembers = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @username Name of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content. Response if requester is an organization member and user is a member
     */
    Client.prototype.members2 = function (org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/members/{username}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers2(_response);
        });
    };
    Client.prototype.processMembers2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 302) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.reposAll = function (org, type, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/repos?";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReposAll(_response);
        });
    };
    Client.prototype.processReposAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_9 = resultData200; _i < resultData200_9.length; _i++) {
                        var item = resultData200_9[_i];
                        result200.push(Anonymous5.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.repos = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/repos";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos(_response);
        });
    };
    Client.prototype.processRepos = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData201 && resultData201.constructor === Array) {
                    result201 = [];
                    for (var _i = 0, resultData201_1 = resultData201; _i < resultData201_1.length; _i++) {
                        var item = resultData201_1[_i];
                        result201.push(Anonymous5.fromJS(item));
                    }
                }
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.teamsAll = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/teams";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeamsAll(_response);
        });
    };
    Client.prototype.processTeamsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_10 = resultData200; _i < resultData200_10.length; _i++) {
                        var item = resultData200_10[_i];
                        result200.push(Anonymous6.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.teams = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/teams";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeams(_response);
        });
    };
    Client.prototype.processTeams = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Team.fromJS(resultData201) : new Team();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Item removed.
     */
    Client.prototype.repos2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos2(_response);
        });
    };
    Client.prototype.processRepos2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repos3 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos3(_response);
        });
    };
    Client.prototype.processRepos3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Repo.fromJS(resultData200) : new Repo();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repos4 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos4(_response);
        });
    };
    Client.prototype.processRepos4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Repo.fromJS(resultData200) : new Repo();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.assigneesAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/assignees";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAssigneesAll(_response);
        });
    };
    Client.prototype.processAssigneesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_11 = resultData200; _i < resultData200_11.length; _i++) {
                        var item = resultData200_11[_i];
                        result200.push(Anonymous7.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @assignee Login of the assignee.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return User is an assignee.
     */
    Client.prototype.assignees = function (owner, repo, assignee, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/assignees/{assignee}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (assignee === undefined || assignee === null)
            throw new Error("The parameter 'assignee' must be defined.");
        url_ = url_.replace("{assignee}", encodeURIComponent("" + assignee));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAssignees(_response);
        });
    };
    Client.prototype.processAssignees = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.branchesAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/branches";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processBranchesAll(_response);
        });
    };
    Client.prototype.processBranchesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_12 = resultData200; _i < resultData200_12.length; _i++) {
                        var item = resultData200_12[_i];
                        result200.push(Anonymous8.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @branch Name of the branch.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.branches = function (owner, repo, branch, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/branches/{branch}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (branch === undefined || branch === null)
            throw new Error("The parameter 'branch' must be defined.");
        url_ = url_.replace("{branch}", encodeURIComponent("" + branch));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processBranches(_response);
        });
    };
    Client.prototype.processBranches = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Branch.fromJS(resultData200) : new Branch();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.collaboratorsAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCollaboratorsAll(_response);
        });
    };
    Client.prototype.processCollaboratorsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_13 = resultData200; _i < resultData200_13.length; _i++) {
                        var item = resultData200_13[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @user Login of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Collaborator removed.
     */
    Client.prototype.collaborators = function (owner, repo, user, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators/{user}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{user}", encodeURIComponent("" + user));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCollaborators(_response);
        });
    };
    Client.prototype.processCollaborators = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @user Login of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return User is a collaborator.
     */
    Client.prototype.collaborators2 = function (owner, repo, user, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators/{user}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{user}", encodeURIComponent("" + user));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCollaborators2(_response);
        });
    };
    Client.prototype.processCollaborators2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @user Login of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Collaborator added.
     */
    Client.prototype.collaborators3 = function (owner, repo, user, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators/{user}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{user}", encodeURIComponent("" + user));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCollaborators3(_response);
        });
    };
    Client.prototype.processCollaborators3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments5 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments5(_response);
        });
    };
    Client.prototype.processComments5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_14 = resultData200; _i < resultData200_14.length; _i++) {
                        var item = resultData200_14[_i];
                        result200.push(Anonymous9.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.comments6 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments6(_response);
        });
    };
    Client.prototype.processComments6 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments7 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments7(_response);
        });
    };
    Client.prototype.processComments7 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CommitComments.fromJS(resultData200) : new CommitComments();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments8 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments8(_response);
        });
    };
    Client.prototype.processComments8 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CommitComments.fromJS(resultData200) : new CommitComments();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @sha Sha or branch to start listing commits from.
     * @path Only commits containing this file path will be returned.
     * @author GitHub login, name, or email by which to filter by commit author.
     * @until ISO 8601 Date - Only commits before this date will be returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.commitsAll = function (owner, repo, since, sha, path, author, until, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        if (sha !== undefined)
            url_ += "sha=" + encodeURIComponent("" + sha) + "&";
        if (path !== undefined)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (author !== undefined)
            url_ += "author=" + encodeURIComponent("" + author) + "&";
        if (until !== undefined)
            url_ += "until=" + encodeURIComponent("" + until) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCommitsAll(_response);
        });
    };
    Client.prototype.processCommitsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_15 = resultData200; _i < resultData200_15.length; _i++) {
                        var item = resultData200_15[_i];
                        result200.push(Anonymous10.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.status = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{ref}/status";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref === undefined || ref === null)
            throw new Error("The parameter 'ref' must be defined.");
        url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStatus(_response);
        });
    };
    Client.prototype.processStatus = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_16 = resultData200; _i < resultData200_16.length; _i++) {
                        var item = resultData200_16[_i];
                        result200.push(Anonymous11.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @shaCode SHA-1 code of the commit.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.commits = function (owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{shaCode}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCommits(_response);
        });
    };
    Client.prototype.processCommits = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Commit.fromJS(resultData200) : new Commit();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @shaCode SHA-1 code of the commit.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments9 = function (owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{shaCode}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments9(_response);
        });
    };
    Client.prototype.processComments9 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_17 = resultData200; _i < resultData200_17.length; _i++) {
                        var item = resultData200_17[_i];
                        result200.push(Anonymous9.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @shaCode SHA-1 code of the commit.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.comments10 = function (owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{shaCode}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments10(_response);
        });
    };
    Client.prototype.processComments10 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? CommitComments.fromJS(resultData201) : new CommitComments();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.compare = function (owner, repo, baseId, headId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/compare/{baseId}...{headId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (baseId === undefined || baseId === null)
            throw new Error("The parameter 'baseId' must be defined.");
        url_ = url_.replace("{baseId}", encodeURIComponent("" + baseId));
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined.");
        url_ = url_.replace("{headId}", encodeURIComponent("" + headId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCompare(_response);
        });
    };
    Client.prototype.processCompare = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CompareCommits.fromJS(resultData200) : new CompareCommits();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.contents = function (owner, repo, path, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/contents/{path}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (path === undefined || path === null)
            throw new Error("The parameter 'path' must be defined.");
        url_ = url_.replace("{path}", encodeURIComponent("" + path));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processContents(_response);
        });
    };
    Client.prototype.processContents = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DeleteFile.fromJS(resultData200) : new DeleteFile();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @pathQuery The content path.
     * @ref The String name of the Commit/Branch/Tag. Defaults to 'master'.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.contents2 = function (owner, repo, pathPath, pathQuery, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/contents/{path}?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (pathPath === undefined || pathPath === null)
            throw new Error("The parameter 'pathPath' must be defined.");
        url_ = url_.replace("{path}", encodeURIComponent("" + pathPath));
        if (pathQuery !== undefined)
            url_ += "path=" + encodeURIComponent("" + pathQuery) + "&";
        if (ref !== undefined)
            url_ += "ref=" + encodeURIComponent("" + ref) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processContents2(_response);
        });
    };
    Client.prototype.processContents2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ContentsPath.fromJS(resultData200) : new ContentsPath();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.contents3 = function (owner, repo, path, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/contents/{path}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (path === undefined || path === null)
            throw new Error("The parameter 'path' must be defined.");
        url_ = url_.replace("{path}", encodeURIComponent("" + path));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processContents3(_response);
        });
    };
    Client.prototype.processContents3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CreateFile.fromJS(resultData200) : new CreateFile();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @anon Set to 1 or true to include anonymous contributors in results.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.contributorsAll = function (owner, repo, anon, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/contributors?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (anon === undefined || anon === null)
            throw new Error("The parameter 'anon' must be defined and cannot be null.");
        else
            url_ += "anon=" + encodeURIComponent("" + anon) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processContributorsAll(_response);
        });
    };
    Client.prototype.processContributorsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_18 = resultData200; _i < resultData200_18.length; _i++) {
                        var item = resultData200_18[_i];
                        result200.push(Anonymous12.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.deploymentsAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeploymentsAll(_response);
        });
    };
    Client.prototype.processDeploymentsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_19 = resultData200; _i < resultData200_19.length; _i++) {
                        var item = resultData200_19[_i];
                        result200.push(Anonymous13.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.deployments = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeployments(_response);
        });
    };
    Client.prototype.processDeployments = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? DeploymentResp.fromJS(resultData201) : new DeploymentResp();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @id The Deployment ID to list the statuses from.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.statusesAll = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments/{id}/statuses";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStatusesAll(_response);
        });
    };
    Client.prototype.processStatusesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_20 = resultData200; _i < resultData200_20.length; _i++) {
                        var item = resultData200_20[_i];
                        result200.push(Anonymous14.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @id The Deployment ID to list the statuses from.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return ok
     */
    Client.prototype.statuses = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments/{id}/statuses";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStatuses(_response);
        });
    };
    Client.prototype.processStatuses = function (_response) {
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.downloads = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/downloads";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDownloads(_response);
        });
    };
    Client.prototype.processDownloads = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Downloads.fromJS(resultData200) : new Downloads();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @downloadId Id of download.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.downloads2 = function (owner, repo, downloadId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/downloads/{downloadId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (downloadId === undefined || downloadId === null)
            throw new Error("The parameter 'downloadId' must be defined.");
        url_ = url_.replace("{downloadId}", encodeURIComponent("" + downloadId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDownloads2(_response);
        });
    };
    Client.prototype.processDownloads2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @downloadId Id of download.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.downloads3 = function (owner, repo, downloadId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/downloads/{downloadId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (downloadId === undefined || downloadId === null)
            throw new Error("The parameter 'downloadId' must be defined.");
        url_ = url_.replace("{downloadId}", encodeURIComponent("" + downloadId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDownloads3(_response);
        });
    };
    Client.prototype.processDownloads3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Downloads.fromJS(resultData200) : new Downloads();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events4 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/events";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents4(_response);
        });
    };
    Client.prototype.processEvents4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.forksAll = function (owner, repo, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/forks?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processForksAll(_response);
        });
    };
    Client.prototype.processForksAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_21 = resultData200; _i < resultData200_21.length; _i++) {
                        var item = resultData200_21[_i];
                        result200.push(Anonymous15.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.forks2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/forks";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processForks2(_response);
        });
    };
    Client.prototype.processForks2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Fork.fromJS(resultData201) : new Fork();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.blobs = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/blobs";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processBlobs(_response);
        });
    };
    Client.prototype.processBlobs = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Blobs.fromJS(resultData201) : new Blobs();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @shaCode SHA-1 code.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.blobs2 = function (owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/blobs/{shaCode}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processBlobs2(_response);
        });
    };
    Client.prototype.processBlobs2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Blob.fromJS(resultData200) : new Blob();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.commits2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/commits";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCommits2(_response);
        });
    };
    Client.prototype.processCommits2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? GitCommit.fromJS(resultData201) : new GitCommit();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @shaCode SHA-1 code.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.commits3 = function (owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/commits/{shaCode}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCommits3(_response);
        });
    };
    Client.prototype.processCommits3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RepoCommit.fromJS(resultData200) : new RepoCommit();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.refsAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRefsAll(_response);
        });
    };
    Client.prototype.processRefsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_22 = resultData200; _i < resultData200_22.length; _i++) {
                        var item = resultData200_22[_i];
                        result200.push(Anonymous16.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.refs = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRefs(_response);
        });
    };
    Client.prototype.processRefs = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? HeadBranch.fromJS(resultData201) : new HeadBranch();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No Content
     */
    Client.prototype.refs2 = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs/{ref}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref === undefined || ref === null)
            throw new Error("The parameter 'ref' must be defined.");
        url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRefs2(_response);
        });
    };
    Client.prototype.processRefs2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.refs3 = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs/{ref}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref === undefined || ref === null)
            throw new Error("The parameter 'ref' must be defined.");
        url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRefs3(_response);
        });
    };
    Client.prototype.processRefs3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? HeadBranch.fromJS(resultData200) : new HeadBranch();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.refs4 = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs/{ref}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref === undefined || ref === null)
            throw new Error("The parameter 'ref' must be defined.");
        url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRefs4(_response);
        });
    };
    Client.prototype.processRefs4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? HeadBranch.fromJS(resultData200) : new HeadBranch();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.tags = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/tags";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTags(_response);
        });
    };
    Client.prototype.processTags = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Tags.fromJS(resultData201) : new Tags();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.tags2 = function (owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/tags/{shaCode}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTags2(_response);
        });
    };
    Client.prototype.processTags2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Tag.fromJS(resultData200) : new Tag();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.trees = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/trees";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTrees(_response);
        });
    };
    Client.prototype.processTrees = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Trees.fromJS(resultData201) : new Trees();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @shaCode Tree SHA.
     * @recursive Get a Tree Recursively. (0 or 1)
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.trees2 = function (owner, repo, shaCode, recursive, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/trees/{shaCode}?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (shaCode === undefined || shaCode === null)
            throw new Error("The parameter 'shaCode' must be defined.");
        url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
        if (recursive !== undefined)
            url_ += "recursive=" + encodeURIComponent("" + recursive) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTrees2(_response);
        });
    };
    Client.prototype.processTrees2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Tree.fromJS(resultData200) : new Tree();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.hooksAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processHooksAll(_response);
        });
    };
    Client.prototype.processHooksAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_23 = resultData200; _i < resultData200_23.length; _i++) {
                        var item = resultData200_23[_i];
                        result200.push(Anonymous17.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.hooks = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processHooks(_response);
        });
    };
    Client.prototype.processHooks = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData201 && resultData201.constructor === Array) {
                    result201 = [];
                    for (var _i = 0, resultData201_2 = resultData201; _i < resultData201_2.length; _i++) {
                        var item = resultData201_2[_i];
                        result201.push(Anonymous17.fromJS(item));
                    }
                }
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @hookId Id of hook.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.hooks2 = function (owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (hookId === undefined || hookId === null)
            throw new Error("The parameter 'hookId' must be defined.");
        url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processHooks2(_response);
        });
    };
    Client.prototype.processHooks2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @hookId Id of hook.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.hooks3 = function (owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (hookId === undefined || hookId === null)
            throw new Error("The parameter 'hookId' must be defined.");
        url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processHooks3(_response);
        });
    };
    Client.prototype.processHooks3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_24 = resultData200; _i < resultData200_24.length; _i++) {
                        var item = resultData200_24[_i];
                        result200.push(Anonymous17.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @hookId Id of hook.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.hooks4 = function (owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (hookId === undefined || hookId === null)
            throw new Error("The parameter 'hookId' must be defined.");
        url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processHooks4(_response);
        });
    };
    Client.prototype.processHooks4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_25 = resultData200; _i < resultData200_25.length; _i++) {
                        var item = resultData200_25[_i];
                        result200.push(Anonymous17.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @hookId Id of hook.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Hook is triggered.
     */
    Client.prototype.tests = function (owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}/tests";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (hookId === undefined || hookId === null)
            throw new Error("The parameter 'hookId' must be defined.");
        url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTests(_response);
        });
    };
    Client.prototype.processTests = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @filter Issues assigned to you / created by you / mentioning you / you're
subscribed to updates for / All issues the authenticated user can see
     * @labels String list of comma separated Label names. Example - bug,ui,@high.
     * @since Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Only issues updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issues2 = function (owner, repo, filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (filter === undefined || filter === null)
            throw new Error("The parameter 'filter' must be defined and cannot be null.");
        else
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined and cannot be null.");
        else
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (labels === undefined || labels === null)
            throw new Error("The parameter 'labels' must be defined and cannot be null.");
        else
            url_ += "labels=" + encodeURIComponent("" + labels) + "&";
        if (sort === undefined || sort === null)
            throw new Error("The parameter 'sort' must be defined and cannot be null.");
        else
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (direction === undefined || direction === null)
            throw new Error("The parameter 'direction' must be defined and cannot be null.");
        else
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues2(_response);
        });
    };
    Client.prototype.processIssues2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_26 = resultData200; _i < resultData200_26.length; _i++) {
                        var item = resultData200_26[_i];
                        result200.push(Anonymous3.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.issues3 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues3(_response);
        });
    };
    Client.prototype.processIssues3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Issue.fromJS(resultData201) : new Issue();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @direction Ignored without 'sort' parameter.
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments11 = function (owner, repo, direction, sort, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (direction !== undefined)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments11(_response);
        });
    };
    Client.prototype.processComments11 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_27 = resultData200; _i < resultData200_27.length; _i++) {
                        var item = resultData200_27[_i];
                        result200.push(Anonymous18.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId ID of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.comments12 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments12(_response);
        });
    };
    Client.prototype.processComments12 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId ID of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments13 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments13(_response);
        });
    };
    Client.prototype.processComments13 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? IssuesComment.fromJS(resultData200) : new IssuesComment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId ID of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments14 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments14(_response);
        });
    };
    Client.prototype.processComments14 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? IssuesComment.fromJS(resultData200) : new IssuesComment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events5 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/events";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents5(_response);
        });
    };
    Client.prototype.processEvents5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @eventId Id of the event.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events6 = function (owner, repo, eventId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/events/{eventId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents6(_response);
        });
    };
    Client.prototype.processEvents6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Event.fromJS(resultData200) : new Event();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issues4 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues4(_response);
        });
    };
    Client.prototype.processIssues4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Issue.fromJS(resultData200) : new Issue();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issues5 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues5(_response);
        });
    };
    Client.prototype.processIssues5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Issue.fromJS(resultData200) : new Issue();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments15 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments15(_response);
        });
    };
    Client.prototype.processComments15 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_28 = resultData200; _i < resultData200_28.length; _i++) {
                        var item = resultData200_28[_i];
                        result200.push(Anonymous18.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.comments16 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments16(_response);
        });
    };
    Client.prototype.processComments16 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? IssuesComment.fromJS(resultData201) : new IssuesComment();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.events7 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/events";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents7(_response);
        });
    };
    Client.prototype.processEvents7 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.labels = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels(_response);
        });
    };
    Client.prototype.processLabels = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.labelsAll = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabelsAll(_response);
        });
    };
    Client.prototype.processLabelsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_29 = resultData200; _i < resultData200_29.length; _i++) {
                        var item = resultData200_29[_i];
                        result200.push(Anonymous19.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.labels2 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels2(_response);
        });
    };
    Client.prototype.processLabels2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Label.fromJS(resultData201) : new Label();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.labels3 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels3(_response);
        });
    };
    Client.prototype.processLabels3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Label.fromJS(resultData201) : new Label();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of issue.
     * @name Name of the label.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Item removed.
     */
    Client.prototype.labels4 = function (owner, repo, number, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels/{name}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels4(_response);
        });
    };
    Client.prototype.processLabels4 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.keysAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeysAll(_response);
        });
    };
    Client.prototype.processKeysAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_30 = resultData200; _i < resultData200_30.length; _i++) {
                        var item = resultData200_30[_i];
                        result200.push(Anonymous20.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.keys = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys(_response);
        });
    };
    Client.prototype.processKeys = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? UserKeysKeyId.fromJS(resultData201) : new UserKeysKeyId();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @keyId Id of key.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.keys2 = function (owner, repo, keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys/{keyId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (keyId === undefined || keyId === null)
            throw new Error("The parameter 'keyId' must be defined.");
        url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys2(_response);
        });
    };
    Client.prototype.processKeys2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @keyId Id of key.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.keys3 = function (owner, repo, keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys/{keyId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (keyId === undefined || keyId === null)
            throw new Error("The parameter 'keyId' must be defined.");
        url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys3(_response);
        });
    };
    Client.prototype.processKeys3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UserKeysKeyId.fromJS(resultData200) : new UserKeysKeyId();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.labels5 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels5(_response);
        });
    };
    Client.prototype.processLabels5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_31 = resultData200; _i < resultData200_31.length; _i++) {
                        var item = resultData200_31[_i];
                        result200.push(Anonymous19.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.labels6 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels6(_response);
        });
    };
    Client.prototype.processLabels6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Label.fromJS(resultData201) : new Label();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @name Name of the label.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.labels7 = function (owner, repo, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels/{name}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels7(_response);
        });
    };
    Client.prototype.processLabels7 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @name Name of the label.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.labels8 = function (owner, repo, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels/{name}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels8(_response);
        });
    };
    Client.prototype.processLabels8 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Label.fromJS(resultData200) : new Label();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @name Name of the label.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.labels9 = function (owner, repo, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels/{name}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels9(_response);
        });
    };
    Client.prototype.processLabels9 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Label.fromJS(resultData200) : new Label();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.languages = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/languages";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLanguages(_response);
        });
    };
    Client.prototype.processLanguages = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200) {
                    result200 = {};
                    for (var key in resultData200) {
                        if (resultData200.hasOwnProperty(key))
                            result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Successful Response (The resulting merge commit)
     */
    Client.prototype.merges = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/merges";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMerges(_response);
        });
    };
    Client.prototype.processMerges = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? MergesSuccessful.fromJS(resultData201) : new MergesSuccessful();
                return result201;
            });
        }
        else if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                var result404 = null;
                var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result404 = resultData404 ? MergesConflict.fromJS(resultData404) : new MergesConflict();
                return throwException("A server error occurred.", _status, _responseText, result404);
            });
        }
        else if (_status === 409) {
            return _response.text().then(function (_responseText) {
                var result409 = null;
                var resultData409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result409 = resultData409 ? MergesConflict.fromJS(resultData409) : new MergesConflict();
                return throwException("A server error occurred.", _status, _responseText, result409);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @state String to filter by state.
     * @direction Ignored without 'sort' parameter.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.milestones = function (owner, repo, state, direction, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (direction !== undefined)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMilestones(_response);
        });
    };
    Client.prototype.processMilestones = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Milestone.fromJS(resultData200) : new Milestone();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.milestones2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMilestones2(_response);
        });
    };
    Client.prototype.processMilestones2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Milestone.fromJS(resultData201) : new Milestone();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of milestone.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.milestones3 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMilestones3(_response);
        });
    };
    Client.prototype.processMilestones3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of milestone.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.milestones4 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMilestones4(_response);
        });
    };
    Client.prototype.processMilestones4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Milestone.fromJS(resultData200) : new Milestone();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of milestone.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.milestones5 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMilestones5(_response);
        });
    };
    Client.prototype.processMilestones5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Milestone.fromJS(resultData200) : new Milestone();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Number of milestone.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.labels10 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}/labels";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLabels10(_response);
        });
    };
    Client.prototype.processLabels10 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_32 = resultData200; _i < resultData200_32.length; _i++) {
                        var item = resultData200_32[_i];
                        result200.push(Anonymous19.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @all True to show notifications marked as read.
     * @participating True to show only notifications in which the user is directly participating
or mentioned.
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.notifications3 = function (owner, repo, all, participating, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/notifications?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (all !== undefined)
            url_ += "all=" + encodeURIComponent("" + all) + "&";
        if (participating !== undefined)
            url_ += "participating=" + encodeURIComponent("" + participating) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processNotifications3(_response);
        });
    };
    Client.prototype.processNotifications3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Notifications.fromJS(resultData200) : new Notifications();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Marked as read.
     */
    Client.prototype.notifications4 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/notifications";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processNotifications4(_response);
        });
    };
    Client.prototype.processNotifications4 = function (_response) {
        var _status = _response.status;
        if (_status === 205) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @state String to filter by state.
     * @head Filter pulls by head user and branch name in the format of 'user:ref-name'.
Example: github:new-script-format.
     * @base Filter pulls by base branch name. Example - gh-pages.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.pullsAll = function (owner, repo, state, head, base, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (head !== undefined)
            url_ += "head=" + encodeURIComponent("" + head) + "&";
        if (base !== undefined)
            url_ += "base=" + encodeURIComponent("" + base) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPullsAll(_response);
        });
    };
    Client.prototype.processPullsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_33 = resultData200; _i < resultData200_33.length; _i++) {
                        var item = resultData200_33[_i];
                        result200.push(Anonymous21.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.pulls = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPulls(_response);
        });
    };
    Client.prototype.processPulls = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData201 && resultData201.constructor === Array) {
                    result201 = [];
                    for (var _i = 0, resultData201_3 = resultData201; _i < resultData201_3.length; _i++) {
                        var item = resultData201_3[_i];
                        result201.push(Anonymous21.fromJS(item));
                    }
                }
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @direction Ignored without 'sort' parameter.
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments17 = function (owner, repo, direction, sort, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (direction !== undefined)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments17(_response);
        });
    };
    Client.prototype.processComments17 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_34 = resultData200; _i < resultData200_34.length; _i++) {
                        var item = resultData200_34[_i];
                        result200.push(Anonymous18.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.comments18 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments18(_response);
        });
    };
    Client.prototype.processComments18 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments19 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments19(_response);
        });
    };
    Client.prototype.processComments19 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PullsComment.fromJS(resultData200) : new PullsComment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @commentId Id of comment.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments20 = function (owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments/{commentId}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments20(_response);
        });
    };
    Client.prototype.processComments20 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PullsComment.fromJS(resultData200) : new PullsComment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.pulls2 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPulls2(_response);
        });
    };
    Client.prototype.processPulls2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PullRequest.fromJS(resultData200) : new PullRequest();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.pulls3 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPulls3(_response);
        });
    };
    Client.prototype.processPulls3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Repo.fromJS(resultData200) : new Repo();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.comments21 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments21(_response);
        });
    };
    Client.prototype.processComments21 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PullsComment.fromJS(resultData200) : new PullsComment();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.comments22 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/comments";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processComments22(_response);
        });
    };
    Client.prototype.processComments22 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? PullsComment.fromJS(resultData201) : new PullsComment();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.commits4 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/commits";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCommits4(_response);
        });
    };
    Client.prototype.processCommits4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_35 = resultData200; _i < resultData200_35.length; _i++) {
                        var item = resultData200_35[_i];
                        result200.push(Anonymous10.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.files = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/files";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFiles(_response);
        });
    };
    Client.prototype.processFiles = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_36 = resultData200; _i < resultData200_36.length; _i++) {
                        var item = resultData200_36[_i];
                        result200.push(Anonymous21.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Pull request has been merged.
     */
    Client.prototype.merge = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/merge";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMerge(_response);
        });
    };
    Client.prototype.processMerge = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @number Id of pull.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Response if merge was successful.
     */
    Client.prototype.merge2 = function (owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/merge";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMerge2(_response);
        });
    };
    Client.prototype.processMerge2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Merge.fromJS(resultData200) : new Merge();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 405) {
            return _response.text().then(function (_responseText) {
                var result405 = null;
                var resultData405 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result405 = resultData405 ? Merge.fromJS(resultData405) : new Merge();
                return throwException("A server error occurred.", _status, _responseText, result405);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @ref The String name of the Commit/Branch/Tag. Defaults to master.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.readme = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/readme?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref !== undefined)
            url_ += "ref=" + encodeURIComponent("" + ref) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReadme(_response);
        });
    };
    Client.prototype.processReadme = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ContentsPath.fromJS(resultData200) : new ContentsPath();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.releasesAll = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReleasesAll(_response);
        });
    };
    Client.prototype.processReleasesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_37 = resultData200; _i < resultData200_37.length; _i++) {
                        var item = resultData200_37[_i];
                        result200.push(Anonymous22.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.releases = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReleases(_response);
        });
    };
    Client.prototype.processReleases = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? Release.fromJS(resultData201) : new Release();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No Content
     */
    Client.prototype.assets = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/assets/{id}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAssets(_response);
        });
    };
    Client.prototype.processAssets = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.assets2 = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/assets/{id}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAssets2(_response);
        });
    };
    Client.prototype.processAssets2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Asset.fromJS(resultData200) : new Asset();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.assets3 = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/assets/{id}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAssets3(_response);
        });
    };
    Client.prototype.processAssets3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Asset.fromJS(resultData200) : new Asset();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No Content
     */
    Client.prototype.releases2 = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReleases2(_response);
        });
    };
    Client.prototype.processReleases2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.releases3 = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReleases3(_response);
        });
    };
    Client.prototype.processReleases3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Release.fromJS(resultData200) : new Release();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.releases4 = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReleases4(_response);
        });
    };
    Client.prototype.processReleases4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Release.fromJS(resultData200) : new Release();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.assetsAll = function (owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}/assets";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAssetsAll(_response);
        });
    };
    Client.prototype.processAssetsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_38 = resultData200; _i < resultData200_38.length; _i++) {
                        var item = resultData200_38[_i];
                        result200.push(Anonymous23.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.stargazers = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/stargazers";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStargazers(_response);
        });
    };
    Client.prototype.processStargazers = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_39 = resultData200; _i < resultData200_39.length; _i++) {
                        var item = resultData200_39[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.contributors = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/contributors";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processContributors(_response);
        });
    };
    Client.prototype.processContributors = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_40 = resultData200; _i < resultData200_40.length; _i++) {
                        var item = resultData200_40[_i];
                        result200.push(Anonymous24.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.participation = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/participation";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processParticipation(_response);
        });
    };
    Client.prototype.processParticipation = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ParticipationStats.fromJS(resultData200) : new ParticipationStats();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @ref Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.statuses2 = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/statuses/{ref}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref === undefined || ref === null)
            throw new Error("The parameter 'ref' must be defined.");
        url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStatuses2(_response);
        });
    };
    Client.prototype.processStatuses2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_41 = resultData200; _i < resultData200_41.length; _i++) {
                        var item = resultData200_41[_i];
                        result200.push(Anonymous25.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @ref Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.statuses3 = function (owner, repo, ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/statuses/{ref}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (ref === undefined || ref === null)
            throw new Error("The parameter 'ref' must be defined.");
        url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStatuses3(_response);
        });
    };
    Client.prototype.processStatuses3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData201 && resultData201.constructor === Array) {
                    result201 = [];
                    for (var _i = 0, resultData201_4 = resultData201; _i < resultData201_4.length; _i++) {
                        var item = resultData201_4[_i];
                        result201.push(Anonymous25.fromJS(item));
                    }
                }
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.subscribers = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscribers";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscribers(_response);
        });
    };
    Client.prototype.processSubscribers = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_42 = resultData200; _i < resultData200_42.length; _i++) {
                        var item = resultData200_42[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.subscription4 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscription";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscription4(_response);
        });
    };
    Client.prototype.processSubscription4 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.subscription5 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscription";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscription5(_response);
        });
    };
    Client.prototype.processSubscription5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Subscribition.fromJS(resultData200) : new Subscribition();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.subscription6 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscription";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscription6(_response);
        });
    };
    Client.prototype.processSubscription6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Subscribition.fromJS(resultData200) : new Subscribition();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.tags3 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/tags";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTags3(_response);
        });
    };
    Client.prototype.processTags3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Tags.fromJS(resultData200) : new Tags();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.teams2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/teams";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeams2(_response);
        });
    };
    Client.prototype.processTeams2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_43 = resultData200; _i < resultData200_43.length; _i++) {
                        var item = resultData200_43[_i];
                        result200.push(Anonymous6.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.watchers = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/watchers";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processWatchers(_response);
        });
    };
    Client.prototype.processWatchers = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_44 = resultData200; _i < resultData200_44.length; _i++) {
                        var item = resultData200_44[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @path Valid Git reference, defaults to 'master'.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.repos5 = function (owner, repo, archive_format, path, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/{archive_format}/{path}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        if (archive_format === undefined || archive_format === null)
            throw new Error("The parameter 'archive_format' must be defined.");
        url_ = url_.replace("{archive_format}", encodeURIComponent("" + archive_format));
        if (path === undefined || path === null)
            throw new Error("The parameter 'path' must be defined.");
        url_ = url_.replace("{path}", encodeURIComponent("" + path));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos5(_response);
        });
    };
    Client.prototype.processRepos5 = function (_response) {
        var _status = _response.status;
        if (_status === 302) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repositoriesAll = function (since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repositories?";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepositoriesAll(_response);
        });
    };
    Client.prototype.processRepositoriesAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_45 = resultData200; _i < resultData200_45.length; _i++) {
                        var item = resultData200_45[_i];
                        result200.push(Anonymous26.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @order The sort field. if sort param is provided. Can be either asc or desc.
     * @q The search terms. This can be any combination of the supported code
search parameters:
'Search In' Qualifies which fields are searched. With this qualifier
you can restrict the search to just the file contents, the file path,
or both.
'Languages' Searches code based on the language it's written in.
'Forks' Filters repositories based on the number of forks, and/or
whether code from forked repositories should be included in the results
at all.
'Size' Finds files that match a certain size (in bytes).
'Path' Specifies the path that the resulting file must be at.
'Extension' Matches files with a certain extension.
'Users' or 'Repositories' Limits searches to a specific user or repository.
     * @sort Can only be 'indexed', which indicates how recently a file has been indexed
by the GitHub search infrastructure. If not provided, results are sorted
by best match.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.code = function (order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/search/code?";
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (q === undefined || q === null)
            throw new Error("The parameter 'q' must be defined and cannot be null.");
        else
            url_ += "q=" + encodeURIComponent("" + q) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCode(_response);
        });
    };
    Client.prototype.processCode = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchCode.fromJS(resultData200) : new SearchCode();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @order The sort field. if sort param is provided. Can be either asc or desc.
     * @q The q search term can also contain any combination of the supported issue search qualifiers:
     * @sort The sort field. Can be comments, created, or updated. Default: results are sorted by best match.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issues6 = function (order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/search/issues?";
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (q === undefined || q === null)
            throw new Error("The parameter 'q' must be defined and cannot be null.");
        else
            url_ += "q=" + encodeURIComponent("" + q) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues6(_response);
        });
    };
    Client.prototype.processIssues6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchIssues.fromJS(resultData200) : new SearchIssues();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @order The sort field. if sort param is provided. Can be either asc or desc.
     * @q The search terms. This can be any combination of the supported repository
search parameters:
'Search In' Qualifies which fields are searched. With this qualifier you
can restrict the search to just the repository name, description, readme,
or any combination of these.
'Size' Finds repositories that match a certain size (in kilobytes).
'Forks' Filters repositories based on the number of forks, and/or whether
forked repositories should be included in the results at all.
'Created' and 'Last Updated' Filters repositories based on times of
creation, or when they were last updated.
'Users or Repositories' Limits searches to a specific user or repository.
'Languages' Searches repositories based on the language they are written in.
'Stars' Searches repositories based on the number of stars.
     * @sort If not provided, results are sorted by best match.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repositories = function (order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/search/repositories?";
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (q === undefined || q === null)
            throw new Error("The parameter 'q' must be defined and cannot be null.");
        else
            url_ += "q=" + encodeURIComponent("" + q) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepositories(_response);
        });
    };
    Client.prototype.processRepositories = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchRepositories.fromJS(resultData200) : new SearchRepositories();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @order The sort field. if sort param is provided. Can be either asc or desc.
     * @q The search terms. This can be any combination of the supported user
search parameters:
'Search In' Qualifies which fields are searched. With this qualifier you
can restrict the search to just the username, public email, full name,
location, or any combination of these.
'Repository count' Filters users based on the number of repositories they
have.
'Location' Filter users by the location indicated in their profile.
'Language' Search for users that have repositories that match a certain
language.
'Created' Filter users based on when they joined.
'Followers' Filter users based on the number of followers they have.
     * @sort If not provided, results are sorted by best match.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.users = function (order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/search/users?";
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (q === undefined || q === null)
            throw new Error("The parameter 'q' must be defined and cannot be null.");
        else
            url_ += "q=" + encodeURIComponent("" + q) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUsers(_response);
        });
    };
    Client.prototype.processUsers = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SearchUsers.fromJS(resultData200) : new SearchUsers();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.teams3 = function (teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeams3(_response);
        });
    };
    Client.prototype.processTeams3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.teams4 = function (teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeams4(_response);
        });
    };
    Client.prototype.processTeams4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.teams5 = function (teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeams5(_response);
        });
    };
    Client.prototype.processTeams5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.members3 = function (teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/members";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers3(_response);
        });
    };
    Client.prototype.processMembers3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_46 = resultData200; _i < resultData200_46.length; _i++) {
                        var item = resultData200_46[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @username Name of a member.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Team member removed.
     */
    Client.prototype.members4 = function (teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/members/{username}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers4(_response);
        });
    };
    Client.prototype.processMembers4 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @username Name of a member.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return User is a member.
     */
    Client.prototype.members5 = function (teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/members/{username}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers5(_response);
        });
    };
    Client.prototype.processMembers5 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @username Name of a member.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Team member added.
     */
    Client.prototype.members6 = function (teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/members/{username}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers6(_response);
        });
    };
    Client.prototype.processMembers6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 422) {
            return _response.text().then(function (_responseText) {
                var result422 = null;
                var resultData422 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result422 = resultData422 ? OrganizationAsTeamMember.fromJS(resultData422) : new OrganizationAsTeamMember();
                return throwException("A server error occurred.", _status, _responseText, result422);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @username Name of a member.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Team member removed.
     */
    Client.prototype.memberships = function (teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/memberships/{username}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMemberships(_response);
        });
    };
    Client.prototype.processMemberships = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @username Name of a member.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return User is a member.
     */
    Client.prototype.memberships2 = function (teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/memberships/{username}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMemberships2(_response);
        });
    };
    Client.prototype.processMemberships2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TeamMembership.fromJS(resultData200) : new TeamMembership();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @username Name of a member.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Team member added.
     */
    Client.prototype.memberships3 = function (teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/memberships/{username}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMemberships3(_response);
        });
    };
    Client.prototype.processMemberships3 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TeamMembership.fromJS(resultData200) : new TeamMembership();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 422) {
            return _response.text().then(function (_responseText) {
                var result422 = null;
                var resultData422 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result422 = resultData422 ? OrganizationAsTeamMember.fromJS(resultData422) : new OrganizationAsTeamMember();
                return throwException("A server error occurred.", _status, _responseText, result422);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repos6 = function (teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/repos";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos6(_response);
        });
    };
    Client.prototype.processRepos6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_47 = resultData200; _i < resultData200_47.length; _i++) {
                        var item = resultData200_47[_i];
                        result200.push(Anonymous27.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @org Name of a organization.
     * @repo Name of a repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.repos7 = function (teamId, org, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/repos/{org}/{repo}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos7(_response);
        });
    };
    Client.prototype.processRepos7 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @owner Name of a repository owner.
     * @repo Name of a repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.repos8 = function (teamId, owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/repos/{owner}/{repo}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos8(_response);
        });
    };
    Client.prototype.processRepos8 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @teamId Id of team.
     * @owner Name of a repository owner.
     * @repo Name of a repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.repos9 = function (teamId, owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/teams/{teamId}/repos/{owner}/{repo}";
        if (teamId === undefined || teamId === null)
            throw new Error("The parameter 'teamId' must be defined.");
        url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos9(_response);
        });
    };
    Client.prototype.processRepos9 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.user = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUser(_response);
        });
    };
    Client.prototype.processUser = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? User.fromJS(resultData200) : new User();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.user2 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUser2(_response);
        });
    };
    Client.prototype.processUser2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? User.fromJS(resultData200) : new User();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.emails = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/user/emails";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEmails(_response);
        });
    };
    Client.prototype.processEmails = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.emailsAll = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/emails";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/vnd.github.v3; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEmailsAll(_response);
        });
    };
    Client.prototype.processEmailsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_48 = resultData200; _i < resultData200_48.length; _i++) {
                        var item = resultData200_48[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.emails2 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/user/emails";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEmails2(_response);
        });
    };
    Client.prototype.processEmails2 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.followersAll = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/followers";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowersAll(_response);
        });
    };
    Client.prototype.processFollowersAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_49 = resultData200; _i < resultData200_49.length; _i++) {
                        var item = resultData200_49[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.followingAll = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/following";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowingAll(_response);
        });
    };
    Client.prototype.processFollowingAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_50 = resultData200; _i < resultData200_50.length; _i++) {
                        var item = resultData200_50[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return User unfollowed.
     */
    Client.prototype.following = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/following/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowing(_response);
        });
    };
    Client.prototype.processFollowing = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Response if you are following this user.
     */
    Client.prototype.following2 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/following/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowing2(_response);
        });
    };
    Client.prototype.processFollowing2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return You are now following the user.
     */
    Client.prototype.following3 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/following/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowing3(_response);
        });
    };
    Client.prototype.processFollowing3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @filter Issues assigned to you / created by you / mentioning you / you're
subscribed to updates for / All issues the authenticated user can see
     * @labels String list of comma separated Label names. Example - bug,ui,@high.
     * @since Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Only issues updated at or after this time are returned.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.issues7 = function (filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/issues?";
        if (filter === undefined || filter === null)
            throw new Error("The parameter 'filter' must be defined and cannot be null.");
        else
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined and cannot be null.");
        else
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (labels === undefined || labels === null)
            throw new Error("The parameter 'labels' must be defined and cannot be null.");
        else
            url_ += "labels=" + encodeURIComponent("" + labels) + "&";
        if (sort === undefined || sort === null)
            throw new Error("The parameter 'sort' must be defined and cannot be null.");
        else
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (direction === undefined || direction === null)
            throw new Error("The parameter 'direction' must be defined and cannot be null.");
        else
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processIssues7(_response);
        });
    };
    Client.prototype.processIssues7 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_51 = resultData200; _i < resultData200_51.length; _i++) {
                        var item = resultData200_51[_i];
                        result200.push(Anonymous3.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.keys4 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/keys";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys4(_response);
        });
    };
    Client.prototype.processKeys4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_52 = resultData200; _i < resultData200_52.length; _i++) {
                        var item = resultData200_52[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.keys5 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/user/keys";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys5(_response);
        });
    };
    Client.prototype.processKeys5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? UserKeysKeyId.fromJS(resultData201) : new UserKeysKeyId();
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @keyId ID of key.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return No content.
     */
    Client.prototype.keys6 = function (keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/keys/{keyId}";
        if (keyId === undefined || keyId === null)
            throw new Error("The parameter 'keyId' must be defined.");
        url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys6(_response);
        });
    };
    Client.prototype.processKeys6 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @keyId ID of key.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.keys7 = function (keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/keys/{keyId}";
        if (keyId === undefined || keyId === null)
            throw new Error("The parameter 'keyId' must be defined.");
        url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys7(_response);
        });
    };
    Client.prototype.processKeys7 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UserKeysKeyId.fromJS(resultData200) : new UserKeysKeyId();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.orgsAll = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/orgs";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processOrgsAll(_response);
        });
    };
    Client.prototype.processOrgsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_53 = resultData200; _i < resultData200_53.length; _i++) {
                        var item = resultData200_53[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repos10 = function (type, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/repos?";
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos10(_response);
        });
    };
    Client.prototype.processRepos10 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_54 = resultData200; _i < resultData200_54.length; _i++) {
                        var item = resultData200_54[_i];
                        result200.push(Anonymous5.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Created
     */
    Client.prototype.repos11 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body) {
        var _this = this;
        var url_ = this.baseUrl + "/user/repos";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body ? body.toJSON() : null);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos11(_response);
        });
    };
    Client.prototype.processRepos11 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 201) {
            return _response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData201 && resultData201.constructor === Array) {
                    result201 = [];
                    for (var _i = 0, resultData201_5 = resultData201; _i < resultData201_5.length; _i++) {
                        var item = resultData201_5[_i];
                        result201.push(Anonymous5.fromJS(item));
                    }
                }
                return result201;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @direction Ignored without 'sort' parameter.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.starred = function (direction, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/starred?";
        if (direction !== undefined)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStarred(_response);
        });
    };
    Client.prototype.processStarred = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_55 = resultData200; _i < resultData200_55.length; _i++) {
                        var item = resultData200_55[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of a repository owner.
     * @repo Name of a repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Unstarred.
     */
    Client.prototype.starred2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/starred/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStarred2(_response);
        });
    };
    Client.prototype.processStarred2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of a repository owner.
     * @repo Name of a repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return This repository is starred by you.
     */
    Client.prototype.starred3 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/starred/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStarred3(_response);
        });
    };
    Client.prototype.processStarred3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of a repository owner.
     * @repo Name of a repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Repository starred.
     */
    Client.prototype.starred4 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/starred/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStarred4(_response);
        });
    };
    Client.prototype.processStarred4 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.subscriptionsAll = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/subscriptions";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscriptionsAll(_response);
        });
    };
    Client.prototype.processSubscriptionsAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_56 = resultData200; _i < resultData200_56.length; _i++) {
                        var item = resultData200_56[_i];
                        result200.push(Anonymous28.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of the owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Unwatched.
     */
    Client.prototype.subscriptions = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/subscriptions/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscriptions(_response);
        });
    };
    Client.prototype.processSubscriptions = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of the owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Repository is watched by you.
     */
    Client.prototype.subscriptions2 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/subscriptions/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscriptions2(_response);
        });
    };
    Client.prototype.processSubscriptions2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @owner Name of the owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Repository is watched.
     */
    Client.prototype.subscriptions3 = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/subscriptions/{owner}/{repo}";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscriptions3(_response);
        });
    };
    Client.prototype.processSubscriptions3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.teams6 = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/user/teams";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processTeams6(_response);
        });
    };
    Client.prototype.processTeams6 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_57 = resultData200; _i < resultData200_57.length; _i++) {
                        var item = resultData200_57[_i];
                        result200.push(Anonymous29.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @since The integer ID of the last User that you've seen.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.usersAll = function (since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users?";
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUsersAll(_response);
        });
    };
    Client.prototype.processUsersAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_58 = resultData200; _i < resultData200_58.length; _i++) {
                        var item = resultData200_58[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.users2 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUsers2(_response);
        });
    };
    Client.prototype.processUsers2 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_59 = resultData200; _i < resultData200_59.length; _i++) {
                        var item = resultData200_59[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.events8 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/events";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents8(_response);
        });
    };
    Client.prototype.processEvents8 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.orgs3 = function (username, org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/events/orgs/{org}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processOrgs3(_response);
        });
    };
    Client.prototype.processOrgs3 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.followers = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/followers";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowers(_response);
        });
    };
    Client.prototype.processFollowers = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_60 = resultData200; _i < resultData200_60.length; _i++) {
                        var item = resultData200_60[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @targetUser Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Response if user follows target user.
     */
    Client.prototype.following4 = function (username, targetUser, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/following/{targetUser}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (targetUser === undefined || targetUser === null)
            throw new Error("The parameter 'targetUser' must be defined.");
        url_ = url_.replace("{targetUser}", encodeURIComponent("" + targetUser));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFollowing4(_response);
        });
    };
    Client.prototype.processFollowing4 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @since The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Example: "2012-10-09T23:39:01Z".
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.gists5 = function (username, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/gists?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (since !== undefined)
            url_ += "since=" + encodeURIComponent("" + since) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGists5(_response);
        });
    };
    Client.prototype.processGists5 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_61 = resultData200; _i < resultData200_61.length; _i++) {
                        var item = resultData200_61[_i];
                        result200.push(Anonymous.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.keys8 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/keys";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processKeys8(_response);
        });
    };
    Client.prototype.processKeys8 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_62 = resultData200; _i < resultData200_62.length; _i++) {
                        var item = resultData200_62[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.orgs4 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/orgs";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processOrgs4(_response);
        });
    };
    Client.prototype.processOrgs4 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_63 = resultData200; _i < resultData200_63.length; _i++) {
                        var item = resultData200_63[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.public = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/received_events/public";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPublic(_response);
        });
    };
    Client.prototype.processPublic = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    Client.prototype.repos12 = function (username, type, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/repos?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processRepos12(_response);
        });
    };
    Client.prototype.processRepos12 = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_64 = resultData200; _i < resultData200_64.length; _i++) {
                        var item = resultData200_64[_i];
                        result200.push(Anonymous5.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.starred5 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/starred";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processStarred5(_response);
        });
    };
    Client.prototype.processStarred5 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    Client.prototype.subscriptions4 = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/subscriptions";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processSubscriptions4(_response);
        });
    };
    Client.prototype.processSubscriptions4 = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return Client;
}());
var PublicClient = (function () {
    function PublicClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @org Name of organisation.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    PublicClient.prototype.membersAll = function (org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/public_members";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembersAll(_response);
        });
    };
    PublicClient.prototype.processMembersAll = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_65 = resultData200; _i < resultData200_65.length; _i++) {
                        var item = resultData200_65[_i];
                        result200.push(Anonymous4.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @username Name of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Concealed.
     */
    PublicClient.prototype.members = function (org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/public_members/{username}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers(_response);
        });
    };
    PublicClient.prototype.processMembers = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @username Name of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return User is a public member.
     */
    PublicClient.prototype.members2 = function (org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/public_members/{username}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers2(_response);
        });
    };
    PublicClient.prototype.processMembers2 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status === 404) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @org Name of organisation.
     * @username Name of the user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return Publicized.
     */
    PublicClient.prototype.members3 = function (org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/orgs/{org}/public_members/{username}";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined.");
        url_ = url_.replace("{org}", encodeURIComponent("" + org));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = "";
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processMembers3(_response);
        });
    };
    PublicClient.prototype.processMembers3 = function (_response) {
        var _status = _response.status;
        if (_status === 204) {
            return _response.text().then(function (_responseText) {
                return null;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return PublicClient;
}());
var RateClient = (function () {
    function RateClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    RateClient.prototype.limit = function (x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/rate_limit";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processLimit(_response);
        });
    };
    RateClient.prototype.processLimit = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Rate_limit.fromJS(resultData200) : new Rate_limit();
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return RateClient;
}());
var CodeClient = (function () {
    function CodeClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    CodeClient.prototype.frequency = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/code_frequency";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processFrequency(_response);
        });
    };
    CodeClient.prototype.processFrequency = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_66 = resultData200; _i < resultData200_66.length; _i++) {
                        var item = resultData200_66[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return CodeClient;
}());
var CommitClient = (function () {
    function CommitClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    CommitClient.prototype.activity = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/commit_activity";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processActivity(_response);
        });
    };
    CommitClient.prototype.processActivity = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_67 = resultData200; _i < resultData200_67.length; _i++) {
                        var item = resultData200_67[_i];
                        result200.push(Anonymous30.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return CommitClient;
}());
var PunchClient = (function () {
    function PunchClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @owner Name of repository owner.
     * @repo Name of repository.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     * @return OK
     */
    PunchClient.prototype.card = function (owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/punch_card";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (repo === undefined || repo === null)
            throw new Error("The parameter 'repo' must be defined.");
        url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCard(_response);
        });
    };
    PunchClient.prototype.processCard = function (_response) {
        var _this = this;
        var _status = _response.status;
        if (_status === 200) {
            return _response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_68 = resultData200; _i < resultData200_68.length; _i++) {
                        var item = resultData200_68[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return PunchClient;
}());
var ReceivedClient = (function () {
    function ReceivedClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
    /**
     * @username Name of user.
     * @x_GitHub_Media_Type You can check the current version of media type in responses.
     * @accept Is used to set specified media type.
     */
    ReceivedClient.prototype.events = function (username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id) {
        var _this = this;
        var url_ = this.baseUrl + "/users/{username}/received_events";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "X-GitHub-Media-Type": x_GitHub_Media_Type,
                "Accept": accept,
                "X-RateLimit-Limit": x_RateLimit_Limit,
                "X-RateLimit-Remaining": x_RateLimit_Remaining,
                "X-RateLimit-Reset": x_RateLimit_Reset,
                "X-GitHub-Request-Id": x_GitHub_Request_Id,
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processEvents(_response);
        });
    };
    ReceivedClient.prototype.processEvents = function (_response) {
        var _status = _response.status;
        if (_status === 403) {
            return _response.text().then(function (_responseText) {
                return throwException("A server error occurred.", _status, _responseText);
            });
        }
        else if (_status !== 200 && _status !== 204) {
            return _response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Promise.resolve(null);
    };
    return ReceivedClient;
}());
var Asset = (function () {
    function Asset(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Asset.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.created_at = data["created_at"];
            this.download_count = data["download_count"];
            this.id = data["id"];
            this.label = data["label"];
            this.name = data["name"];
            this.size = data["size"];
            this.state = data["state"];
            this.updated_at = data["updated_at"];
            this.uploader = data["uploader"] ? Uploader.fromJS(data["uploader"]) : undefined;
            this.url = data["url"];
        }
    };
    Asset.fromJS = function (data) {
        var result = new Asset();
        result.init(data);
        return result;
    };
    Asset.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["created_at"] = this.created_at;
        data["download_count"] = this.download_count;
        data["id"] = this.id;
        data["label"] = this.label;
        data["name"] = this.name;
        data["size"] = this.size;
        data["state"] = this.state;
        data["updated_at"] = this.updated_at;
        data["uploader"] = this.uploader ? this.uploader.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return Asset;
}());
var AssetPatch = (function () {
    function AssetPatch(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AssetPatch.prototype.init = function (data) {
        if (data) {
            this.label = data["label"];
            this.name = data["name"];
        }
    };
    AssetPatch.fromJS = function (data) {
        var result = new AssetPatch();
        result.init(data);
        return result;
    };
    AssetPatch.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["label"] = this.label;
        data["name"] = this.name;
        return data;
    };
    return AssetPatch;
}());
var Blob = (function () {
    function Blob(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Blob.prototype.init = function (data) {
        if (data) {
            this.content = data["content"];
            this.encoding = data["encoding"] ? BlobEncoding.fromJS(data["encoding"]) : undefined;
            this.sha = data["sha"];
            this.size = data["size"];
        }
    };
    Blob.fromJS = function (data) {
        var result = new Blob();
        result.init(data);
        return result;
    };
    Blob.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content"] = this.content;
        data["encoding"] = this.encoding ? this.encoding.toJSON() : undefined;
        data["sha"] = this.sha;
        data["size"] = this.size;
        return data;
    };
    return Blob;
}());
var Blobs = (function () {
    function Blobs(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Blobs.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
        }
    };
    Blobs.fromJS = function (data) {
        var result = new Blobs();
        result.init(data);
        return result;
    };
    Blobs.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        return data;
    };
    return Blobs;
}());
var Branch = (function () {
    function Branch(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Branch.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links.fromJS(data["_links"]) : undefined;
            this.commit = data["commit"] ? commit.fromJS(data["commit"]) : undefined;
            this.name = data["name"];
        }
    };
    Branch.fromJS = function (data) {
        var result = new Branch();
        result.init(data);
        return result;
    };
    Branch.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["name"] = this.name;
        return data;
    };
    return Branch;
}());
var Comment = (function () {
    function Comment(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Comment.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
        }
    };
    Comment.fromJS = function (data) {
        var result = new Comment();
        result.init(data);
        return result;
    };
    Comment.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        return data;
    };
    return Comment;
}());
var CommentBody = (function () {
    function CommentBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CommentBody.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
        }
    };
    CommentBody.fromJS = function (data) {
        var result = new CommentBody();
        result.init(data);
        return result;
    };
    CommentBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        return data;
    };
    return CommentBody;
}());
var Commit = (function () {
    function Commit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Commit.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? Author.fromJS(data["author"]) : undefined;
            this.commit = data["commit"] ? commit2.fromJS(data["commit"]) : undefined;
            this.committer = data["committer"] ? Committer.fromJS(data["committer"]) : undefined;
            if (data["files"] && data["files"].constructor === Array) {
                this.files = [];
                for (var _i = 0, _a = data["files"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.files.push(Files.fromJS(item));
                }
            }
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _b = 0, _c = data["parents"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.parents.push(Parents.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.stats = data["stats"] ? Stats.fromJS(data["stats"]) : undefined;
            this.url = data["url"];
        }
    };
    Commit.fromJS = function (data) {
        var result = new Commit();
        result.init(data);
        return result;
    };
    Commit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        if (this.files && this.files.constructor === Array) {
            data["files"] = [];
            for (var _i = 0, _a = this.files; _i < _a.length; _i++) {
                var item = _a[_i];
                data["files"].push(item.toJSON());
            }
        }
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _b = 0, _c = this.parents; _b < _c.length; _b++) {
                var item = _c[_b];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["stats"] = this.stats ? this.stats.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return Commit;
}());
var CommitBody = (function () {
    function CommitBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CommitBody.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.line = data["line"];
            this.number = data["number"];
            this.path = data["path"];
            this.position = data["position"];
            this.sha = data["sha"];
        }
    };
    CommitBody.fromJS = function (data) {
        var result = new CommitBody();
        result.init(data);
        return result;
    };
    CommitBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["line"] = this.line;
        data["number"] = this.number;
        data["path"] = this.path;
        data["position"] = this.position;
        data["sha"] = this.sha;
        return data;
    };
    return CommitBody;
}());
var CommitComments = (function () {
    function CommitComments(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CommitComments.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.commit_id = data["commit_id"];
            this.created_at = data["created_at"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.line = data["line"];
            this.path = data["path"];
            this.position = data["position"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user.fromJS(data["user"]) : undefined;
        }
    };
    CommitComments.fromJS = function (data) {
        var result = new CommitComments();
        result.init(data);
        return result;
    };
    CommitComments.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["commit_id"] = this.commit_id;
        data["created_at"] = this.created_at;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["line"] = this.line;
        data["path"] = this.path;
        data["position"] = this.position;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return CommitComments;
}());
var CompareCommits = (function () {
    function CompareCommits(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CompareCommits.prototype.init = function (data) {
        if (data) {
            this.ahead_by = data["ahead_by"];
            this.base_commit = data["base_commit"] ? Base_commit.fromJS(data["base_commit"]) : undefined;
            this.behind_by = data["behind_by"];
            if (data["commits"] && data["commits"].constructor === Array) {
                this.commits = [];
                for (var _i = 0, _a = data["commits"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.commits.push(Commits.fromJS(item));
                }
            }
            this.diff_url = data["diff_url"];
            if (data["files"] && data["files"].constructor === Array) {
                this.files = [];
                for (var _b = 0, _c = data["files"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.files.push(files.fromJS(item));
                }
            }
            this.html_url = data["html_url"];
            this.patch_url = data["patch_url"];
            this.permalink_url = data["permalink_url"];
            this.status = data["status"];
            this.total_commits = data["total_commits"];
            this.url = data["url"];
        }
    };
    CompareCommits.fromJS = function (data) {
        var result = new CompareCommits();
        result.init(data);
        return result;
    };
    CompareCommits.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["ahead_by"] = this.ahead_by;
        data["base_commit"] = this.base_commit ? this.base_commit.toJSON() : undefined;
        data["behind_by"] = this.behind_by;
        if (this.commits && this.commits.constructor === Array) {
            data["commits"] = [];
            for (var _i = 0, _a = this.commits; _i < _a.length; _i++) {
                var item = _a[_i];
                data["commits"].push(item.toJSON());
            }
        }
        data["diff_url"] = this.diff_url;
        if (this.files && this.files.constructor === Array) {
            data["files"] = [];
            for (var _b = 0, _c = this.files; _b < _c.length; _b++) {
                var item = _c[_b];
                data["files"].push(item.toJSON());
            }
        }
        data["html_url"] = this.html_url;
        data["patch_url"] = this.patch_url;
        data["permalink_url"] = this.permalink_url;
        data["status"] = this.status;
        data["total_commits"] = this.total_commits;
        data["url"] = this.url;
        return data;
    };
    return CompareCommits;
}());
var ContentsPath = (function () {
    function ContentsPath(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ContentsPath.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links2.fromJS(data["_links"]) : undefined;
            this.content = data["content"];
            this.encoding = data["encoding"];
            this.git_url = data["git_url"];
            this.html_url = data["html_url"];
            this.name = data["name"];
            this.path = data["path"];
            this.sha = data["sha"];
            this.size = data["size"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    ContentsPath.fromJS = function (data) {
        var result = new ContentsPath();
        result.init(data);
        return result;
    };
    ContentsPath.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["content"] = this.content;
        data["encoding"] = this.encoding;
        data["git_url"] = this.git_url;
        data["html_url"] = this.html_url;
        data["name"] = this.name;
        data["path"] = this.path;
        data["sha"] = this.sha;
        data["size"] = this.size;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return ContentsPath;
}());
var CreateDownload = (function () {
    function CreateDownload(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateDownload.prototype.init = function (data) {
        if (data) {
            this.accesskeyid = data["accesskeyid"];
            this.acl = data["acl"];
            this.bucket = data["bucket"];
            this.content_type = data["content_type"];
            this.description = data["description"];
            this.download_count = data["download_count"];
            this.expirationdate = data["expirationdate"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.mime_type = data["mime_type"];
            this.name = data["name"];
            this.path = data["path"];
            this.policy = data["policy"];
            this.prefix = data["prefix"];
            this.redirect = data["redirect"];
            this.s3_url = data["s3_url"];
            this.signature = data["signature"];
            this.size = data["size"];
            this.url = data["url"];
        }
    };
    CreateDownload.fromJS = function (data) {
        var result = new CreateDownload();
        result.init(data);
        return result;
    };
    CreateDownload.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["accesskeyid"] = this.accesskeyid;
        data["acl"] = this.acl;
        data["bucket"] = this.bucket;
        data["content_type"] = this.content_type;
        data["description"] = this.description;
        data["download_count"] = this.download_count;
        data["expirationdate"] = this.expirationdate;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["mime_type"] = this.mime_type;
        data["name"] = this.name;
        data["path"] = this.path;
        data["policy"] = this.policy;
        data["prefix"] = this.prefix;
        data["redirect"] = this.redirect;
        data["s3_url"] = this.s3_url;
        data["signature"] = this.signature;
        data["size"] = this.size;
        data["url"] = this.url;
        return data;
    };
    return CreateDownload;
}());
var CreateFile = (function () {
    function CreateFile(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateFile.prototype.init = function (data) {
        if (data) {
            this.commit = data["commit"] ? commit3.fromJS(data["commit"]) : undefined;
            this.content = data["content"] ? Content.fromJS(data["content"]) : undefined;
        }
    };
    CreateFile.fromJS = function (data) {
        var result = new CreateFile();
        result.init(data);
        return result;
    };
    CreateFile.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["content"] = this.content ? this.content.toJSON() : undefined;
        return data;
    };
    return CreateFile;
}());
var CreateFileBody = (function () {
    function CreateFileBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateFileBody.prototype.init = function (data) {
        if (data) {
            this.committer = data["committer"] ? committer.fromJS(data["committer"]) : undefined;
            this.content = data["content"];
            this.message = data["message"];
        }
    };
    CreateFileBody.fromJS = function (data) {
        var result = new CreateFileBody();
        result.init(data);
        return result;
    };
    CreateFileBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["content"] = this.content;
        data["message"] = this.message;
        return data;
    };
    return CreateFileBody;
}());
var DeleteFile = (function () {
    function DeleteFile(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DeleteFile.prototype.init = function (data) {
        if (data) {
            this.commit = data["commit"] ? commit4.fromJS(data["commit"]) : undefined;
            this.content = data["content"];
        }
    };
    DeleteFile.fromJS = function (data) {
        var result = new DeleteFile();
        result.init(data);
        return result;
    };
    DeleteFile.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["content"] = this.content;
        return data;
    };
    return DeleteFile;
}());
var DeleteFileBody = (function () {
    function DeleteFileBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DeleteFileBody.prototype.init = function (data) {
        if (data) {
            this.committer = data["committer"] ? committer2.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.sha = data["sha"];
        }
    };
    DeleteFileBody.fromJS = function (data) {
        var result = new DeleteFileBody();
        result.init(data);
        return result;
    };
    DeleteFileBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["sha"] = this.sha;
        return data;
    };
    return DeleteFileBody;
}());
var Deployment = (function () {
    function Deployment(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Deployment.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.payload = data["payload"] ? Payload.fromJS(data["payload"]) : undefined;
            this.ref = data["ref"];
        }
    };
    Deployment.fromJS = function (data) {
        var result = new Deployment();
        result.init(data);
        return result;
    };
    Deployment.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        data["ref"] = this.ref;
        return data;
    };
    return Deployment;
}());
var DeploymentResp = (function () {
    function DeploymentResp(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DeploymentResp.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? Creator.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.id = data["id"];
            this.payload = data["payload"];
            this.sha = data["sha"];
            this.statuses_url = data["statuses_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    DeploymentResp.fromJS = function (data) {
        var result = new DeploymentResp();
        result.init(data);
        return result;
    };
    DeploymentResp.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["id"] = this.id;
        data["payload"] = this.payload;
        data["sha"] = this.sha;
        data["statuses_url"] = this.statuses_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return DeploymentResp;
}());
var DeploymentStatusesCreate = (function () {
    function DeploymentStatusesCreate(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DeploymentStatusesCreate.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.state = data["state"];
            this.target_url = data["target_url"];
        }
    };
    DeploymentStatusesCreate.fromJS = function (data) {
        var result = new DeploymentStatusesCreate();
        result.init(data);
        return result;
    };
    DeploymentStatusesCreate.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["state"] = this.state;
        data["target_url"] = this.target_url;
        return data;
    };
    return DeploymentStatusesCreate;
}());
var DownloadBody = (function () {
    function DownloadBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DownloadBody.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.description = data["description"];
            this.name = data["name"];
            this.size = data["size"];
        }
    };
    DownloadBody.fromJS = function (data) {
        var result = new DownloadBody();
        result.init(data);
        return result;
    };
    DownloadBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["description"] = this.description;
        data["name"] = this.name;
        data["size"] = this.size;
        return data;
    };
    return DownloadBody;
}());
var Downloads = (function () {
    function Downloads(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Downloads.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.description = data["description"];
            this.download_count = data["download_count"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.name = data["name"];
            this.size = data["size"];
            this.url = data["url"];
        }
    };
    Downloads.fromJS = function (data) {
        var result = new Downloads();
        result.init(data);
        return result;
    };
    Downloads.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["description"] = this.description;
        data["download_count"] = this.download_count;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["name"] = this.name;
        data["size"] = this.size;
        data["url"] = this.url;
        return data;
    };
    return Downloads;
}());
var EditTeam = (function () {
    function EditTeam(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EditTeam.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.permission = data["permission"] ? EditTeamPermission.fromJS(data["permission"]) : undefined;
        }
    };
    EditTeam.fromJS = function (data) {
        var result = new EditTeam();
        result.init(data);
        return result;
    };
    EditTeam.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["name"] = this.name;
        data["permission"] = this.permission ? this.permission.toJSON() : undefined;
        return data;
    };
    return EditTeam;
}());
var Emojis = (function () {
    function Emojis(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Emojis.prototype.init = function (data) {
        if (data) {
            this._100 = data["100"];
            this._1234 = data["1234"];
            this["+1"] = data["+1"];
            this._1 = data["-1"];
            this._8ball = data["8ball"];
            this.a = data["a"];
            this.ab = data["ab"];
        }
    };
    Emojis.fromJS = function (data) {
        var result = new Emojis();
        result.init(data);
        return result;
    };
    Emojis.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["100"] = this._100;
        data["1234"] = this._1234;
        data["+1"] = this["+1"];
        data["-1"] = this._1;
        data["8ball"] = this._8ball;
        data["a"] = this.a;
        data["ab"] = this.ab;
        return data;
    };
    return Emojis;
}());
var Event = (function () {
    function Event(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Event.prototype.init = function (data) {
        if (data) {
            this.actor = data["actor"] ? Actor.fromJS(data["actor"]) : undefined;
            this.commit_id = data["commit_id"];
            this.created_at = data["created_at"];
            this.event = data["event"];
            this.issue = data["issue"] ? issue.fromJS(data["issue"]) : undefined;
            this.url = data["url"];
        }
    };
    Event.fromJS = function (data) {
        var result = new Event();
        result.init(data);
        return result;
    };
    Event.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["actor"] = this.actor ? this.actor.toJSON() : undefined;
        data["commit_id"] = this.commit_id;
        data["created_at"] = this.created_at;
        data["event"] = this.event;
        data["issue"] = this.issue ? this.issue.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return Event;
}());
var Events = (function () {
    function Events(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Events.prototype.init = function (data) {
        if (data) {
            this.actor = data["actor"] ? actor.fromJS(data["actor"]) : undefined;
            if (data["created_at"]) {
                this.created_at = {};
                for (var key in data["created_at"]) {
                    if (data["created_at"].hasOwnProperty(key))
                        this.created_at[key] = data["created_at"][key];
                }
            }
            this.id = data["id"];
            this.org = data["org"] ? Org.fromJS(data["org"]) : undefined;
            if (data["payload"]) {
                this.payload = {};
                for (var key in data["payload"]) {
                    if (data["payload"].hasOwnProperty(key))
                        this.payload[key] = data["payload"][key];
                }
            }
            this.public = data["public"];
            this.repo = data["repo"] ? repo.fromJS(data["repo"]) : undefined;
            this.type = data["type"];
        }
    };
    Events.fromJS = function (data) {
        var result = new Events();
        result.init(data);
        return result;
    };
    Events.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["actor"] = this.actor ? this.actor.toJSON() : undefined;
        if (this.created_at) {
            data["created_at"] = {};
            for (var key in this.created_at) {
                if (this.created_at.hasOwnProperty(key))
                    data["created_at"][key] = this.created_at[key];
            }
        }
        data["id"] = this.id;
        data["org"] = this.org ? this.org.toJSON() : undefined;
        if (this.payload) {
            data["payload"] = {};
            for (var key in this.payload) {
                if (this.payload.hasOwnProperty(key))
                    data["payload"][key] = this.payload[key];
            }
        }
        data["public"] = this.public;
        data["repo"] = this.repo ? this.repo.toJSON() : undefined;
        data["type"] = this.type;
        return data;
    };
    return Events;
}());
var Feeds = (function () {
    function Feeds(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Feeds.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links3.fromJS(data["_links"]) : undefined;
            this.current_user_actor_url = data["current_user_actor_url"];
            this.current_user_organization_url = data["current_user_organization_url"];
            this.current_user_public = data["current_user_public"];
            this.current_user_url = data["current_user_url"];
            this.timeline_url = data["timeline_url"];
            this.user_url = data["user_url"];
        }
    };
    Feeds.fromJS = function (data) {
        var result = new Feeds();
        result.init(data);
        return result;
    };
    Feeds.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["current_user_actor_url"] = this.current_user_actor_url;
        data["current_user_organization_url"] = this.current_user_organization_url;
        data["current_user_public"] = this.current_user_public;
        data["current_user_url"] = this.current_user_url;
        data["timeline_url"] = this.timeline_url;
        data["user_url"] = this.user_url;
        return data;
    };
    return Feeds;
}());
var Fork = (function () {
    function Fork(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Fork.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? Owner.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Fork.fromJS = function (data) {
        var result = new Fork();
        result.init(data);
        return result;
    };
    Fork.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Fork;
}());
var ForkBody = (function () {
    function ForkBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ForkBody.prototype.init = function (data) {
        if (data) {
            this.organization = data["organization"];
        }
    };
    ForkBody.fromJS = function (data) {
        var result = new ForkBody();
        result.init(data);
        return result;
    };
    ForkBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["organization"] = this.organization;
        return data;
    };
    return ForkBody;
}());
var Gist = (function () {
    function Gist(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Gist.prototype.init = function (data) {
        if (data) {
            this.comments = data["comments"];
            this.comments_url = data["comments_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.files = data["files"] ? files2.fromJS(data["files"]) : undefined;
            if (data["forks"] && data["forks"].constructor === Array) {
                this.forks = [];
                for (var _i = 0, _a = data["forks"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.forks.push(Forks.fromJS(item));
                }
            }
            this.git_pull_url = data["git_pull_url"];
            this.git_push_url = data["git_push_url"];
            if (data["history"] && data["history"].constructor === Array) {
                this.history = [];
                for (var _b = 0, _c = data["history"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.history.push(History.fromJS(item));
                }
            }
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.public = data["public"];
            this.url = data["url"];
            this.user = data["user"] ? user2.fromJS(data["user"]) : undefined;
        }
    };
    Gist.fromJS = function (data) {
        var result = new Gist();
        result.init(data);
        return result;
    };
    Gist.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["comments"] = this.comments;
        data["comments_url"] = this.comments_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["files"] = this.files ? this.files.toJSON() : undefined;
        if (this.forks && this.forks.constructor === Array) {
            data["forks"] = [];
            for (var _i = 0, _a = this.forks; _i < _a.length; _i++) {
                var item = _a[_i];
                data["forks"].push(item.toJSON());
            }
        }
        data["git_pull_url"] = this.git_pull_url;
        data["git_push_url"] = this.git_push_url;
        if (this.history && this.history.constructor === Array) {
            data["history"] = [];
            for (var _b = 0, _c = this.history; _b < _c.length; _b++) {
                var item = _c[_b];
                data["history"].push(item.toJSON());
            }
        }
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["public"] = this.public;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Gist;
}());
var GitCommit = (function () {
    function GitCommit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GitCommit.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author.fromJS(data["author"]) : undefined;
            this.message = data["message"];
            this.parents = data["parents"];
            this.tree = data["tree"];
        }
    };
    GitCommit.fromJS = function (data) {
        var result = new GitCommit();
        result.init(data);
        return result;
    };
    GitCommit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["message"] = this.message;
        data["parents"] = this.parents;
        data["tree"] = this.tree;
        return data;
    };
    return GitCommit;
}());
var GitRefPatch = (function () {
    function GitRefPatch(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GitRefPatch.prototype.init = function (data) {
        if (data) {
            this.force = data["force"];
            this.sha = data["sha"];
        }
    };
    GitRefPatch.fromJS = function (data) {
        var result = new GitRefPatch();
        result.init(data);
        return result;
    };
    GitRefPatch.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["force"] = this.force;
        data["sha"] = this.sha;
        return data;
    };
    return GitRefPatch;
}());
var GitignoreLang = (function () {
    function GitignoreLang(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GitignoreLang.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.source = data["source"];
        }
    };
    GitignoreLang.fromJS = function (data) {
        var result = new GitignoreLang();
        result.init(data);
        return result;
    };
    GitignoreLang.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["name"] = this.name;
        data["source"] = this.source;
        return data;
    };
    return GitignoreLang;
}());
var HeadBranch = (function () {
    function HeadBranch(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HeadBranch.prototype.init = function (data) {
        if (data) {
            this.object = data["object"] ? ObjectP.fromJS(data["object"]) : undefined;
            this.ref = data["ref"];
            this.url = data["url"];
        }
    };
    HeadBranch.fromJS = function (data) {
        var result = new HeadBranch();
        result.init(data);
        return result;
    };
    HeadBranch.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["object"] = this.object ? this.object.toJSON() : undefined;
        data["ref"] = this.ref;
        data["url"] = this.url;
        return data;
    };
    return HeadBranch;
}());
var HeadBranchBody = (function () {
    function HeadBranchBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HeadBranchBody.prototype.init = function (data) {
        if (data) {
            this.force = data["force"];
            this.sha = data["sha"];
        }
    };
    HeadBranchBody.fromJS = function (data) {
        var result = new HeadBranchBody();
        result.init(data);
        return result;
    };
    HeadBranchBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["force"] = this.force;
        data["sha"] = this.sha;
        return data;
    };
    return HeadBranchBody;
}());
var HookBody = (function () {
    function HookBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HookBody.prototype.init = function (data) {
        if (data) {
            this.active = data["active"];
            if (data["add_events"] && data["add_events"].constructor === Array) {
                this.add_events = [];
                for (var _i = 0, _a = data["add_events"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.add_events.push(item);
                }
            }
        }
    };
    HookBody.fromJS = function (data) {
        var result = new HookBody();
        result.init(data);
        return result;
    };
    HookBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["active"] = this.active;
        if (this.add_events && this.add_events.constructor === Array) {
            data["add_events"] = [];
            for (var _i = 0, _a = this.add_events; _i < _a.length; _i++) {
                var item = _a[_i];
                data["add_events"].push(item);
            }
        }
        return data;
    };
    return HookBody;
}());
var Issue = (function () {
    function Issue(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Issue.prototype.init = function (data) {
        if (data) {
            this.assignee = data["assignee"];
            this.body = data["body"];
            if (data["labels"] && data["labels"].constructor === Array) {
                this.labels = [];
                for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.labels.push(item);
                }
            }
            this.milestone = data["milestone"];
            this.title = data["title"];
        }
    };
    Issue.fromJS = function (data) {
        var result = new Issue();
        result.init(data);
        return result;
    };
    Issue.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["assignee"] = this.assignee;
        data["body"] = this.body;
        if (this.labels && this.labels.constructor === Array) {
            data["labels"] = [];
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var item = _a[_i];
                data["labels"].push(item);
            }
        }
        data["milestone"] = this.milestone;
        data["title"] = this.title;
        return data;
    };
    return Issue;
}());
var IssueBody = (function () {
    function IssueBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IssueBody.prototype.init = function (data) {
        if (data) {
            this.assignee = data["assignee"];
            this.body = data["body"];
            if (data["labels"] && data["labels"].constructor === Array) {
                this.labels = [];
                for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.labels.push(item);
                }
            }
            this.milestone = data["milestone"];
            this.title = data["title"];
        }
    };
    IssueBody.fromJS = function (data) {
        var result = new IssueBody();
        result.init(data);
        return result;
    };
    IssueBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["assignee"] = this.assignee;
        data["body"] = this.body;
        if (this.labels && this.labels.constructor === Array) {
            data["labels"] = [];
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var item = _a[_i];
                data["labels"].push(item);
            }
        }
        data["milestone"] = this.milestone;
        data["title"] = this.title;
        return data;
    };
    return IssueBody;
}());
var IssuesComment = (function () {
    function IssuesComment(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IssuesComment.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.created_at = data["created_at"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user3.fromJS(data["user"]) : undefined;
        }
    };
    IssuesComment.fromJS = function (data) {
        var result = new IssuesComment();
        result.init(data);
        return result;
    };
    IssuesComment.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["created_at"] = this.created_at;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return IssuesComment;
}());
var Key = (function () {
    function Key(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Key.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.key = data["key"];
            this.title = data["title"];
            this.url = data["url"];
        }
    };
    Key.fromJS = function (data) {
        var result = new Key();
        result.init(data);
        return result;
    };
    Key.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    };
    return Key;
}());
var KeyBody = (function () {
    function KeyBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    KeyBody.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.title = data["title"];
        }
    };
    KeyBody.fromJS = function (data) {
        var result = new KeyBody();
        result.init(data);
        return result;
    };
    KeyBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["key"] = this.key;
        data["title"] = this.title;
        return data;
    };
    return KeyBody;
}());
var Label = (function () {
    function Label(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Label.prototype.init = function (data) {
        if (data) {
            this.color = data["color"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    Label.fromJS = function (data) {
        var result = new Label();
        result.init(data);
        return result;
    };
    Label.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["color"] = this.color;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return Label;
}());
var Markdown = (function () {
    function Markdown(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Markdown.prototype.init = function (data) {
        if (data) {
            this.context = data["context"];
            this.mode = data["mode"];
            this.text = data["text"];
        }
    };
    Markdown.fromJS = function (data) {
        var result = new Markdown();
        result.init(data);
        return result;
    };
    Markdown.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["context"] = this.context;
        data["mode"] = this.mode;
        data["text"] = this.text;
        return data;
    };
    return Markdown;
}());
var Merge = (function () {
    function Merge(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Merge.prototype.init = function (data) {
        if (data) {
            this.merged = data["merged"];
            this.message = data["message"];
            this.sha = data["sha"];
        }
    };
    Merge.fromJS = function (data) {
        var result = new Merge();
        result.init(data);
        return result;
    };
    Merge.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["merged"] = this.merged;
        data["message"] = this.message;
        data["sha"] = this.sha;
        return data;
    };
    return Merge;
}());
var MergePullBody = (function () {
    function MergePullBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MergePullBody.prototype.init = function (data) {
        if (data) {
            this.commit_message = data["commit_message"];
        }
    };
    MergePullBody.fromJS = function (data) {
        var result = new MergePullBody();
        result.init(data);
        return result;
    };
    MergePullBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["commit_message"] = this.commit_message;
        return data;
    };
    return MergePullBody;
}());
var MergesBody = (function () {
    function MergesBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MergesBody.prototype.init = function (data) {
        if (data) {
            this.base = data["base"];
            this.commit_message = data["commit_message"];
            this.head = data["head"];
        }
    };
    MergesBody.fromJS = function (data) {
        var result = new MergesBody();
        result.init(data);
        return result;
    };
    MergesBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["base"] = this.base;
        data["commit_message"] = this.commit_message;
        data["head"] = this.head;
        return data;
    };
    return MergesBody;
}());
var MergesConflict = (function () {
    function MergesConflict(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MergesConflict.prototype.init = function (data) {
        if (data) {
            this.message = data["message"];
        }
    };
    MergesConflict.fromJS = function (data) {
        var result = new MergesConflict();
        result.init(data);
        return result;
    };
    MergesConflict.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["message"] = this.message;
        return data;
    };
    return MergesConflict;
}());
var MergesSuccessful = (function () {
    function MergesSuccessful(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MergesSuccessful.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author2.fromJS(data["author"]) : undefined;
            this.comments_url = data["comments_url"];
            this.commit = data["commit"] ? commit5.fromJS(data["commit"]) : undefined;
            this.committer = data["committer"] ? committer3.fromJS(data["committer"]) : undefined;
            this.merged = data["merged"];
            this.message = data["message"];
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    MergesSuccessful.fromJS = function (data) {
        var result = new MergesSuccessful();
        result.init(data);
        return result;
    };
    MergesSuccessful.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["comments_url"] = this.comments_url;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["merged"] = this.merged;
        data["message"] = this.message;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return MergesSuccessful;
}());
var Meta = (function () {
    function Meta(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Meta.prototype.init = function (data) {
        if (data) {
            if (data["git"] && data["git"].constructor === Array) {
                this.git = [];
                for (var _i = 0, _a = data["git"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.git.push(item);
                }
            }
            if (data["hooks"] && data["hooks"].constructor === Array) {
                this.hooks = [];
                for (var _b = 0, _c = data["hooks"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.hooks.push(item);
                }
            }
        }
    };
    Meta.fromJS = function (data) {
        var result = new Meta();
        result.init(data);
        return result;
    };
    Meta.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.git && this.git.constructor === Array) {
            data["git"] = [];
            for (var _i = 0, _a = this.git; _i < _a.length; _i++) {
                var item = _a[_i];
                data["git"].push(item);
            }
        }
        if (this.hooks && this.hooks.constructor === Array) {
            data["hooks"] = [];
            for (var _b = 0, _c = this.hooks; _b < _c.length; _b++) {
                var item = _c[_b];
                data["hooks"].push(item);
            }
        }
        return data;
    };
    return Meta;
}());
var Milestone = (function () {
    function Milestone(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Milestone.prototype.init = function (data) {
        if (data) {
            this.closed_issues = data["closed_issues"];
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? creator.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.due_on = data["due_on"];
            this.number = data["number"];
            this.open_issues = data["open_issues"];
            this.state = data["state"] ? MilestoneState.fromJS(data["state"]) : undefined;
            this.title = data["title"];
            this.url = data["url"];
        }
    };
    Milestone.fromJS = function (data) {
        var result = new Milestone();
        result.init(data);
        return result;
    };
    Milestone.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["closed_issues"] = this.closed_issues;
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["due_on"] = this.due_on;
        data["number"] = this.number;
        data["open_issues"] = this.open_issues;
        data["state"] = this.state ? this.state.toJSON() : undefined;
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    };
    return Milestone;
}());
var MilestoneBody = (function () {
    function MilestoneBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MilestoneBody.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.due_on = data["due_on"];
            this.state = data["state"];
            this.title = data["title"];
        }
    };
    MilestoneBody.fromJS = function (data) {
        var result = new MilestoneBody();
        result.init(data);
        return result;
    };
    MilestoneBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["due_on"] = this.due_on;
        data["state"] = this.state;
        data["title"] = this.title;
        return data;
    };
    return MilestoneBody;
}());
var MilestoneUpdate = (function () {
    function MilestoneUpdate(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MilestoneUpdate.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.due_on = data["due_on"];
            this.state = data["state"];
            this.title = data["title"];
        }
    };
    MilestoneUpdate.fromJS = function (data) {
        var result = new MilestoneUpdate();
        result.init(data);
        return result;
    };
    MilestoneUpdate.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["due_on"] = this.due_on;
        data["state"] = this.state;
        data["title"] = this.title;
        return data;
    };
    return MilestoneUpdate;
}());
var NotificationMarkRead = (function () {
    function NotificationMarkRead(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NotificationMarkRead.prototype.init = function (data) {
        if (data) {
            this.last_read_at = data["last_read_at"];
        }
    };
    NotificationMarkRead.fromJS = function (data) {
        var result = new NotificationMarkRead();
        result.init(data);
        return result;
    };
    NotificationMarkRead.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["last_read_at"] = this.last_read_at;
        return data;
    };
    return NotificationMarkRead;
}());
var Notifications = (function () {
    function Notifications(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Notifications.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.last_read_at = data["last_read_at"];
            this.reason = data["reason"];
            this.repository = data["repository"] ? Repository.fromJS(data["repository"]) : undefined;
            this.subject = data["subject"] ? Subject.fromJS(data["subject"]) : undefined;
            this.unread = data["unread"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    Notifications.fromJS = function (data) {
        var result = new Notifications();
        result.init(data);
        return result;
    };
    Notifications.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["last_read_at"] = this.last_read_at;
        data["reason"] = this.reason;
        data["repository"] = this.repository ? this.repository.toJSON() : undefined;
        data["subject"] = this.subject ? this.subject.toJSON() : undefined;
        data["unread"] = this.unread;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return Notifications;
}());
var OrgTeamsPost = (function () {
    function OrgTeamsPost(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrgTeamsPost.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.permission = data["permission"] ? OrgTeamsPostPermission.fromJS(data["permission"]) : undefined;
            if (data["repo_names"] && data["repo_names"].constructor === Array) {
                this.repo_names = [];
                for (var _i = 0, _a = data["repo_names"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.repo_names.push(item);
                }
            }
        }
    };
    OrgTeamsPost.fromJS = function (data) {
        var result = new OrgTeamsPost();
        result.init(data);
        return result;
    };
    OrgTeamsPost.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["name"] = this.name;
        data["permission"] = this.permission ? this.permission.toJSON() : undefined;
        if (this.repo_names && this.repo_names.constructor === Array) {
            data["repo_names"] = [];
            for (var _i = 0, _a = this.repo_names; _i < _a.length; _i++) {
                var item = _a[_i];
                data["repo_names"].push(item);
            }
        }
        return data;
    };
    return OrgTeamsPost;
}());
var Organization = (function () {
    function Organization(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Organization.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.blog = data["blog"];
            this.company = data["company"];
            this.created_at = data["created_at"];
            this.email = data["email"];
            this.followers = data["followers"];
            this.following = data["following"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.location = data["location"];
            this.login = data["login"];
            this.name = data["name"];
            this.public_gists = data["public_gists"];
            this.public_repos = data["public_repos"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    Organization.fromJS = function (data) {
        var result = new Organization();
        result.init(data);
        return result;
    };
    Organization.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["blog"] = this.blog;
        data["company"] = this.company;
        data["created_at"] = this.created_at;
        data["email"] = this.email;
        data["followers"] = this.followers;
        data["following"] = this.following;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["public_gists"] = this.public_gists;
        data["public_repos"] = this.public_repos;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return Organization;
}());
var OrganizationAsTeamMember = (function () {
    function OrganizationAsTeamMember(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrganizationAsTeamMember.prototype.init = function (data) {
        if (data) {
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (var _i = 0, _a = data["errors"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.errors.push(Errors.fromJS(item));
                }
            }
            this.message = data["message"];
        }
    };
    OrganizationAsTeamMember.fromJS = function (data) {
        var result = new OrganizationAsTeamMember();
        result.init(data);
        return result;
    };
    OrganizationAsTeamMember.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var item = _a[_i];
                data["errors"].push(item.toJSON());
            }
        }
        data["message"] = this.message;
        return data;
    };
    return OrganizationAsTeamMember;
}());
var ParticipationStats = (function () {
    function ParticipationStats(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ParticipationStats.prototype.init = function (data) {
        if (data) {
            if (data["all"] && data["all"].constructor === Array) {
                this.all = [];
                for (var _i = 0, _a = data["all"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.all.push(item);
                }
            }
            if (data["owner"] && data["owner"].constructor === Array) {
                this.owner = [];
                for (var _b = 0, _c = data["owner"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.owner.push(item);
                }
            }
        }
    };
    ParticipationStats.fromJS = function (data) {
        var result = new ParticipationStats();
        result.init(data);
        return result;
    };
    ParticipationStats.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.all && this.all.constructor === Array) {
            data["all"] = [];
            for (var _i = 0, _a = this.all; _i < _a.length; _i++) {
                var item = _a[_i];
                data["all"].push(item);
            }
        }
        if (this.owner && this.owner.constructor === Array) {
            data["owner"] = [];
            for (var _b = 0, _c = this.owner; _b < _c.length; _b++) {
                var item = _c[_b];
                data["owner"].push(item);
            }
        }
        return data;
    };
    return ParticipationStats;
}());
var PatchGist = (function () {
    function PatchGist(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatchGist.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.files = data["files"] ? files3.fromJS(data["files"]) : undefined;
        }
    };
    PatchGist.fromJS = function (data) {
        var result = new PatchGist();
        result.init(data);
        return result;
    };
    PatchGist.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["files"] = this.files ? this.files.toJSON() : undefined;
        return data;
    };
    return PatchGist;
}());
var PatchOrg = (function () {
    function PatchOrg(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatchOrg.prototype.init = function (data) {
        if (data) {
            this.billing_email = data["billing_email"];
            this.company = data["company"];
            this.email = data["email"];
            this.location = data["location"];
            this.name = data["name"];
        }
    };
    PatchOrg.fromJS = function (data) {
        var result = new PatchOrg();
        result.init(data);
        return result;
    };
    PatchOrg.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["billing_email"] = this.billing_email;
        data["company"] = this.company;
        data["email"] = this.email;
        data["location"] = this.location;
        data["name"] = this.name;
        return data;
    };
    return PatchOrg;
}());
var PostComment = (function () {
    function PostComment(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PostComment.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
        }
    };
    PostComment.fromJS = function (data) {
        var result = new PostComment();
        result.init(data);
        return result;
    };
    PostComment.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        return data;
    };
    return PostComment;
}());
var PostGist = (function () {
    function PostGist(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PostGist.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.files = data["files"] ? files4.fromJS(data["files"]) : undefined;
            this.public = data["public"];
        }
    };
    PostGist.fromJS = function (data) {
        var result = new PostGist();
        result.init(data);
        return result;
    };
    PostGist.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["files"] = this.files ? this.files.toJSON() : undefined;
        data["public"] = this.public;
        return data;
    };
    return PostGist;
}());
var PostRepo = (function () {
    function PostRepo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PostRepo.prototype.init = function (data) {
        if (data) {
            this.auto_init = data["auto_init"];
            this.description = data["description"];
            this.gitignore_template = data["gitignore_template"];
            this.has_downloads = data["has_downloads"];
            this.has_issues = data["has_issues"];
            this.has_wiki = data["has_wiki"];
            this.homepage = data["homepage"];
            this.name = data["name"];
            this.private = data["private"];
            this.team_id = data["team_id"];
        }
    };
    PostRepo.fromJS = function (data) {
        var result = new PostRepo();
        result.init(data);
        return result;
    };
    PostRepo.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["auto_init"] = this.auto_init;
        data["description"] = this.description;
        data["gitignore_template"] = this.gitignore_template;
        data["has_downloads"] = this.has_downloads;
        data["has_issues"] = this.has_issues;
        data["has_wiki"] = this.has_wiki;
        data["homepage"] = this.homepage;
        data["name"] = this.name;
        data["private"] = this.private;
        data["team_id"] = this.team_id;
        return data;
    };
    return PostRepo;
}());
var PullRequest = (function () {
    function PullRequest(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PullRequest.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links4.fromJS(data["_links"]) : undefined;
            this.additions = data["additions"];
            this.base = data["base"] ? Base.fromJS(data["base"]) : undefined;
            this.body = data["body"];
            this.changed_files = data["changed_files"];
            this.closed_at = data["closed_at"];
            this.comments = data["comments"];
            this.commits = data["commits"];
            this.created_at = data["created_at"];
            this.deletions = data["deletions"];
            this.diff_url = data["diff_url"];
            this.head = data["head"] ? Head.fromJS(data["head"]) : undefined;
            this.html_url = data["html_url"];
            this.issue_url = data["issue_url"];
            this.merge_commit_sha = data["merge_commit_sha"];
            this.mergeable = data["mergeable"];
            this.merged = data["merged"];
            this.merged_at = data["merged_at"];
            this.merged_by = data["merged_by"] ? Merged_by.fromJS(data["merged_by"]) : undefined;
            this.number = data["number"];
            this.patch_url = data["patch_url"];
            this.state = data["state"];
            this.title = data["title"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user4.fromJS(data["user"]) : undefined;
        }
    };
    PullRequest.fromJS = function (data) {
        var result = new PullRequest();
        result.init(data);
        return result;
    };
    PullRequest.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["additions"] = this.additions;
        data["base"] = this.base ? this.base.toJSON() : undefined;
        data["body"] = this.body;
        data["changed_files"] = this.changed_files;
        data["closed_at"] = this.closed_at;
        data["comments"] = this.comments;
        data["commits"] = this.commits;
        data["created_at"] = this.created_at;
        data["deletions"] = this.deletions;
        data["diff_url"] = this.diff_url;
        data["head"] = this.head ? this.head.toJSON() : undefined;
        data["html_url"] = this.html_url;
        data["issue_url"] = this.issue_url;
        data["merge_commit_sha"] = this.merge_commit_sha;
        data["mergeable"] = this.mergeable;
        data["merged"] = this.merged;
        data["merged_at"] = this.merged_at;
        data["merged_by"] = this.merged_by ? this.merged_by.toJSON() : undefined;
        data["number"] = this.number;
        data["patch_url"] = this.patch_url;
        data["state"] = this.state;
        data["title"] = this.title;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return PullRequest;
}());
var PullUpdate = (function () {
    function PullUpdate(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PullUpdate.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.state = data["state"];
            this.title = data["title"];
        }
    };
    PullUpdate.fromJS = function (data) {
        var result = new PullUpdate();
        result.init(data);
        return result;
    };
    PullUpdate.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["state"] = this.state;
        data["title"] = this.title;
        return data;
    };
    return PullUpdate;
}());
var PullsComment = (function () {
    function PullsComment(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PullsComment.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links5.fromJS(data["_links"]) : undefined;
            this.body = data["body"];
            this.commit_id = data["commit_id"];
            this.created_at = data["created_at"];
            this.id = data["id"];
            this.path = data["path"];
            this.position = data["position"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user5.fromJS(data["user"]) : undefined;
        }
    };
    PullsComment.fromJS = function (data) {
        var result = new PullsComment();
        result.init(data);
        return result;
    };
    PullsComment.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["body"] = this.body;
        data["commit_id"] = this.commit_id;
        data["created_at"] = this.created_at;
        data["id"] = this.id;
        data["path"] = this.path;
        data["position"] = this.position;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return PullsComment;
}());
var PullsCommentPost = (function () {
    function PullsCommentPost(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PullsCommentPost.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.commit_id = data["commit_id"];
            this.path = data["path"];
            this.position = data["position"];
        }
    };
    PullsCommentPost.fromJS = function (data) {
        var result = new PullsCommentPost();
        result.init(data);
        return result;
    };
    PullsCommentPost.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["commit_id"] = this.commit_id;
        data["path"] = this.path;
        data["position"] = this.position;
        return data;
    };
    return PullsCommentPost;
}());
var PullsPost = (function () {
    function PullsPost(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PullsPost.prototype.init = function (data) {
        if (data) {
            this.base = data["base"];
            this.body = data["body"];
            this.head = data["head"];
            this.title = data["title"];
        }
    };
    PullsPost.fromJS = function (data) {
        var result = new PullsPost();
        result.init(data);
        return result;
    };
    PullsPost.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["base"] = this.base;
        data["body"] = this.body;
        data["head"] = this.head;
        data["title"] = this.title;
        return data;
    };
    return PullsPost;
}());
var PutSubscription = (function () {
    function PutSubscription(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PutSubscription.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.ignored = data["ignored"];
            if (data["reason"]) {
                this.reason = {};
                for (var key in data["reason"]) {
                    if (data["reason"].hasOwnProperty(key))
                        this.reason[key] = data["reason"][key];
                }
            }
            this.subscribed = data["subscribed"];
            this.thread_url = data["thread_url"];
            this.url = data["url"];
        }
    };
    PutSubscription.fromJS = function (data) {
        var result = new PutSubscription();
        result.init(data);
        return result;
    };
    PutSubscription.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["ignored"] = this.ignored;
        if (this.reason) {
            data["reason"] = {};
            for (var key in this.reason) {
                if (this.reason.hasOwnProperty(key))
                    data["reason"][key] = this.reason[key];
            }
        }
        data["subscribed"] = this.subscribed;
        data["thread_url"] = this.thread_url;
        data["url"] = this.url;
        return data;
    };
    return PutSubscription;
}());
var Rate_limit = (function () {
    function Rate_limit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Rate_limit.prototype.init = function (data) {
        if (data) {
            this.rate = data["rate"] ? Rate.fromJS(data["rate"]) : undefined;
        }
    };
    Rate_limit.fromJS = function (data) {
        var result = new Rate_limit();
        result.init(data);
        return result;
    };
    Rate_limit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["rate"] = this.rate ? this.rate.toJSON() : undefined;
        return data;
    };
    return Rate_limit;
}());
var Readme = (function () {
    function Readme(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Readme.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links6.fromJS(data["_links"]) : undefined;
            this.content = data["content"];
            this.encoding = data["encoding"];
            this.git_url = data["git_url"];
            this.html_url = data["html_url"];
            this.name = data["name"];
            this.path = data["path"];
            this.sha = data["sha"];
            this.size = data["size"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    Readme.fromJS = function (data) {
        var result = new Readme();
        result.init(data);
        return result;
    };
    Readme.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["content"] = this.content;
        data["encoding"] = this.encoding;
        data["git_url"] = this.git_url;
        data["html_url"] = this.html_url;
        data["name"] = this.name;
        data["path"] = this.path;
        data["sha"] = this.sha;
        data["size"] = this.size;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return Readme;
}());
var RefBody = (function () {
    function RefBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RefBody.prototype.init = function (data) {
        if (data) {
            this.object = data["object"] ? object.fromJS(data["object"]) : undefined;
            this.ref = data["ref"];
            this.url = data["url"];
        }
    };
    RefBody.fromJS = function (data) {
        var result = new RefBody();
        result.init(data);
        return result;
    };
    RefBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["object"] = this.object ? this.object.toJSON() : undefined;
        data["ref"] = this.ref;
        data["url"] = this.url;
        return data;
    };
    return RefBody;
}());
var RefsBody = (function () {
    function RefsBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RefsBody.prototype.init = function (data) {
        if (data) {
            this.ref = data["ref"];
            this.sha = data["sha"];
        }
    };
    RefsBody.fromJS = function (data) {
        var result = new RefsBody();
        result.init(data);
        return result;
    };
    RefsBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["ref"] = this.ref;
        data["sha"] = this.sha;
        return data;
    };
    return RefsBody;
}());
var Release = (function () {
    function Release(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Release.prototype.init = function (data) {
        if (data) {
            if (data["assets"] && data["assets"].constructor === Array) {
                this.assets = [];
                for (var _i = 0, _a = data["assets"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.assets.push(Assets.fromJS(item));
                }
            }
            this.assets_url = data["assets_url"];
            this.author = data["author"] ? author3.fromJS(data["author"]) : undefined;
            this.body = data["body"];
            this.created_at = data["created_at"];
            this.draft = data["draft"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.name = data["name"];
            this.prerelease = data["prerelease"];
            this.published_at = data["published_at"];
            this.tag_name = data["tag_name"];
            this.tarball_url = data["tarball_url"];
            this.target_commitish = data["target_commitish"];
            this.upload_url = data["upload_url"];
            this.url = data["url"];
            this.zipball_url = data["zipball_url"];
        }
    };
    Release.fromJS = function (data) {
        var result = new Release();
        result.init(data);
        return result;
    };
    Release.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.assets && this.assets.constructor === Array) {
            data["assets"] = [];
            for (var _i = 0, _a = this.assets; _i < _a.length; _i++) {
                var item = _a[_i];
                data["assets"].push(item.toJSON());
            }
        }
        data["assets_url"] = this.assets_url;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["body"] = this.body;
        data["created_at"] = this.created_at;
        data["draft"] = this.draft;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["name"] = this.name;
        data["prerelease"] = this.prerelease;
        data["published_at"] = this.published_at;
        data["tag_name"] = this.tag_name;
        data["tarball_url"] = this.tarball_url;
        data["target_commitish"] = this.target_commitish;
        data["upload_url"] = this.upload_url;
        data["url"] = this.url;
        data["zipball_url"] = this.zipball_url;
        return data;
    };
    return Release;
}());
var ReleaseCreate = (function () {
    function ReleaseCreate(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ReleaseCreate.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.draft = data["draft"];
            this.name = data["name"];
            this.prerelease = data["prerelease"];
            this.tag_name = data["tag_name"];
            this.target_commitish = data["target_commitish"];
        }
    };
    ReleaseCreate.fromJS = function (data) {
        var result = new ReleaseCreate();
        result.init(data);
        return result;
    };
    ReleaseCreate.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["draft"] = this.draft;
        data["name"] = this.name;
        data["prerelease"] = this.prerelease;
        data["tag_name"] = this.tag_name;
        data["target_commitish"] = this.target_commitish;
        return data;
    };
    return ReleaseCreate;
}());
var Repo = (function () {
    function Repo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Repo.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.has_downloads = data["has_downloads"];
            this.has_issues = data["has_issues"];
            this.has_wiki = data["has_wiki"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.organization = data["organization"] ? organization.fromJS(data["organization"]) : undefined;
            this.owner = data["owner"] ? owner.fromJS(data["owner"]) : undefined;
            this.parent = data["parent"] ? Parent.fromJS(data["parent"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Repo.fromJS = function (data) {
        var result = new Repo();
        result.init(data);
        return result;
    };
    Repo.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["has_downloads"] = this.has_downloads;
        data["has_issues"] = this.has_issues;
        data["has_wiki"] = this.has_wiki;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["organization"] = this.organization ? this.organization.toJSON() : undefined;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Repo;
}());
var RepoCommit = (function () {
    function RepoCommit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RepoCommit.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author4.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer4.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents2.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.tree = data["tree"] ? tree.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    RepoCommit.fromJS = function (data) {
        var result = new RepoCommit();
        result.init(data);
        return result;
    };
    RepoCommit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return RepoCommit;
}());
var RepoCommitBody = (function () {
    function RepoCommitBody(data) {
        this.parents = [];
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RepoCommitBody.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author5.fromJS(data["author"]) : undefined;
            this.message = data["message"];
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(item);
                }
            }
            this.tree = data["tree"];
        }
    };
    RepoCommitBody.fromJS = function (data) {
        var result = new RepoCommitBody();
        result.init(data);
        return result;
    };
    RepoCommitBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["message"] = this.message;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item);
            }
        }
        data["tree"] = this.tree;
        return data;
    };
    return RepoCommitBody;
}());
var RepoEdit = (function () {
    function RepoEdit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RepoEdit.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.has_downloads = data["has_downloads"];
            this.has_issues = data["has_issues"];
            this.has_wiki = data["has_wiki"];
            this.homepage = data["homepage"];
            this.name = data["name"];
            this.private = data["private"];
        }
    };
    RepoEdit.fromJS = function (data) {
        var result = new RepoEdit();
        result.init(data);
        return result;
    };
    RepoEdit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["has_downloads"] = this.has_downloads;
        data["has_issues"] = this.has_issues;
        data["has_wiki"] = this.has_wiki;
        data["homepage"] = this.homepage;
        data["name"] = this.name;
        data["private"] = this.private;
        return data;
    };
    return RepoEdit;
}());
var SearchCode = (function () {
    function SearchCode(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchCode.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(Items.fromJS(item));
                }
            }
            this.total_count = data["total_count"];
        }
    };
    SearchCode.fromJS = function (data) {
        var result = new SearchCode();
        result.init(data);
        return result;
    };
    SearchCode.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        data["total_count"] = this.total_count;
        return data;
    };
    return SearchCode;
}());
var SearchIssues = (function () {
    function SearchIssues(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchIssues.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(items.fromJS(item));
                }
            }
            this.total_count = data["total_count"];
        }
    };
    SearchIssues.fromJS = function (data) {
        var result = new SearchIssues();
        result.init(data);
        return result;
    };
    SearchIssues.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        data["total_count"] = this.total_count;
        return data;
    };
    return SearchIssues;
}());
var SearchIssuesByKeyword = (function () {
    function SearchIssuesByKeyword(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchIssuesByKeyword.prototype.init = function (data) {
        if (data) {
            if (data["issues"] && data["issues"].constructor === Array) {
                this.issues = [];
                for (var _i = 0, _a = data["issues"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.issues.push(Issues.fromJS(item));
                }
            }
        }
    };
    SearchIssuesByKeyword.fromJS = function (data) {
        var result = new SearchIssuesByKeyword();
        result.init(data);
        return result;
    };
    SearchIssuesByKeyword.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.issues && this.issues.constructor === Array) {
            data["issues"] = [];
            for (var _i = 0, _a = this.issues; _i < _a.length; _i++) {
                var item = _a[_i];
                data["issues"].push(item.toJSON());
            }
        }
        return data;
    };
    return SearchIssuesByKeyword;
}());
var SearchRepositories = (function () {
    function SearchRepositories(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchRepositories.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(items2.fromJS(item));
                }
            }
            this.total_count = data["total_count"];
        }
    };
    SearchRepositories.fromJS = function (data) {
        var result = new SearchRepositories();
        result.init(data);
        return result;
    };
    SearchRepositories.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        data["total_count"] = this.total_count;
        return data;
    };
    return SearchRepositories;
}());
var SearchRepositoriesByKeyword = (function () {
    function SearchRepositoriesByKeyword(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchRepositoriesByKeyword.prototype.init = function (data) {
        if (data) {
            if (data["repositories"] && data["repositories"].constructor === Array) {
                this.repositories = [];
                for (var _i = 0, _a = data["repositories"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.repositories.push(Repositories.fromJS(item));
                }
            }
        }
    };
    SearchRepositoriesByKeyword.fromJS = function (data) {
        var result = new SearchRepositoriesByKeyword();
        result.init(data);
        return result;
    };
    SearchRepositoriesByKeyword.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.repositories && this.repositories.constructor === Array) {
            data["repositories"] = [];
            for (var _i = 0, _a = this.repositories; _i < _a.length; _i++) {
                var item = _a[_i];
                data["repositories"].push(item.toJSON());
            }
        }
        return data;
    };
    return SearchRepositoriesByKeyword;
}());
var SearchUserByEmail = (function () {
    function SearchUserByEmail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchUserByEmail.prototype.init = function (data) {
        if (data) {
            this.user = data["user"] ? user6.fromJS(data["user"]) : undefined;
        }
    };
    SearchUserByEmail.fromJS = function (data) {
        var result = new SearchUserByEmail();
        result.init(data);
        return result;
    };
    SearchUserByEmail.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return SearchUserByEmail;
}());
var SearchUsers = (function () {
    function SearchUsers(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchUsers.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(items3.fromJS(item));
                }
            }
            this.total_count = data["total_count"];
        }
    };
    SearchUsers.fromJS = function (data) {
        var result = new SearchUsers();
        result.init(data);
        return result;
    };
    SearchUsers.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        data["total_count"] = this.total_count;
        return data;
    };
    return SearchUsers;
}());
var SearchUsersByKeyword = (function () {
    function SearchUsersByKeyword(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SearchUsersByKeyword.prototype.init = function (data) {
        if (data) {
            if (data["users"] && data["users"].constructor === Array) {
                this.users = [];
                for (var _i = 0, _a = data["users"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.users.push(Users.fromJS(item));
                }
            }
        }
    };
    SearchUsersByKeyword.fromJS = function (data) {
        var result = new SearchUsersByKeyword();
        result.init(data);
        return result;
    };
    SearchUsersByKeyword.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.users && this.users.constructor === Array) {
            data["users"] = [];
            for (var _i = 0, _a = this.users; _i < _a.length; _i++) {
                var item = _a[_i];
                data["users"].push(item.toJSON());
            }
        }
        return data;
    };
    return SearchUsersByKeyword;
}());
var Subscribition = (function () {
    function Subscribition(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Subscribition.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.ignored = data["ignored"];
            this.reason = data["reason"];
            this.repository_url = data["repository_url"];
            this.subscribed = data["subscribed"];
            this.url = data["url"];
        }
    };
    Subscribition.fromJS = function (data) {
        var result = new Subscribition();
        result.init(data);
        return result;
    };
    Subscribition.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["ignored"] = this.ignored;
        data["reason"] = this.reason;
        data["repository_url"] = this.repository_url;
        data["subscribed"] = this.subscribed;
        data["url"] = this.url;
        return data;
    };
    return Subscribition;
}());
var SubscribitionBody = (function () {
    function SubscribitionBody(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SubscribitionBody.prototype.init = function (data) {
        if (data) {
            this.ignored = data["ignored"];
            this.subscribed = data["subscribed"];
        }
    };
    SubscribitionBody.fromJS = function (data) {
        var result = new SubscribitionBody();
        result.init(data);
        return result;
    };
    SubscribitionBody.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["ignored"] = this.ignored;
        data["subscribed"] = this.subscribed;
        return data;
    };
    return SubscribitionBody;
}());
var Subscription = (function () {
    function Subscription(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Subscription.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.ignored = data["ignored"];
            this.reason = data["reason"];
            this.subscribed = data["subscribed"];
            this.thread_url = data["thread_url"];
            this.url = data["url"];
        }
    };
    Subscription.fromJS = function (data) {
        var result = new Subscription();
        result.init(data);
        return result;
    };
    Subscription.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["ignored"] = this.ignored;
        data["reason"] = this.reason;
        data["subscribed"] = this.subscribed;
        data["thread_url"] = this.thread_url;
        data["url"] = this.url;
        return data;
    };
    return Subscription;
}());
var Tag = (function () {
    function Tag(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Tag.prototype.init = function (data) {
        if (data) {
            this.message = data["message"];
            this.object = data["object"] ? object2.fromJS(data["object"]) : undefined;
            this.sha = data["sha"];
            this.tag = data["tag"];
            this.tagger = data["tagger"] ? Tagger.fromJS(data["tagger"]) : undefined;
            this.url = data["url"];
        }
    };
    Tag.fromJS = function (data) {
        var result = new Tag();
        result.init(data);
        return result;
    };
    Tag.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["message"] = this.message;
        data["object"] = this.object ? this.object.toJSON() : undefined;
        data["sha"] = this.sha;
        data["tag"] = this.tag;
        data["tagger"] = this.tagger ? this.tagger.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return Tag;
}());
var Tags = (function () {
    function Tags(data) {
        this.tagger = new tagger();
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Tags.prototype.init = function (data) {
        if (data) {
            this.message = data["message"];
            this.object = data["object"];
            this.tag = data["tag"];
            this.tagger = data["tagger"] ? tagger.fromJS(data["tagger"]) : new tagger();
            this.type = data["type"];
        }
    };
    Tags.fromJS = function (data) {
        var result = new Tags();
        result.init(data);
        return result;
    };
    Tags.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["message"] = this.message;
        data["object"] = this.object;
        data["tag"] = this.tag;
        data["tagger"] = this.tagger ? this.tagger.toJSON() : undefined;
        data["type"] = this.type;
        return data;
    };
    return Tags;
}());
var Team = (function () {
    function Team(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Team.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.members_count = data["members_count"];
            this.name = data["name"];
            this.permission = data["permission"];
            this.repos_count = data["repos_count"];
            this.url = data["url"];
        }
    };
    Team.fromJS = function (data) {
        var result = new Team();
        result.init(data);
        return result;
    };
    Team.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["members_count"] = this.members_count;
        data["name"] = this.name;
        data["permission"] = this.permission;
        data["repos_count"] = this.repos_count;
        data["url"] = this.url;
        return data;
    };
    return Team;
}());
var TeamMembership = (function () {
    function TeamMembership(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TeamMembership.prototype.init = function (data) {
        if (data) {
            this.state = data["state"];
            this.url = data["url"];
        }
    };
    TeamMembership.fromJS = function (data) {
        var result = new TeamMembership();
        result.init(data);
        return result;
    };
    TeamMembership.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["state"] = this.state;
        data["url"] = this.url;
        return data;
    };
    return TeamMembership;
}());
var Tree = (function () {
    function Tree(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Tree.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            if (data["tree"] && data["tree"].constructor === Array) {
                this.tree = [];
                for (var _i = 0, _a = data["tree"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.tree.push(tree2.fromJS(item));
                }
            }
            this.url = data["url"];
        }
    };
    Tree.fromJS = function (data) {
        var result = new Tree();
        result.init(data);
        return result;
    };
    Tree.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        if (this.tree && this.tree.constructor === Array) {
            data["tree"] = [];
            for (var _i = 0, _a = this.tree; _i < _a.length; _i++) {
                var item = _a[_i];
                data["tree"].push(item.toJSON());
            }
        }
        data["url"] = this.url;
        return data;
    };
    return Tree;
}());
var Trees = (function () {
    function Trees(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Trees.prototype.init = function (data) {
        if (data) {
            this.base_tree = data["base_tree"];
            this.sha = data["sha"];
            if (data["tree"] && data["tree"].constructor === Array) {
                this.tree = [];
                for (var _i = 0, _a = data["tree"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.tree.push(tree3.fromJS(item));
                }
            }
            this.url = data["url"];
        }
    };
    Trees.fromJS = function (data) {
        var result = new Trees();
        result.init(data);
        return result;
    };
    Trees.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["base_tree"] = this.base_tree;
        data["sha"] = this.sha;
        if (this.tree && this.tree.constructor === Array) {
            data["tree"] = [];
            for (var _i = 0, _a = this.tree; _i < _a.length; _i++) {
                var item = _a[_i];
                data["tree"].push(item.toJSON());
            }
        }
        data["url"] = this.url;
        return data;
    };
    return Trees;
}());
var User = (function () {
    function User(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    User.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.bio = data["bio"];
            this.blog = data["blog"];
            this.collaborators = data["collaborators"];
            this.company = data["company"];
            this.created_at = data["created_at"];
            this.disk_usage = data["disk_usage"];
            this.email = data["email"];
            this.followers = data["followers"];
            this.following = data["following"];
            this.gravatar_id = data["gravatar_id"];
            this.hireable = data["hireable"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.location = data["location"];
            this.login = data["login"];
            this.name = data["name"];
            this.owned_private_repos = data["owned_private_repos"];
            this.plan = data["plan"] ? Plan.fromJS(data["plan"]) : undefined;
            this.private_gists = data["private_gists"];
            this.public_gists = data["public_gists"];
            this.public_repos = data["public_repos"];
            this.total_private_repos = data["total_private_repos"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    User.fromJS = function (data) {
        var result = new User();
        result.init(data);
        return result;
    };
    User.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["bio"] = this.bio;
        data["blog"] = this.blog;
        data["collaborators"] = this.collaborators;
        data["company"] = this.company;
        data["created_at"] = this.created_at;
        data["disk_usage"] = this.disk_usage;
        data["email"] = this.email;
        data["followers"] = this.followers;
        data["following"] = this.following;
        data["gravatar_id"] = this.gravatar_id;
        data["hireable"] = this.hireable;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["owned_private_repos"] = this.owned_private_repos;
        data["plan"] = this.plan ? this.plan.toJSON() : undefined;
        data["private_gists"] = this.private_gists;
        data["public_gists"] = this.public_gists;
        data["public_repos"] = this.public_repos;
        data["total_private_repos"] = this.total_private_repos;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return User;
}());
var UserKeysKeyId = (function () {
    function UserKeysKeyId(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserKeysKeyId.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.key = data["key"];
            this.title = data["title"];
            this.url = data["url"];
        }
    };
    UserKeysKeyId.fromJS = function (data) {
        var result = new UserKeysKeyId();
        result.init(data);
        return result;
    };
    UserKeysKeyId.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    };
    return UserKeysKeyId;
}());
var UserKeysPost = (function () {
    function UserKeysPost(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserKeysPost.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.title = data["title"];
        }
    };
    UserKeysPost.fromJS = function (data) {
        var result = new UserKeysPost();
        result.init(data);
        return result;
    };
    UserKeysPost.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["key"] = this.key;
        data["title"] = this.title;
        return data;
    };
    return UserKeysPost;
}());
var UserUpdate = (function () {
    function UserUpdate(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserUpdate.prototype.init = function (data) {
        if (data) {
            this.bio = data["bio"];
            this.blog = data["blog"];
            this.company = data["company"];
            this.email = data["email"];
            this.hireable = data["hireable"];
            this.location = data["location"];
            this.name = data["name"];
        }
    };
    UserUpdate.fromJS = function (data) {
        var result = new UserUpdate();
        result.init(data);
        return result;
    };
    UserUpdate.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["bio"] = this.bio;
        data["blog"] = this.blog;
        data["company"] = this.company;
        data["email"] = this.email;
        data["hireable"] = this.hireable;
        data["location"] = this.location;
        data["name"] = this.name;
        return data;
    };
    return UserUpdate;
}());
var UserUserId = (function () {
    function UserUserId(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserUserId.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.bio = data["bio"];
            this.blog = data["blog"];
            this.company = data["company"];
            this.created_at = data["created_at"];
            this.email = data["email"];
            this.followers = data["followers"];
            this.following = data["following"];
            this.gravatar_id = data["gravatar_id"];
            this.hireable = data["hireable"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.location = data["location"];
            this.login = data["login"];
            this.name = data["name"];
            this.public_gists = data["public_gists"];
            this.public_repos = data["public_repos"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    UserUserId.fromJS = function (data) {
        var result = new UserUserId();
        result.init(data);
        return result;
    };
    UserUserId.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["bio"] = this.bio;
        data["blog"] = this.blog;
        data["company"] = this.company;
        data["created_at"] = this.created_at;
        data["email"] = this.email;
        data["followers"] = this.followers;
        data["following"] = this.following;
        data["gravatar_id"] = this.gravatar_id;
        data["hireable"] = this.hireable;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["public_gists"] = this.public_gists;
        data["public_repos"] = this.public_repos;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return UserUserId;
}());
/** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
var Filter;
(function (Filter) {
    Filter[Filter["Assigned"] = "assigned"] = "Assigned";
    Filter[Filter["Created"] = "created"] = "Created";
    Filter[Filter["Mentioned"] = "mentioned"] = "Mentioned";
    Filter[Filter["Subscribed"] = "subscribed"] = "Subscribed";
    Filter[Filter["All"] = "all"] = "All";
})(Filter || (Filter = {}));
var State;
(function (State) {
    State[State["Open"] = "open"] = "Open";
    State[State["Closed"] = "closed"] = "Closed";
})(State || (State = {}));
var Sort;
(function (Sort) {
    Sort[Sort["Created"] = "created"] = "Created";
    Sort[Sort["Updated"] = "updated"] = "Updated";
    Sort[Sort["Comments"] = "comments"] = "Comments";
})(Sort || (Sort = {}));
var Direction;
(function (Direction) {
    Direction[Direction["Asc"] = "asc"] = "Asc";
    Direction[Direction["Desc"] = "desc"] = "Desc";
})(Direction || (Direction = {}));
/** Indicates the state of the issues to return. Can be either open or closed. */
var State2;
(function (State2) {
    State2[State2["Open"] = "open"] = "Open";
    State2[State2["Closed"] = "closed"] = "Closed";
})(State2 || (State2 = {}));
/** The sort field. if sort param is provided. Can be either asc or desc. */
var Order;
(function (Order) {
    Order[Order["Desc"] = "desc"] = "Desc";
    Order[Order["Asc"] = "asc"] = "Asc";
})(Order || (Order = {}));
/** The sort field. One of stars, forks, or updated. Default: results are sorted by best match. */
var Sort2;
(function (Sort2) {
    Sort2[Sort2["Updated"] = "updated"] = "Updated";
    Sort2[Sort2["Stars"] = "stars"] = "Stars";
    Sort2[Sort2["Forks"] = "forks"] = "Forks";
})(Sort2 || (Sort2 = {}));
/** The sort field. if sort param is provided. Can be either asc or desc. */
var Order2;
(function (Order2) {
    Order2[Order2["Desc"] = "desc"] = "Desc";
    Order2[Order2["Asc"] = "asc"] = "Asc";
})(Order2 || (Order2 = {}));
/** The sort field. One of stars, forks, or updated. Default: results are sorted by best match. */
var Sort3;
(function (Sort3) {
    Sort3[Sort3["Updated"] = "updated"] = "Updated";
    Sort3[Sort3["Stars"] = "stars"] = "Stars";
    Sort3[Sort3["Forks"] = "forks"] = "Forks";
})(Sort3 || (Sort3 = {}));
/** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
var Filter2;
(function (Filter2) {
    Filter2[Filter2["Assigned"] = "assigned"] = "Assigned";
    Filter2[Filter2["Created"] = "created"] = "Created";
    Filter2[Filter2["Mentioned"] = "mentioned"] = "Mentioned";
    Filter2[Filter2["Subscribed"] = "subscribed"] = "Subscribed";
    Filter2[Filter2["All"] = "all"] = "All";
})(Filter2 || (Filter2 = {}));
var State3;
(function (State3) {
    State3[State3["Open"] = "open"] = "Open";
    State3[State3["Closed"] = "closed"] = "Closed";
})(State3 || (State3 = {}));
var Sort4;
(function (Sort4) {
    Sort4[Sort4["Created"] = "created"] = "Created";
    Sort4[Sort4["Updated"] = "updated"] = "Updated";
    Sort4[Sort4["Comments"] = "comments"] = "Comments";
})(Sort4 || (Sort4 = {}));
var Direction2;
(function (Direction2) {
    Direction2[Direction2["Asc"] = "asc"] = "Asc";
    Direction2[Direction2["Desc"] = "desc"] = "Desc";
})(Direction2 || (Direction2 = {}));
var Type;
(function (Type) {
    Type[Type["All"] = "all"] = "All";
    Type[Type["Public"] = "public"] = "Public";
    Type[Type["Private"] = "private"] = "Private";
    Type[Type["Forks"] = "forks"] = "Forks";
    Type[Type["Sources"] = "sources"] = "Sources";
    Type[Type["Member"] = "member"] = "Member";
})(Type || (Type = {}));
var Sort5;
(function (Sort5) {
    Sort5[Sort5["Newes"] = "newes"] = "Newes";
    Sort5[Sort5["Oldes"] = "oldes"] = "Oldes";
    Sort5[Sort5["Watchers"] = "watchers"] = "Watchers";
})(Sort5 || (Sort5 = {}));
/** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
var Filter3;
(function (Filter3) {
    Filter3[Filter3["Assigned"] = "assigned"] = "Assigned";
    Filter3[Filter3["Created"] = "created"] = "Created";
    Filter3[Filter3["Mentioned"] = "mentioned"] = "Mentioned";
    Filter3[Filter3["Subscribed"] = "subscribed"] = "Subscribed";
    Filter3[Filter3["All"] = "all"] = "All";
})(Filter3 || (Filter3 = {}));
var State4;
(function (State4) {
    State4[State4["Open"] = "open"] = "Open";
    State4[State4["Closed"] = "closed"] = "Closed";
})(State4 || (State4 = {}));
var Sort6;
(function (Sort6) {
    Sort6[Sort6["Created"] = "created"] = "Created";
    Sort6[Sort6["Updated"] = "updated"] = "Updated";
    Sort6[Sort6["Comments"] = "comments"] = "Comments";
})(Sort6 || (Sort6 = {}));
var Direction3;
(function (Direction3) {
    Direction3[Direction3["Asc"] = "asc"] = "Asc";
    Direction3[Direction3["Desc"] = "desc"] = "Desc";
})(Direction3 || (Direction3 = {}));
var Sort7;
(function (Sort7) {
    Sort7[Sort7["Created"] = "created"] = "Created";
    Sort7[Sort7["Updated"] = "updated"] = "Updated";
})(Sort7 || (Sort7 = {}));
/** String to filter by state. */
var State5;
(function (State5) {
    State5[State5["Open"] = "open"] = "Open";
    State5[State5["Closed"] = "closed"] = "Closed";
})(State5 || (State5 = {}));
var Sort8;
(function (Sort8) {
    Sort8[Sort8["Due_date"] = "due_date"] = "Due_date";
    Sort8[Sort8["Completeness"] = "completeness"] = "Completeness";
})(Sort8 || (Sort8 = {}));
/** String to filter by state. */
var State6;
(function (State6) {
    State6[State6["Open"] = "open"] = "Open";
    State6[State6["Closed"] = "closed"] = "Closed";
})(State6 || (State6 = {}));
var Sort9;
(function (Sort9) {
    Sort9[Sort9["Created"] = "created"] = "Created";
    Sort9[Sort9["Updated"] = "updated"] = "Updated";
})(Sort9 || (Sort9 = {}));
var Archive_format;
(function (Archive_format) {
    Archive_format[Archive_format["Tarball"] = "tarball"] = "Tarball";
    Archive_format[Archive_format["Zipball"] = "zipball"] = "Zipball";
})(Archive_format || (Archive_format = {}));
/** The sort field. if sort param is provided. Can be either asc or desc. */
var Order3;
(function (Order3) {
    Order3[Order3["Desc"] = "desc"] = "Desc";
    Order3[Order3["Asc"] = "asc"] = "Asc";
})(Order3 || (Order3 = {}));
/** Can only be 'indexed', which indicates how recently a file has been indexed by the GitHub search infrastructure. If not provided, results are sorted by best match. */
var Sort10;
(function (Sort10) {
    Sort10[Sort10["Indexed"] = "indexed"] = "Indexed";
})(Sort10 || (Sort10 = {}));
/** The sort field. if sort param is provided. Can be either asc or desc. */
var Order4;
(function (Order4) {
    Order4[Order4["Desc"] = "desc"] = "Desc";
    Order4[Order4["Asc"] = "asc"] = "Asc";
})(Order4 || (Order4 = {}));
/** The sort field. Can be comments, created, or updated. Default: results are sorted by best match. */
var Sort11;
(function (Sort11) {
    Sort11[Sort11["Updated"] = "updated"] = "Updated";
    Sort11[Sort11["Created"] = "created"] = "Created";
    Sort11[Sort11["Comments"] = "comments"] = "Comments";
})(Sort11 || (Sort11 = {}));
/** The sort field. if sort param is provided. Can be either asc or desc. */
var Order5;
(function (Order5) {
    Order5[Order5["Desc"] = "desc"] = "Desc";
    Order5[Order5["Asc"] = "asc"] = "Asc";
})(Order5 || (Order5 = {}));
/** If not provided, results are sorted by best match. */
var Sort12;
(function (Sort12) {
    Sort12[Sort12["Stars"] = "stars"] = "Stars";
    Sort12[Sort12["Forks"] = "forks"] = "Forks";
    Sort12[Sort12["Updated"] = "updated"] = "Updated";
})(Sort12 || (Sort12 = {}));
/** The sort field. if sort param is provided. Can be either asc or desc. */
var Order6;
(function (Order6) {
    Order6[Order6["Desc"] = "desc"] = "Desc";
    Order6[Order6["Asc"] = "asc"] = "Asc";
})(Order6 || (Order6 = {}));
/** If not provided, results are sorted by best match. */
var Sort13;
(function (Sort13) {
    Sort13[Sort13["Followers"] = "followers"] = "Followers";
    Sort13[Sort13["Repositories"] = "repositories"] = "Repositories";
    Sort13[Sort13["Joined"] = "joined"] = "Joined";
})(Sort13 || (Sort13 = {}));
/** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
var Filter4;
(function (Filter4) {
    Filter4[Filter4["Assigned"] = "assigned"] = "Assigned";
    Filter4[Filter4["Created"] = "created"] = "Created";
    Filter4[Filter4["Mentioned"] = "mentioned"] = "Mentioned";
    Filter4[Filter4["Subscribed"] = "subscribed"] = "Subscribed";
    Filter4[Filter4["All"] = "all"] = "All";
})(Filter4 || (Filter4 = {}));
var State7;
(function (State7) {
    State7[State7["Open"] = "open"] = "Open";
    State7[State7["Closed"] = "closed"] = "Closed";
})(State7 || (State7 = {}));
var Sort14;
(function (Sort14) {
    Sort14[Sort14["Created"] = "created"] = "Created";
    Sort14[Sort14["Updated"] = "updated"] = "Updated";
    Sort14[Sort14["Comments"] = "comments"] = "Comments";
})(Sort14 || (Sort14 = {}));
var Direction4;
(function (Direction4) {
    Direction4[Direction4["Asc"] = "asc"] = "Asc";
    Direction4[Direction4["Desc"] = "desc"] = "Desc";
})(Direction4 || (Direction4 = {}));
var Type2;
(function (Type2) {
    Type2[Type2["All"] = "all"] = "All";
    Type2[Type2["Public"] = "public"] = "Public";
    Type2[Type2["Private"] = "private"] = "Private";
    Type2[Type2["Forks"] = "forks"] = "Forks";
    Type2[Type2["Sources"] = "sources"] = "Sources";
    Type2[Type2["Member"] = "member"] = "Member";
})(Type2 || (Type2 = {}));
var Sort15;
(function (Sort15) {
    Sort15[Sort15["Created"] = "created"] = "Created";
    Sort15[Sort15["Updated"] = "updated"] = "Updated";
})(Sort15 || (Sort15 = {}));
var Type3;
(function (Type3) {
    Type3[Type3["All"] = "all"] = "All";
    Type3[Type3["Public"] = "public"] = "Public";
    Type3[Type3["Private"] = "private"] = "Private";
    Type3[Type3["Forks"] = "forks"] = "Forks";
    Type3[Type3["Sources"] = "sources"] = "Sources";
    Type3[Type3["Member"] = "member"] = "Member";
})(Type3 || (Type3 = {}));
var Anonymous = (function () {
    function Anonymous(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous.prototype.init = function (data) {
        if (data) {
            this.comments = data["comments"];
            this.comments_url = data["comments_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.files = data["files"] ? files5.fromJS(data["files"]) : undefined;
            this.git_pull_url = data["git_pull_url"];
            this.git_push_url = data["git_push_url"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.public = data["public"];
            this.url = data["url"];
            this.user = data["user"] ? user7.fromJS(data["user"]) : undefined;
        }
    };
    Anonymous.fromJS = function (data) {
        var result = new Anonymous();
        result.init(data);
        return result;
    };
    Anonymous.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["comments"] = this.comments;
        data["comments_url"] = this.comments_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["files"] = this.files ? this.files.toJSON() : undefined;
        data["git_pull_url"] = this.git_pull_url;
        data["git_push_url"] = this.git_push_url;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["public"] = this.public;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Anonymous;
}());
var Anonymous2 = (function () {
    function Anonymous2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous2.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.created_at = data["created_at"];
            this.id = data["id"];
            this.url = data["url"];
            this.user = data["user"] ? user8.fromJS(data["user"]) : undefined;
        }
    };
    Anonymous2.fromJS = function (data) {
        var result = new Anonymous2();
        result.init(data);
        return result;
    };
    Anonymous2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["created_at"] = this.created_at;
        data["id"] = this.id;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Anonymous2;
}());
var Anonymous3 = (function () {
    function Anonymous3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous3.prototype.init = function (data) {
        if (data) {
            this.assignee = data["assignee"] ? Assignee.fromJS(data["assignee"]) : undefined;
            this.body = data["body"];
            this.closed_at = data["closed_at"];
            this.comments = data["comments"];
            this.created_at = data["created_at"];
            this.html_url = data["html_url"];
            if (data["labels"] && data["labels"].constructor === Array) {
                this.labels = [];
                for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.labels.push(Labels.fromJS(item));
                }
            }
            this.milestone = data["milestone"] ? milestone.fromJS(data["milestone"]) : undefined;
            this.number = data["number"];
            this.pull_request = data["pull_request"] ? Pull_request.fromJS(data["pull_request"]) : undefined;
            this.state = data["state"];
            this.title = data["title"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user9.fromJS(data["user"]) : undefined;
        }
    };
    Anonymous3.fromJS = function (data) {
        var result = new Anonymous3();
        result.init(data);
        return result;
    };
    Anonymous3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["assignee"] = this.assignee ? this.assignee.toJSON() : undefined;
        data["body"] = this.body;
        data["closed_at"] = this.closed_at;
        data["comments"] = this.comments;
        data["created_at"] = this.created_at;
        data["html_url"] = this.html_url;
        if (this.labels && this.labels.constructor === Array) {
            data["labels"] = [];
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var item = _a[_i];
                data["labels"].push(item.toJSON());
            }
        }
        data["milestone"] = this.milestone ? this.milestone.toJSON() : undefined;
        data["number"] = this.number;
        data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : undefined;
        data["state"] = this.state ? this.state.toJSON() : undefined;
        data["title"] = this.title;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Anonymous3;
}());
var Anonymous4 = (function () {
    function Anonymous4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous4.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Anonymous4.fromJS = function (data) {
        var result = new Anonymous4();
        result.init(data);
        return result;
    };
    Anonymous4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Anonymous4;
}());
var Anonymous5 = (function () {
    function Anonymous5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous5.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner2.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Anonymous5.fromJS = function (data) {
        var result = new Anonymous5();
        result.init(data);
        return result;
    };
    Anonymous5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Anonymous5;
}());
var Anonymous6 = (function () {
    function Anonymous6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous6.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    Anonymous6.fromJS = function (data) {
        var result = new Anonymous6();
        result.init(data);
        return result;
    };
    Anonymous6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return Anonymous6;
}());
var Anonymous7 = (function () {
    function Anonymous7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous7.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Anonymous7.fromJS = function (data) {
        var result = new Anonymous7();
        result.init(data);
        return result;
    };
    Anonymous7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Anonymous7;
}());
var Anonymous8 = (function () {
    function Anonymous8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous8.prototype.init = function (data) {
        if (data) {
            this.commit = data["commit"] ? commit6.fromJS(data["commit"]) : undefined;
            this.name = data["name"];
        }
    };
    Anonymous8.fromJS = function (data) {
        var result = new Anonymous8();
        result.init(data);
        return result;
    };
    Anonymous8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["name"] = this.name;
        return data;
    };
    return Anonymous8;
}());
var Anonymous9 = (function () {
    function Anonymous9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous9.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.commit_id = data["commit_id"];
            this.created_at = data["created_at"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.line = data["line"];
            this.path = data["path"];
            this.position = data["position"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user10.fromJS(data["user"]) : undefined;
        }
    };
    Anonymous9.fromJS = function (data) {
        var result = new Anonymous9();
        result.init(data);
        return result;
    };
    Anonymous9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["commit_id"] = this.commit_id;
        data["created_at"] = this.created_at;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["line"] = this.line;
        data["path"] = this.path;
        data["position"] = this.position;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Anonymous9;
}());
var Anonymous10 = (function () {
    function Anonymous10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous10.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author6.fromJS(data["author"]) : undefined;
            this.commit = data["commit"] ? commit7.fromJS(data["commit"]) : undefined;
            this.committer = data["committer"] ? committer5.fromJS(data["committer"]) : undefined;
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents3.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    Anonymous10.fromJS = function (data) {
        var result = new Anonymous10();
        result.init(data);
        return result;
    };
    Anonymous10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return Anonymous10;
}());
var Anonymous11 = (function () {
    function Anonymous11(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous11.prototype.init = function (data) {
        if (data) {
            this.commit_url = data["commit_url"];
            this.name = data["name"];
            this.repository_url = data["repository_url"];
            this.sha = data["sha"];
            this.state = data["state"];
            if (data["statuses"] && data["statuses"].constructor === Array) {
                this.statuses = [];
                for (var _i = 0, _a = data["statuses"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.statuses.push(Statuses.fromJS(item));
                }
            }
        }
    };
    Anonymous11.fromJS = function (data) {
        var result = new Anonymous11();
        result.init(data);
        return result;
    };
    Anonymous11.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["commit_url"] = this.commit_url;
        data["name"] = this.name;
        data["repository_url"] = this.repository_url;
        data["sha"] = this.sha;
        data["state"] = this.state;
        if (this.statuses && this.statuses.constructor === Array) {
            data["statuses"] = [];
            for (var _i = 0, _a = this.statuses; _i < _a.length; _i++) {
                var item = _a[_i];
                data["statuses"].push(item.toJSON());
            }
        }
        return data;
    };
    return Anonymous11;
}());
var Anonymous12 = (function () {
    function Anonymous12(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous12.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.contributions = data["contributions"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Anonymous12.fromJS = function (data) {
        var result = new Anonymous12();
        result.init(data);
        return result;
    };
    Anonymous12.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["contributions"] = this.contributions;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Anonymous12;
}());
var Anonymous13 = (function () {
    function Anonymous13(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous13.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? creator2.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.id = data["id"];
            this.payload = data["payload"];
            this.sha = data["sha"];
            this.statuses_url = data["statuses_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    Anonymous13.fromJS = function (data) {
        var result = new Anonymous13();
        result.init(data);
        return result;
    };
    Anonymous13.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["id"] = this.id;
        data["payload"] = this.payload;
        data["sha"] = this.sha;
        data["statuses_url"] = this.statuses_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return Anonymous13;
}());
var Anonymous14 = (function () {
    function Anonymous14(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous14.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? creator3.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.id = data["id"];
            this.payload = data["payload"];
            this.state = data["state"];
            this.target_url = data["target_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    Anonymous14.fromJS = function (data) {
        var result = new Anonymous14();
        result.init(data);
        return result;
    };
    Anonymous14.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["id"] = this.id;
        data["payload"] = this.payload;
        data["state"] = this.state;
        data["target_url"] = this.target_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return Anonymous14;
}());
var Anonymous15 = (function () {
    function Anonymous15(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous15.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner3.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Anonymous15.fromJS = function (data) {
        var result = new Anonymous15();
        result.init(data);
        return result;
    };
    Anonymous15.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Anonymous15;
}());
var Anonymous16 = (function () {
    function Anonymous16(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous16.prototype.init = function (data) {
        if (data) {
            this.object = data["object"] ? object3.fromJS(data["object"]) : undefined;
            this.ref = data["ref"];
            this.url = data["url"];
        }
    };
    Anonymous16.fromJS = function (data) {
        var result = new Anonymous16();
        result.init(data);
        return result;
    };
    Anonymous16.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["object"] = this.object ? this.object.toJSON() : undefined;
        data["ref"] = this.ref;
        data["url"] = this.url;
        return data;
    };
    return Anonymous16;
}());
var Anonymous17 = (function () {
    function Anonymous17(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous17.prototype.init = function (data) {
        if (data) {
            this.active = data["active"];
            this.config = data["config"] ? Config.fromJS(data["config"]) : undefined;
            this.created_at = data["created_at"];
            if (data["events"] && data["events"].constructor === Array) {
                this.events = [];
                for (var _i = 0, _a = data["events"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.events.push(events.fromJS(item));
                }
            }
            this.id = data["id"];
            this.name = data["name"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    Anonymous17.fromJS = function (data) {
        var result = new Anonymous17();
        result.init(data);
        return result;
    };
    Anonymous17.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["active"] = this.active;
        data["config"] = this.config ? this.config.toJSON() : undefined;
        data["created_at"] = this.created_at;
        if (this.events && this.events.constructor === Array) {
            data["events"] = [];
            for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
                var item = _a[_i];
                data["events"].push(item.toJSON());
            }
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return Anonymous17;
}());
var Anonymous18 = (function () {
    function Anonymous18(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous18.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links7.fromJS(data["_links"]) : undefined;
            this.body = data["body"];
            this.commit_id = data["commit_id"];
            this.created_at = data["created_at"];
            this.id = data["id"];
            this.path = data["path"];
            this.position = data["position"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user11.fromJS(data["user"]) : undefined;
        }
    };
    Anonymous18.fromJS = function (data) {
        var result = new Anonymous18();
        result.init(data);
        return result;
    };
    Anonymous18.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["body"] = this.body;
        data["commit_id"] = this.commit_id;
        data["created_at"] = this.created_at;
        data["id"] = this.id;
        data["path"] = this.path;
        data["position"] = this.position;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Anonymous18;
}());
var Anonymous19 = (function () {
    function Anonymous19(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous19.prototype.init = function (data) {
        if (data) {
            this.color = data["color"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    Anonymous19.fromJS = function (data) {
        var result = new Anonymous19();
        result.init(data);
        return result;
    };
    Anonymous19.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["color"] = this.color;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return Anonymous19;
}());
var Anonymous20 = (function () {
    function Anonymous20(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous20.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.key = data["key"];
            this.title = data["title"];
            this.url = data["url"];
        }
    };
    Anonymous20.fromJS = function (data) {
        var result = new Anonymous20();
        result.init(data);
        return result;
    };
    Anonymous20.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    };
    return Anonymous20;
}());
var Anonymous21 = (function () {
    function Anonymous21(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous21.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links8.fromJS(data["_links"]) : undefined;
            this.base = data["base"] ? base.fromJS(data["base"]) : undefined;
            this.body = data["body"];
            this.closed_at = data["closed_at"];
            this.created_at = data["created_at"];
            this.diff_url = data["diff_url"];
            this.head = data["head"] ? head.fromJS(data["head"]) : undefined;
            this.html_url = data["html_url"];
            this.issue_url = data["issue_url"];
            this.merged_at = data["merged_at"];
            this.number = data["number"];
            this.patch_url = data["patch_url"];
            this.state = data["state"] ? state2.fromJS(data["state"]) : undefined;
            this.title = data["title"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user12.fromJS(data["user"]) : undefined;
        }
    };
    Anonymous21.fromJS = function (data) {
        var result = new Anonymous21();
        result.init(data);
        return result;
    };
    Anonymous21.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["base"] = this.base ? this.base.toJSON() : undefined;
        data["body"] = this.body;
        data["closed_at"] = this.closed_at;
        data["created_at"] = this.created_at;
        data["diff_url"] = this.diff_url;
        data["head"] = this.head ? this.head.toJSON() : undefined;
        data["html_url"] = this.html_url;
        data["issue_url"] = this.issue_url;
        data["merged_at"] = this.merged_at;
        data["number"] = this.number;
        data["patch_url"] = this.patch_url;
        data["state"] = this.state ? this.state.toJSON() : undefined;
        data["title"] = this.title;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Anonymous21;
}());
var Anonymous22 = (function () {
    function Anonymous22(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous22.prototype.init = function (data) {
        if (data) {
            if (data["assets"] && data["assets"].constructor === Array) {
                this.assets = [];
                for (var _i = 0, _a = data["assets"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.assets.push(assets.fromJS(item));
                }
            }
            this.assets_url = data["assets_url"];
            this.author = data["author"] ? author7.fromJS(data["author"]) : undefined;
            this.body = data["body"];
            this.created_at = data["created_at"];
            this.draft = data["draft"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.name = data["name"];
            this.prerelease = data["prerelease"];
            this.published_at = data["published_at"];
            this.tag_name = data["tag_name"];
            this.tarball_url = data["tarball_url"];
            this.target_commitish = data["target_commitish"];
            this.upload_url = data["upload_url"];
            this.url = data["url"];
            this.zipball_url = data["zipball_url"];
        }
    };
    Anonymous22.fromJS = function (data) {
        var result = new Anonymous22();
        result.init(data);
        return result;
    };
    Anonymous22.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.assets && this.assets.constructor === Array) {
            data["assets"] = [];
            for (var _i = 0, _a = this.assets; _i < _a.length; _i++) {
                var item = _a[_i];
                data["assets"].push(item.toJSON());
            }
        }
        data["assets_url"] = this.assets_url;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["body"] = this.body;
        data["created_at"] = this.created_at;
        data["draft"] = this.draft;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["name"] = this.name;
        data["prerelease"] = this.prerelease;
        data["published_at"] = this.published_at;
        data["tag_name"] = this.tag_name;
        data["tarball_url"] = this.tarball_url;
        data["target_commitish"] = this.target_commitish;
        data["upload_url"] = this.upload_url;
        data["url"] = this.url;
        data["zipball_url"] = this.zipball_url;
        return data;
    };
    return Anonymous22;
}());
var Anonymous23 = (function () {
    function Anonymous23(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous23.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.created_at = data["created_at"];
            this.download_count = data["download_count"];
            this.id = data["id"];
            this.label = data["label"];
            this.name = data["name"];
            this.size = data["size"];
            this.state = data["state"];
            this.updated_at = data["updated_at"];
            this.uploader = data["uploader"] ? uploader.fromJS(data["uploader"]) : undefined;
            this.url = data["url"];
        }
    };
    Anonymous23.fromJS = function (data) {
        var result = new Anonymous23();
        result.init(data);
        return result;
    };
    Anonymous23.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["created_at"] = this.created_at;
        data["download_count"] = this.download_count;
        data["id"] = this.id;
        data["label"] = this.label;
        data["name"] = this.name;
        data["size"] = this.size;
        data["state"] = this.state;
        data["updated_at"] = this.updated_at;
        data["uploader"] = this.uploader ? this.uploader.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return Anonymous23;
}());
var Anonymous24 = (function () {
    function Anonymous24(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous24.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author8.fromJS(data["author"]) : undefined;
            this.total = data["total"];
            if (data["weeks"] && data["weeks"].constructor === Array) {
                this.weeks = [];
                for (var _i = 0, _a = data["weeks"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.weeks.push(Weeks.fromJS(item));
                }
            }
        }
    };
    Anonymous24.fromJS = function (data) {
        var result = new Anonymous24();
        result.init(data);
        return result;
    };
    Anonymous24.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["total"] = this.total;
        if (this.weeks && this.weeks.constructor === Array) {
            data["weeks"] = [];
            for (var _i = 0, _a = this.weeks; _i < _a.length; _i++) {
                var item = _a[_i];
                data["weeks"].push(item.toJSON());
            }
        }
        return data;
    };
    return Anonymous24;
}());
var Anonymous25 = (function () {
    function Anonymous25(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous25.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? creator4.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.id = data["id"];
            this.state = data["state"];
            this.target_url = data["target_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    Anonymous25.fromJS = function (data) {
        var result = new Anonymous25();
        result.init(data);
        return result;
    };
    Anonymous25.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["id"] = this.id;
        data["state"] = this.state;
        data["target_url"] = this.target_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return Anonymous25;
}());
var Anonymous26 = (function () {
    function Anonymous26(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous26.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.fork = data["fork"];
            this.full_name = data["full_name"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.name = data["name"];
            this.owner = data["owner"] ? owner4.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.url = data["url"];
        }
    };
    Anonymous26.fromJS = function (data) {
        var result = new Anonymous26();
        result.init(data);
        return result;
    };
    Anonymous26.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["full_name"] = this.full_name;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["name"] = this.name;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["url"] = this.url;
        return data;
    };
    return Anonymous26;
}());
var Anonymous27 = (function () {
    function Anonymous27(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous27.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner5.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Anonymous27.fromJS = function (data) {
        var result = new Anonymous27();
        result.init(data);
        return result;
    };
    Anonymous27.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Anonymous27;
}());
var Anonymous28 = (function () {
    function Anonymous28(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous28.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner6.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Anonymous28.fromJS = function (data) {
        var result = new Anonymous28();
        result.init(data);
        return result;
    };
    Anonymous28.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Anonymous28;
}());
var Anonymous29 = (function () {
    function Anonymous29(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous29.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.members_count = data["members_count"];
            this.name = data["name"];
            this.organization = data["organization"] ? organization2.fromJS(data["organization"]) : undefined;
            this.permission = data["permission"];
            this.repos_count = data["repos_count"];
            this.url = data["url"];
        }
    };
    Anonymous29.fromJS = function (data) {
        var result = new Anonymous29();
        result.init(data);
        return result;
    };
    Anonymous29.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["members_count"] = this.members_count;
        data["name"] = this.name;
        data["organization"] = this.organization ? this.organization.toJSON() : undefined;
        data["permission"] = this.permission;
        data["repos_count"] = this.repos_count;
        data["url"] = this.url;
        return data;
    };
    return Anonymous29;
}());
var Anonymous30 = (function () {
    function Anonymous30(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Anonymous30.prototype.init = function (data) {
        if (data) {
            if (data["days"] && data["days"].constructor === Array) {
                this.days = [];
                for (var _i = 0, _a = data["days"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.days.push(item);
                }
            }
            this.total = data["total"];
            this.week = data["week"];
        }
    };
    Anonymous30.fromJS = function (data) {
        var result = new Anonymous30();
        result.init(data);
        return result;
    };
    Anonymous30.prototype.toJSON = function (data) {
        data = data ? data : {};
        if (this.days && this.days.constructor === Array) {
            data["days"] = [];
            for (var _i = 0, _a = this.days; _i < _a.length; _i++) {
                var item = _a[_i];
                data["days"].push(item);
            }
        }
        data["total"] = this.total;
        data["week"] = this.week;
        return data;
    };
    return Anonymous30;
}());
var Uploader = (function () {
    function Uploader(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Uploader.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    Uploader.fromJS = function (data) {
        var result = new Uploader();
        result.init(data);
        return result;
    };
    Uploader.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return Uploader;
}());
var BlobEncoding;
(function (BlobEncoding) {
    BlobEncoding[BlobEncoding["Utf8"] = "utf-8"] = "Utf8";
    BlobEncoding[BlobEncoding["Base64"] = "base64"] = "Base64";
})(BlobEncoding || (BlobEncoding = {}));
var _links = (function () {
    function _links(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links.prototype.init = function (data) {
        if (data) {
            this.html = data["html"];
            this.self = data["self"];
        }
    };
    _links.fromJS = function (data) {
        var result = new _links();
        result.init(data);
        return result;
    };
    _links.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["html"] = this.html;
        data["self"] = this.self;
        return data;
    };
    return _links;
}());
var commit = (function () {
    function commit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author9.fromJS(data["author"]) : undefined;
            this.commit = data["commit"] ? commit8.fromJS(data["commit"]) : undefined;
            this.committer = data["committer"] ? committer6.fromJS(data["committer"]) : undefined;
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents4.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    commit.fromJS = function (data) {
        var result = new commit();
        result.init(data);
        return result;
    };
    commit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return commit;
}());
var Author = (function () {
    function Author(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Author.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Author.fromJS = function (data) {
        var result = new Author();
        result.init(data);
        return result;
    };
    Author.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Author;
}());
var commit2 = (function () {
    function commit2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit2.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author10.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer7.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.tree = data["tree"] ? tree4.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit2.fromJS = function (data) {
        var result = new commit2();
        result.init(data);
        return result;
    };
    commit2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit2;
}());
var Committer = (function () {
    function Committer(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Committer.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Committer.fromJS = function (data) {
        var result = new Committer();
        result.init(data);
        return result;
    };
    Committer.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Committer;
}());
var Files = (function () {
    function Files(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Files.prototype.init = function (data) {
        if (data) {
            this.additions = data["additions"];
            this.blob_url = data["blob_url"];
            this.changes = data["changes"];
            this.deletions = data["deletions"];
            this.filename = data["filename"];
            this.patch = data["patch"];
            this.raw_url = data["raw_url"];
            this.status = data["status"];
        }
    };
    Files.fromJS = function (data) {
        var result = new Files();
        result.init(data);
        return result;
    };
    Files.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["additions"] = this.additions;
        data["blob_url"] = this.blob_url;
        data["changes"] = this.changes;
        data["deletions"] = this.deletions;
        data["filename"] = this.filename;
        data["patch"] = this.patch;
        data["raw_url"] = this.raw_url;
        data["status"] = this.status;
        return data;
    };
    return Files;
}());
var Parents = (function () {
    function Parents(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Parents.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    Parents.fromJS = function (data) {
        var result = new Parents();
        result.init(data);
        return result;
    };
    Parents.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return Parents;
}());
var Stats = (function () {
    function Stats(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Stats.prototype.init = function (data) {
        if (data) {
            this.additions = data["additions"];
            this.deletions = data["deletions"];
            this.total = data["total"];
        }
    };
    Stats.fromJS = function (data) {
        var result = new Stats();
        result.init(data);
        return result;
    };
    Stats.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["additions"] = this.additions;
        data["deletions"] = this.deletions;
        data["total"] = this.total;
        return data;
    };
    return Stats;
}());
var user = (function () {
    function user(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user.fromJS = function (data) {
        var result = new user();
        result.init(data);
        return result;
    };
    user.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user;
}());
var Base_commit = (function () {
    function Base_commit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Base_commit.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author11.fromJS(data["author"]) : undefined;
            this.commit = data["commit"] ? commit9.fromJS(data["commit"]) : undefined;
            this.committer = data["committer"] ? committer8.fromJS(data["committer"]) : undefined;
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents5.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    Base_commit.fromJS = function (data) {
        var result = new Base_commit();
        result.init(data);
        return result;
    };
    Base_commit.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return Base_commit;
}());
var Commits = (function () {
    function Commits(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Commits.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author12.fromJS(data["author"]) : undefined;
            this.commit = data["commit"] ? commit10.fromJS(data["commit"]) : undefined;
            this.committer = data["committer"] ? committer9.fromJS(data["committer"]) : undefined;
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents6.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    Commits.fromJS = function (data) {
        var result = new Commits();
        result.init(data);
        return result;
    };
    Commits.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return Commits;
}());
var files = (function () {
    function files(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    files.prototype.init = function (data) {
        if (data) {
            this.additions = data["additions"];
            this.blob_url = data["blob_url"];
            this.changes = data["changes"];
            this.contents_url = data["contents_url"];
            this.deletions = data["deletions"];
            this.filename = data["filename"];
            this.patch = data["patch"];
            this.raw_url = data["raw_url"];
            this.sha = data["sha"];
            this.status = data["status"];
        }
    };
    files.fromJS = function (data) {
        var result = new files();
        result.init(data);
        return result;
    };
    files.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["additions"] = this.additions;
        data["blob_url"] = this.blob_url;
        data["changes"] = this.changes;
        data["contents_url"] = this.contents_url;
        data["deletions"] = this.deletions;
        data["filename"] = this.filename;
        data["patch"] = this.patch;
        data["raw_url"] = this.raw_url;
        data["sha"] = this.sha;
        data["status"] = this.status;
        return data;
    };
    return files;
}());
var _links2 = (function () {
    function _links2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links2.prototype.init = function (data) {
        if (data) {
            this.git = data["git"];
            this.html = data["html"];
            this.self = data["self"];
        }
    };
    _links2.fromJS = function (data) {
        var result = new _links2();
        result.init(data);
        return result;
    };
    _links2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["git"] = this.git;
        data["html"] = this.html;
        data["self"] = this.self;
        return data;
    };
    return _links2;
}());
var commit3 = (function () {
    function commit3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit3.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author13.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer10.fromJS(data["committer"]) : undefined;
            this.html_url = data["html_url"];
            this.message = data["message"];
            if (data["parents"] && data["parents"].constructor === Array) {
                this.parents = [];
                for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parents.push(parents7.fromJS(item));
                }
            }
            this.sha = data["sha"];
            this.tree = data["tree"] ? tree5.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit3.fromJS = function (data) {
        var result = new commit3();
        result.init(data);
        return result;
    };
    commit3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["html_url"] = this.html_url;
        data["message"] = this.message;
        if (this.parents && this.parents.constructor === Array) {
            data["parents"] = [];
            for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parents"].push(item.toJSON());
            }
        }
        data["sha"] = this.sha;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit3;
}());
var Content = (function () {
    function Content(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Content.prototype.init = function (data) {
        if (data) {
            this._links = data["_links"] ? _links9.fromJS(data["_links"]) : undefined;
            this.git_url = data["git_url"];
            this.html_url = data["html_url"];
            this.name = data["name"];
            this.path = data["path"];
            this.sha = data["sha"];
            this.size = data["size"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    Content.fromJS = function (data) {
        var result = new Content();
        result.init(data);
        return result;
    };
    Content.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["_links"] = this._links ? this._links.toJSON() : undefined;
        data["git_url"] = this.git_url;
        data["html_url"] = this.html_url;
        data["name"] = this.name;
        data["path"] = this.path;
        data["sha"] = this.sha;
        data["size"] = this.size;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return Content;
}());
var committer = (function () {
    function committer(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer.prototype.init = function (data) {
        if (data) {
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer.fromJS = function (data) {
        var result = new committer();
        result.init(data);
        return result;
    };
    committer.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer;
}());
var commit4 = (function () {
    function commit4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit4.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author14.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer11.fromJS(data["committer"]) : undefined;
            this.html_url = data["html_url"];
            this.message = data["message"];
            this.parents = data["parents"] ? parents8.fromJS(data["parents"]) : undefined;
            this.sha = data["sha"];
            this.tree = data["tree"] ? tree6.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit4.fromJS = function (data) {
        var result = new commit4();
        result.init(data);
        return result;
    };
    commit4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["html_url"] = this.html_url;
        data["message"] = this.message;
        data["parents"] = this.parents ? this.parents.toJSON() : undefined;
        data["sha"] = this.sha;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit4;
}());
var committer2 = (function () {
    function committer2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer2.prototype.init = function (data) {
        if (data) {
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer2.fromJS = function (data) {
        var result = new committer2();
        result.init(data);
        return result;
    };
    committer2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer2;
}());
var Payload = (function () {
    function Payload(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Payload.prototype.init = function (data) {
        if (data) {
            this.deploy_user = data["deploy_user"];
            this.environment = data["environment"];
            this.room_id = data["room_id"];
        }
    };
    Payload.fromJS = function (data) {
        var result = new Payload();
        result.init(data);
        return result;
    };
    Payload.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["deploy_user"] = this.deploy_user;
        data["environment"] = this.environment;
        data["room_id"] = this.room_id;
        return data;
    };
    return Payload;
}());
var Creator = (function () {
    function Creator(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Creator.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    Creator.fromJS = function (data) {
        var result = new Creator();
        result.init(data);
        return result;
    };
    Creator.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return Creator;
}());
var EditTeamPermission;
(function (EditTeamPermission) {
    EditTeamPermission[EditTeamPermission["Pull"] = "pull"] = "Pull";
    EditTeamPermission[EditTeamPermission["Push"] = "push"] = "Push";
    EditTeamPermission[EditTeamPermission["Admin"] = "admin"] = "Admin";
})(EditTeamPermission || (EditTeamPermission = {}));
var Actor = (function () {
    function Actor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Actor.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Actor.fromJS = function (data) {
        var result = new Actor();
        result.init(data);
        return result;
    };
    Actor.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Actor;
}());
var issue = (function () {
    function issue(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    issue.prototype.init = function (data) {
        if (data) {
            this.assignee = data["assignee"] ? assignee.fromJS(data["assignee"]) : undefined;
            this.body = data["body"];
            this.closed_at = data["closed_at"];
            this.comments = data["comments"];
            this.created_at = data["created_at"];
            this.html_url = data["html_url"];
            if (data["labels"] && data["labels"].constructor === Array) {
                this.labels = [];
                for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.labels.push(labels.fromJS(item));
                }
            }
            this.milestone = data["milestone"] ? milestone2.fromJS(data["milestone"]) : undefined;
            this.number = data["number"];
            this.pull_request = data["pull_request"] ? pull_request.fromJS(data["pull_request"]) : undefined;
            this.state = data["state"] ? IssueState.fromJS(data["state"]) : undefined;
            this.title = data["title"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user13.fromJS(data["user"]) : undefined;
        }
    };
    issue.fromJS = function (data) {
        var result = new issue();
        result.init(data);
        return result;
    };
    issue.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["assignee"] = this.assignee ? this.assignee.toJSON() : undefined;
        data["body"] = this.body;
        data["closed_at"] = this.closed_at;
        data["comments"] = this.comments;
        data["created_at"] = this.created_at;
        data["html_url"] = this.html_url;
        if (this.labels && this.labels.constructor === Array) {
            data["labels"] = [];
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var item = _a[_i];
                data["labels"].push(item.toJSON());
            }
        }
        data["milestone"] = this.milestone ? this.milestone.toJSON() : undefined;
        data["number"] = this.number;
        data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : undefined;
        data["state"] = this.state ? this.state.toJSON() : undefined;
        data["title"] = this.title;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return issue;
}());
var actor = (function () {
    function actor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    actor.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    actor.fromJS = function (data) {
        var result = new actor();
        result.init(data);
        return result;
    };
    actor.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return actor;
}());
var Org = (function () {
    function Org(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Org.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Org.fromJS = function (data) {
        var result = new Org();
        result.init(data);
        return result;
    };
    Org.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Org;
}());
var repo = (function () {
    function repo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    repo.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    repo.fromJS = function (data) {
        var result = new repo();
        result.init(data);
        return result;
    };
    repo.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return repo;
}());
var _links3 = (function () {
    function _links3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links3.prototype.init = function (data) {
        if (data) {
            this.current_user = data["current_user"] ? Current_user.fromJS(data["current_user"]) : undefined;
            this.current_user_actor = data["current_user_actor"] ? Current_user_actor.fromJS(data["current_user_actor"]) : undefined;
            this.current_user_organization = data["current_user_organization"] ? Current_user_organization.fromJS(data["current_user_organization"]) : undefined;
            this.current_user_public = data["current_user_public"] ? Current_user_public.fromJS(data["current_user_public"]) : undefined;
            this.timeline = data["timeline"] ? Timeline.fromJS(data["timeline"]) : undefined;
            this.user = data["user"] ? user14.fromJS(data["user"]) : undefined;
        }
    };
    _links3.fromJS = function (data) {
        var result = new _links3();
        result.init(data);
        return result;
    };
    _links3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["current_user"] = this.current_user ? this.current_user.toJSON() : undefined;
        data["current_user_actor"] = this.current_user_actor ? this.current_user_actor.toJSON() : undefined;
        data["current_user_organization"] = this.current_user_organization ? this.current_user_organization.toJSON() : undefined;
        data["current_user_public"] = this.current_user_public ? this.current_user_public.toJSON() : undefined;
        data["timeline"] = this.timeline ? this.timeline.toJSON() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return _links3;
}());
var Owner = (function () {
    function Owner(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Owner.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Owner.fromJS = function (data) {
        var result = new Owner();
        result.init(data);
        return result;
    };
    Owner.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Owner;
}());
var files2 = (function () {
    function files2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    files2.prototype.init = function (data) {
        if (data) {
            this.ringErl = data["ring.erl"] ? RingErl.fromJS(data["ring.erl"]) : undefined;
        }
    };
    files2.fromJS = function (data) {
        var result = new files2();
        result.init(data);
        return result;
    };
    files2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["ring.erl"] = this.ringErl ? this.ringErl.toJSON() : undefined;
        return data;
    };
    return files2;
}());
var Forks = (function () {
    function Forks(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Forks.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.url = data["url"];
            this.user = data["user"] ? user15.fromJS(data["user"]) : undefined;
        }
    };
    Forks.fromJS = function (data) {
        var result = new Forks();
        result.init(data);
        return result;
    };
    Forks.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Forks;
}());
var History = (function () {
    function History(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    History.prototype.init = function (data) {
        if (data) {
            this.change_status = data["change_status"] ? Change_status.fromJS(data["change_status"]) : undefined;
            this.committed_at = data["committed_at"];
            this.url = data["url"];
            this.user = data["user"] ? user16.fromJS(data["user"]) : undefined;
            this.version = data["version"];
        }
    };
    History.fromJS = function (data) {
        var result = new History();
        result.init(data);
        return result;
    };
    History.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["change_status"] = this.change_status ? this.change_status.toJSON() : undefined;
        data["committed_at"] = this.committed_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["version"] = this.version;
        return data;
    };
    return History;
}());
var user2 = (function () {
    function user2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user2.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user2.fromJS = function (data) {
        var result = new user2();
        result.init(data);
        return result;
    };
    user2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user2;
}());
var author = (function () {
    function author(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author.fromJS = function (data) {
        var result = new author();
        result.init(data);
        return result;
    };
    author.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author;
}());
var ObjectP = (function () {
    function ObjectP(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ObjectP.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    ObjectP.fromJS = function (data) {
        var result = new ObjectP();
        result.init(data);
        return result;
    };
    ObjectP.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return ObjectP;
}());
var user3 = (function () {
    function user3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user3.fromJS = function (data) {
        var result = new user3();
        result.init(data);
        return result;
    };
    user3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user3;
}());
var author2 = (function () {
    function author2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author2.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    author2.fromJS = function (data) {
        var result = new author2();
        result.init(data);
        return result;
    };
    author2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return author2;
}());
var commit5 = (function () {
    function commit5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit5.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author15.fromJS(data["author"]) : undefined;
            this.comment_count = data["comment_count"];
            this.committer = data["committer"] ? committer12.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.tree = data["tree"] ? tree7.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit5.fromJS = function (data) {
        var result = new commit5();
        result.init(data);
        return result;
    };
    commit5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["comment_count"] = this.comment_count;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit5;
}());
var committer3 = (function () {
    function committer3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    committer3.fromJS = function (data) {
        var result = new committer3();
        result.init(data);
        return result;
    };
    committer3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return committer3;
}());
var parents = (function () {
    function parents(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents.fromJS = function (data) {
        var result = new parents();
        result.init(data);
        return result;
    };
    parents.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents;
}());
var creator = (function () {
    function creator(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    creator.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    creator.fromJS = function (data) {
        var result = new creator();
        result.init(data);
        return result;
    };
    creator.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return creator;
}());
var MilestoneState;
(function (MilestoneState) {
    MilestoneState[MilestoneState["Open"] = "open"] = "Open";
    MilestoneState[MilestoneState["Closed"] = "closed"] = "Closed";
})(MilestoneState || (MilestoneState = {}));
var Repository = (function () {
    function Repository(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Repository.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.fork = data["fork"];
            this.full_name = data["full_name"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.name = data["name"];
            this.owner = data["owner"] ? owner7.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.url = data["url"];
        }
    };
    Repository.fromJS = function (data) {
        var result = new Repository();
        result.init(data);
        return result;
    };
    Repository.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["full_name"] = this.full_name;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["name"] = this.name;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["url"] = this.url;
        return data;
    };
    return Repository;
}());
var Subject = (function () {
    function Subject(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Subject.prototype.init = function (data) {
        if (data) {
            this.latest_comment_url = data["latest_comment_url"];
            this.title = data["title"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    Subject.fromJS = function (data) {
        var result = new Subject();
        result.init(data);
        return result;
    };
    Subject.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["latest_comment_url"] = this.latest_comment_url;
        data["title"] = this.title;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return Subject;
}());
var OrgTeamsPostPermission;
(function (OrgTeamsPostPermission) {
    OrgTeamsPostPermission[OrgTeamsPostPermission["Pull"] = "pull"] = "Pull";
    OrgTeamsPostPermission[OrgTeamsPostPermission["Push"] = "push"] = "Push";
    OrgTeamsPostPermission[OrgTeamsPostPermission["Admin"] = "admin"] = "Admin";
})(OrgTeamsPostPermission || (OrgTeamsPostPermission = {}));
var Errors = (function () {
    function Errors(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Errors.prototype.init = function (data) {
        if (data) {
            this.code = data["code"];
            this.field = data["field"];
            this.resource = data["resource"];
        }
    };
    Errors.fromJS = function (data) {
        var result = new Errors();
        result.init(data);
        return result;
    };
    Errors.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["code"] = this.code;
        data["field"] = this.field;
        data["resource"] = this.resource;
        return data;
    };
    return Errors;
}());
var files3 = (function () {
    function files3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    files3.prototype.init = function (data) {
        if (data) {
            this.delete_this_fileTxt = data["delete_this_file.txt"];
            this.file1Txt = data["file1.txt"] ? File1Txt.fromJS(data["file1.txt"]) : undefined;
            this.new_fileTxt = data["new_file.txt"] ? New_fileTxt.fromJS(data["new_file.txt"]) : undefined;
            this.old_nameTxt = data["old_name.txt"] ? Old_nameTxt.fromJS(data["old_name.txt"]) : undefined;
        }
    };
    files3.fromJS = function (data) {
        var result = new files3();
        result.init(data);
        return result;
    };
    files3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["delete_this_file.txt"] = this.delete_this_fileTxt;
        data["file1.txt"] = this.file1Txt ? this.file1Txt.toJSON() : undefined;
        data["new_file.txt"] = this.new_fileTxt ? this.new_fileTxt.toJSON() : undefined;
        data["old_name.txt"] = this.old_nameTxt ? this.old_nameTxt.toJSON() : undefined;
        return data;
    };
    return files3;
}());
var files4 = (function () {
    function files4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    files4.prototype.init = function (data) {
        if (data) {
            this.file1Txt = data["file1.txt"] ? file1Txt.fromJS(data["file1.txt"]) : undefined;
        }
    };
    files4.fromJS = function (data) {
        var result = new files4();
        result.init(data);
        return result;
    };
    files4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["file1.txt"] = this.file1Txt ? this.file1Txt.toJSON() : undefined;
        return data;
    };
    return files4;
}());
var _links4 = (function () {
    function _links4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links4.prototype.init = function (data) {
        if (data) {
            this.comments = data["comments"] ? Comments.fromJS(data["comments"]) : undefined;
            this.html = data["html"] ? Html.fromJS(data["html"]) : undefined;
            this.review_comments = data["review_comments"] ? Review_comments.fromJS(data["review_comments"]) : undefined;
            this.self = data["self"] ? Self.fromJS(data["self"]) : undefined;
        }
    };
    _links4.fromJS = function (data) {
        var result = new _links4();
        result.init(data);
        return result;
    };
    _links4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["comments"] = this.comments ? this.comments.toJSON() : undefined;
        data["html"] = this.html ? this.html.toJSON() : undefined;
        data["review_comments"] = this.review_comments ? this.review_comments.toJSON() : undefined;
        data["self"] = this.self ? this.self.toJSON() : undefined;
        return data;
    };
    return _links4;
}());
var Base = (function () {
    function Base(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Base.prototype.init = function (data) {
        if (data) {
            this.label = data["label"];
            this.ref = data["ref"];
            this.repo = data["repo"] ? repo2.fromJS(data["repo"]) : undefined;
            this.sha = data["sha"];
            this.user = data["user"] ? user17.fromJS(data["user"]) : undefined;
        }
    };
    Base.fromJS = function (data) {
        var result = new Base();
        result.init(data);
        return result;
    };
    Base.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["label"] = this.label;
        data["ref"] = this.ref;
        data["repo"] = this.repo ? this.repo.toJSON() : undefined;
        data["sha"] = this.sha;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Base;
}());
var Head = (function () {
    function Head(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Head.prototype.init = function (data) {
        if (data) {
            this.label = data["label"];
            this.ref = data["ref"];
            this.repo = data["repo"] ? repo3.fromJS(data["repo"]) : undefined;
            this.sha = data["sha"];
            this.user = data["user"] ? user18.fromJS(data["user"]) : undefined;
        }
    };
    Head.fromJS = function (data) {
        var result = new Head();
        result.init(data);
        return result;
    };
    Head.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["label"] = this.label;
        data["ref"] = this.ref;
        data["repo"] = this.repo ? this.repo.toJSON() : undefined;
        data["sha"] = this.sha;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return Head;
}());
var Merged_by = (function () {
    function Merged_by(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Merged_by.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Merged_by.fromJS = function (data) {
        var result = new Merged_by();
        result.init(data);
        return result;
    };
    Merged_by.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Merged_by;
}());
var user4 = (function () {
    function user4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user4.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user4.fromJS = function (data) {
        var result = new user4();
        result.init(data);
        return result;
    };
    user4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user4;
}());
var _links5 = (function () {
    function _links5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links5.prototype.init = function (data) {
        if (data) {
            this.html = data["html"] ? html.fromJS(data["html"]) : undefined;
            this.pull_request = data["pull_request"] ? pull_request2.fromJS(data["pull_request"]) : undefined;
            this.self = data["self"] ? self.fromJS(data["self"]) : undefined;
        }
    };
    _links5.fromJS = function (data) {
        var result = new _links5();
        result.init(data);
        return result;
    };
    _links5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["html"] = this.html ? this.html.toJSON() : undefined;
        data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : undefined;
        data["self"] = this.self ? this.self.toJSON() : undefined;
        return data;
    };
    return _links5;
}());
var user5 = (function () {
    function user5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user5.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user5.fromJS = function (data) {
        var result = new user5();
        result.init(data);
        return result;
    };
    user5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user5;
}());
var Rate = (function () {
    function Rate(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Rate.prototype.init = function (data) {
        if (data) {
            this.limit = data["limit"];
            this.remaining = data["remaining"];
            this.reset = data["reset"];
        }
    };
    Rate.fromJS = function (data) {
        var result = new Rate();
        result.init(data);
        return result;
    };
    Rate.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["limit"] = this.limit;
        data["remaining"] = this.remaining;
        data["reset"] = this.reset;
        return data;
    };
    return Rate;
}());
var _links6 = (function () {
    function _links6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links6.prototype.init = function (data) {
        if (data) {
            this.git = data["git"];
            this.html = data["html"];
            this.self = data["self"];
        }
    };
    _links6.fromJS = function (data) {
        var result = new _links6();
        result.init(data);
        return result;
    };
    _links6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["git"] = this.git;
        data["html"] = this.html;
        data["self"] = this.self;
        return data;
    };
    return _links6;
}());
var object = (function () {
    function object(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    object.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    object.fromJS = function (data) {
        var result = new object();
        result.init(data);
        return result;
    };
    object.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return object;
}());
var Assets = (function () {
    function Assets(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Assets.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.created_at = data["created_at"];
            this.download_count = data["download_count"];
            this.id = data["id"];
            this.label = data["label"];
            this.name = data["name"];
            this.size = data["size"];
            this.state = data["state"];
            this.updated_at = data["updated_at"];
            this.uploader = data["uploader"] ? uploader2.fromJS(data["uploader"]) : undefined;
            this.url = data["url"];
        }
    };
    Assets.fromJS = function (data) {
        var result = new Assets();
        result.init(data);
        return result;
    };
    Assets.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["created_at"] = this.created_at;
        data["download_count"] = this.download_count;
        data["id"] = this.id;
        data["label"] = this.label;
        data["name"] = this.name;
        data["size"] = this.size;
        data["state"] = this.state;
        data["updated_at"] = this.updated_at;
        data["uploader"] = this.uploader ? this.uploader.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return Assets;
}());
var author3 = (function () {
    function author3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    author3.fromJS = function (data) {
        var result = new author3();
        result.init(data);
        return result;
    };
    author3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return author3;
}());
var organization = (function () {
    function organization(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    organization.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    organization.fromJS = function (data) {
        var result = new organization();
        result.init(data);
        return result;
    };
    organization.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return organization;
}());
var owner = (function () {
    function owner(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner.fromJS = function (data) {
        var result = new owner();
        result.init(data);
        return result;
    };
    owner.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner;
}());
var Parent = (function () {
    function Parent(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Parent.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner8.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Parent.fromJS = function (data) {
        var result = new Parent();
        result.init(data);
        return result;
    };
    Parent.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Parent;
}());
var Source = (function () {
    function Source(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Source.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner9.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    Source.fromJS = function (data) {
        var result = new Source();
        result.init(data);
        return result;
    };
    Source.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return Source;
}());
var author4 = (function () {
    function author4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author4.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author4.fromJS = function (data) {
        var result = new author4();
        result.init(data);
        return result;
    };
    author4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author4;
}());
var committer4 = (function () {
    function committer4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer4.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer4.fromJS = function (data) {
        var result = new committer4();
        result.init(data);
        return result;
    };
    committer4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer4;
}());
var parents2 = (function () {
    function parents2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents2.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents2.fromJS = function (data) {
        var result = new parents2();
        result.init(data);
        return result;
    };
    parents2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents2;
}());
var tree = (function () {
    function tree(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree.fromJS = function (data) {
        var result = new tree();
        result.init(data);
        return result;
    };
    tree.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree;
}());
var author5 = (function () {
    function author5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author5.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author5.fromJS = function (data) {
        var result = new author5();
        result.init(data);
        return result;
    };
    author5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author5;
}());
var Items = (function () {
    function Items(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Items.prototype.init = function (data) {
        if (data) {
            this.git_url = data["git_url"];
            this.html_url = data["html_url"];
            this.name = data["name"];
            this.path = data["path"];
            this.repository = data["repository"] ? repository.fromJS(data["repository"]) : undefined;
            this.score = data["score"];
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    Items.fromJS = function (data) {
        var result = new Items();
        result.init(data);
        return result;
    };
    Items.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["git_url"] = this.git_url;
        data["html_url"] = this.html_url;
        data["name"] = this.name;
        data["path"] = this.path;
        data["repository"] = this.repository ? this.repository.toJSON() : undefined;
        data["score"] = this.score;
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return Items;
}());
var items = (function () {
    function items(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    items.prototype.init = function (data) {
        if (data) {
            this.assignee = data["assignee"];
            this.body = data["body"];
            this.closed_at = data["closed_at"];
            this.comments = data["comments"];
            this.comments_url = data["comments_url"];
            this.created_at = data["created_at"];
            this.events_url = data["events_url"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            if (data["labels"] && data["labels"].constructor === Array) {
                this.labels = [];
                for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.labels.push(labels2.fromJS(item));
                }
            }
            this.labels_url = data["labels_url"];
            this.milestone = data["milestone"];
            this.number = data["number"];
            this.pull_request = data["pull_request"] ? pull_request3.fromJS(data["pull_request"]) : undefined;
            this.score = data["score"];
            this.state = data["state"];
            this.title = data["title"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.user = data["user"] ? user19.fromJS(data["user"]) : undefined;
        }
    };
    items.fromJS = function (data) {
        var result = new items();
        result.init(data);
        return result;
    };
    items.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["assignee"] = this.assignee;
        data["body"] = this.body;
        data["closed_at"] = this.closed_at;
        data["comments"] = this.comments;
        data["comments_url"] = this.comments_url;
        data["created_at"] = this.created_at;
        data["events_url"] = this.events_url;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        if (this.labels && this.labels.constructor === Array) {
            data["labels"] = [];
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var item = _a[_i];
                data["labels"].push(item.toJSON());
            }
        }
        data["labels_url"] = this.labels_url;
        data["milestone"] = this.milestone;
        data["number"] = this.number;
        data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : undefined;
        data["score"] = this.score;
        data["state"] = this.state;
        data["title"] = this.title;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return items;
}());
var Issues = (function () {
    function Issues(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Issues.prototype.init = function (data) {
        if (data) {
            this.body = data["body"];
            this.comments = data["comments"];
            this.created_at = data["created_at"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            if (data["labels"] && data["labels"].constructor === Array) {
                this.labels = [];
                for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.labels.push(item);
                }
            }
            this.number = data["number"];
            this.position = data["position"];
            this.state = data["state"];
            this.title = data["title"];
            this.updated_at = data["updated_at"];
            this.user = data["user"];
            this.votes = data["votes"];
        }
    };
    Issues.fromJS = function (data) {
        var result = new Issues();
        result.init(data);
        return result;
    };
    Issues.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["body"] = this.body;
        data["comments"] = this.comments;
        data["created_at"] = this.created_at;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        if (this.labels && this.labels.constructor === Array) {
            data["labels"] = [];
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var item = _a[_i];
                data["labels"].push(item);
            }
        }
        data["number"] = this.number;
        data["position"] = this.position;
        data["state"] = this.state;
        data["title"] = this.title;
        data["updated_at"] = this.updated_at;
        data["user"] = this.user;
        data["votes"] = this.votes;
        return data;
    };
    return Issues;
}());
var items2 = (function () {
    function items2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    items2.prototype.init = function (data) {
        if (data) {
            this.created_at = data["created_at"];
            this.default_branch = data["default_branch"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner10.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.score = data["score"];
            this.size = data["size"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    items2.fromJS = function (data) {
        var result = new items2();
        result.init(data);
        return result;
    };
    items2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created_at"] = this.created_at;
        data["default_branch"] = this.default_branch;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["score"] = this.score;
        data["size"] = this.size;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return items2;
}());
var Repositories = (function () {
    function Repositories(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Repositories.prototype.init = function (data) {
        if (data) {
            this.created = data["created"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.followers = data["followers"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.has_downloads = data["has_downloads"];
            this.has_issues = data["has_issues"];
            this.has_wiki = data["has_wiki"];
            this.homepage = data["homepage"];
            this.language = data["language"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.owner = data["owner"];
            this.private = data["private"];
            this.pushed = data["pushed"];
            this.pushed_at = data["pushed_at"];
            this.score = data["score"];
            this.size = data["size"];
            this.type = data["type"];
            this.url = data["url"];
            this.username = data["username"];
            this.watchers = data["watchers"];
        }
    };
    Repositories.fromJS = function (data) {
        var result = new Repositories();
        result.init(data);
        return result;
    };
    Repositories.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created"] = this.created;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["followers"] = this.followers;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["has_downloads"] = this.has_downloads;
        data["has_issues"] = this.has_issues;
        data["has_wiki"] = this.has_wiki;
        data["homepage"] = this.homepage;
        data["language"] = this.language;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["owner"] = this.owner;
        data["private"] = this.private;
        data["pushed"] = this.pushed;
        data["pushed_at"] = this.pushed_at;
        data["score"] = this.score;
        data["size"] = this.size;
        data["type"] = this.type;
        data["url"] = this.url;
        data["username"] = this.username;
        data["watchers"] = this.watchers;
        return data;
    };
    return Repositories;
}());
var user6 = (function () {
    function user6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user6.prototype.init = function (data) {
        if (data) {
            this.blog = data["blog"];
            this.company = data["company"];
            this.created = data["created"];
            this.created_at = data["created_at"];
            this.email = data["email"];
            this.followers_count = data["followers_count"];
            this.following_count = data["following_count"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.location = data["location"];
            this.login = data["login"];
            this.name = data["name"];
            this.public_gist_count = data["public_gist_count"];
            this.public_repo_count = data["public_repo_count"];
            this.type = data["type"];
        }
    };
    user6.fromJS = function (data) {
        var result = new user6();
        result.init(data);
        return result;
    };
    user6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["blog"] = this.blog;
        data["company"] = this.company;
        data["created"] = this.created;
        data["created_at"] = this.created_at;
        data["email"] = this.email;
        data["followers_count"] = this.followers_count;
        data["following_count"] = this.following_count;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["public_gist_count"] = this.public_gist_count;
        data["public_repo_count"] = this.public_repo_count;
        data["type"] = this.type;
        return data;
    };
    return user6;
}());
var items3 = (function () {
    function items3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    items3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.followers_url = data["followers_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.score = data["score"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    items3.fromJS = function (data) {
        var result = new items3();
        result.init(data);
        return result;
    };
    items3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["followers_url"] = this.followers_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["score"] = this.score;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return items3;
}());
var Users = (function () {
    function Users(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Users.prototype.init = function (data) {
        if (data) {
            this.created = data["created"];
            this.created_at = data["created_at"];
            this.followers = data["followers"];
            this.followers_count = data["followers_count"];
            this.fullname = data["fullname"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.language = data["language"];
            this.location = data["location"];
            this.login = data["login"];
            this.name = data["name"];
            this.public_repo_count = data["public_repo_count"];
            this.repos = data["repos"];
            this.score = data["score"];
            this.type = data["type"];
            this.username = data["username"];
        }
    };
    Users.fromJS = function (data) {
        var result = new Users();
        result.init(data);
        return result;
    };
    Users.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["created"] = this.created;
        data["created_at"] = this.created_at;
        data["followers"] = this.followers;
        data["followers_count"] = this.followers_count;
        data["fullname"] = this.fullname;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["language"] = this.language;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["public_repo_count"] = this.public_repo_count;
        data["repos"] = this.repos;
        data["score"] = this.score;
        data["type"] = this.type;
        data["username"] = this.username;
        return data;
    };
    return Users;
}());
var object2 = (function () {
    function object2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    object2.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    object2.fromJS = function (data) {
        var result = new object2();
        result.init(data);
        return result;
    };
    object2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return object2;
}());
var Tagger = (function () {
    function Tagger(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Tagger.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    Tagger.fromJS = function (data) {
        var result = new Tagger();
        result.init(data);
        return result;
    };
    Tagger.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return Tagger;
}());
var tagger = (function () {
    function tagger(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tagger.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    tagger.fromJS = function (data) {
        var result = new tagger();
        result.init(data);
        return result;
    };
    tagger.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return tagger;
}());
var tree2 = (function () {
    function tree2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree2.prototype.init = function (data) {
        if (data) {
            this.mode = data["mode"];
            this.path = data["path"];
            this.sha = data["sha"];
            this.size = data["size"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    tree2.fromJS = function (data) {
        var result = new tree2();
        result.init(data);
        return result;
    };
    tree2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["mode"] = this.mode;
        data["path"] = this.path;
        data["sha"] = this.sha;
        data["size"] = this.size;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return tree2;
}());
var tree3 = (function () {
    function tree3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree3.prototype.init = function (data) {
        if (data) {
            this.mode = data["mode"];
            this.path = data["path"];
            this.sha = data["sha"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    tree3.fromJS = function (data) {
        var result = new tree3();
        result.init(data);
        return result;
    };
    tree3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["mode"] = this.mode;
        data["path"] = this.path;
        data["sha"] = this.sha;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return tree3;
}());
var Plan = (function () {
    function Plan(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Plan.prototype.init = function (data) {
        if (data) {
            this.collaborators = data["collaborators"];
            this.name = data["name"];
            this.private_repos = data["private_repos"];
            this.space = data["space"];
        }
    };
    Plan.fromJS = function (data) {
        var result = new Plan();
        result.init(data);
        return result;
    };
    Plan.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["collaborators"] = this.collaborators;
        data["name"] = this.name;
        data["private_repos"] = this.private_repos;
        data["space"] = this.space;
        return data;
    };
    return Plan;
}());
var files5 = (function () {
    function files5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    files5.prototype.init = function (data) {
        if (data) {
            this.ringErl = data["ring.erl"] ? ringErl.fromJS(data["ring.erl"]) : undefined;
        }
    };
    files5.fromJS = function (data) {
        var result = new files5();
        result.init(data);
        return result;
    };
    files5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["ring.erl"] = this.ringErl ? this.ringErl.toJSON() : undefined;
        return data;
    };
    return files5;
}());
var user7 = (function () {
    function user7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user7.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user7.fromJS = function (data) {
        var result = new user7();
        result.init(data);
        return result;
    };
    user7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user7;
}());
var user8 = (function () {
    function user8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user8.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user8.fromJS = function (data) {
        var result = new user8();
        result.init(data);
        return result;
    };
    user8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user8;
}());
var Assignee = (function () {
    function Assignee(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Assignee.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    Assignee.fromJS = function (data) {
        var result = new Assignee();
        result.init(data);
        return result;
    };
    Assignee.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return Assignee;
}());
var Labels = (function () {
    function Labels(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Labels.prototype.init = function (data) {
        if (data) {
            this.color = data["color"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    Labels.fromJS = function (data) {
        var result = new Labels();
        result.init(data);
        return result;
    };
    Labels.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["color"] = this.color;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return Labels;
}());
var milestone = (function () {
    function milestone(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    milestone.prototype.init = function (data) {
        if (data) {
            this.closed_issues = data["closed_issues"];
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? creator5.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.due_on = data["due_on"];
            this.number = data["number"];
            this.open_issues = data["open_issues"];
            this.state = data["state"];
            this.title = data["title"];
            this.url = data["url"];
        }
    };
    milestone.fromJS = function (data) {
        var result = new milestone();
        result.init(data);
        return result;
    };
    milestone.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["closed_issues"] = this.closed_issues;
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["due_on"] = this.due_on;
        data["number"] = this.number;
        data["open_issues"] = this.open_issues;
        data["state"] = this.state;
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    };
    return milestone;
}());
var Pull_request = (function () {
    function Pull_request(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Pull_request.prototype.init = function (data) {
        if (data) {
            this.diff_url = data["diff_url"];
            this.html_url = data["html_url"];
            this.patch_url = data["patch_url"];
        }
    };
    Pull_request.fromJS = function (data) {
        var result = new Pull_request();
        result.init(data);
        return result;
    };
    Pull_request.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["diff_url"] = this.diff_url;
        data["html_url"] = this.html_url;
        data["patch_url"] = this.patch_url;
        return data;
    };
    return Pull_request;
}());
var state;
(function (state) {
    state[state["Open"] = "open"] = "Open";
    state[state["Closed"] = "closed"] = "Closed";
})(state || (state = {}));
var user9 = (function () {
    function user9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user9.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user9.fromJS = function (data) {
        var result = new user9();
        result.init(data);
        return result;
    };
    user9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user9;
}());
var owner2 = (function () {
    function owner2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner2.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner2.fromJS = function (data) {
        var result = new owner2();
        result.init(data);
        return result;
    };
    owner2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner2;
}());
var commit6 = (function () {
    function commit6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit6.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    commit6.fromJS = function (data) {
        var result = new commit6();
        result.init(data);
        return result;
    };
    commit6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return commit6;
}());
var user10 = (function () {
    function user10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user10.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user10.fromJS = function (data) {
        var result = new user10();
        result.init(data);
        return result;
    };
    user10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user10;
}());
var author6 = (function () {
    function author6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author6.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    author6.fromJS = function (data) {
        var result = new author6();
        result.init(data);
        return result;
    };
    author6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return author6;
}());
var commit7 = (function () {
    function commit7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit7.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author16.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer13.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.tree = data["tree"] ? tree8.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit7.fromJS = function (data) {
        var result = new commit7();
        result.init(data);
        return result;
    };
    commit7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit7;
}());
var committer5 = (function () {
    function committer5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer5.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    committer5.fromJS = function (data) {
        var result = new committer5();
        result.init(data);
        return result;
    };
    committer5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return committer5;
}());
var parents3 = (function () {
    function parents3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents3.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents3.fromJS = function (data) {
        var result = new parents3();
        result.init(data);
        return result;
    };
    parents3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents3;
}());
var Statuses = (function () {
    function Statuses(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Statuses.prototype.init = function (data) {
        if (data) {
            this.context = data["context"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.id = data["id"];
            this.state = data["state"];
            this.target_url = data["target_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
        }
    };
    Statuses.fromJS = function (data) {
        var result = new Statuses();
        result.init(data);
        return result;
    };
    Statuses.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["context"] = this.context;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["id"] = this.id;
        data["state"] = this.state;
        data["target_url"] = this.target_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    };
    return Statuses;
}());
var creator2 = (function () {
    function creator2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    creator2.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    creator2.fromJS = function (data) {
        var result = new creator2();
        result.init(data);
        return result;
    };
    creator2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return creator2;
}());
var creator3 = (function () {
    function creator3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    creator3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    creator3.fromJS = function (data) {
        var result = new creator3();
        result.init(data);
        return result;
    };
    creator3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return creator3;
}());
var owner3 = (function () {
    function owner3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner3.fromJS = function (data) {
        var result = new owner3();
        result.init(data);
        return result;
    };
    owner3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner3;
}());
var object3 = (function () {
    function object3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    object3.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    object3.fromJS = function (data) {
        var result = new object3();
        result.init(data);
        return result;
    };
    object3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return object3;
}());
var Config = (function () {
    function Config(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Config.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.url = data["url"];
        }
    };
    Config.fromJS = function (data) {
        var result = new Config();
        result.init(data);
        return result;
    };
    Config.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["url"] = this.url;
        return data;
    };
    return Config;
}());
var events;
(function (events) {
    events[events["Push"] = "push"] = "Push";
    events[events["Issues"] = "issues"] = "Issues";
    events[events["Issue_comment"] = "issue_comment"] = "Issue_comment";
    events[events["Commit_comment"] = "commit_comment"] = "Commit_comment";
    events[events["Pull_request"] = "pull_request"] = "Pull_request";
    events[events["Pull_request_review_comment"] = "pull_request_review_comment"] = "Pull_request_review_comment";
    events[events["Gollum"] = "gollum"] = "Gollum";
    events[events["Watch"] = "watch"] = "Watch";
    events[events["Download"] = "download"] = "Download";
    events[events["Fork"] = "fork"] = "Fork";
    events[events["Fork_apply"] = "fork_apply"] = "Fork_apply";
    events[events["Member"] = "member"] = "Member";
    events[events["Public"] = "public"] = "Public";
    events[events["Team_add"] = "team_add"] = "Team_add";
    events[events["Status"] = "status"] = "Status";
})(events || (events = {}));
var _links7 = (function () {
    function _links7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links7.prototype.init = function (data) {
        if (data) {
            this.html = data["html"] ? html2.fromJS(data["html"]) : undefined;
            this.pull_request = data["pull_request"] ? pull_request4.fromJS(data["pull_request"]) : undefined;
            this.self = data["self"] ? self2.fromJS(data["self"]) : undefined;
        }
    };
    _links7.fromJS = function (data) {
        var result = new _links7();
        result.init(data);
        return result;
    };
    _links7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["html"] = this.html ? this.html.toJSON() : undefined;
        data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : undefined;
        data["self"] = this.self ? this.self.toJSON() : undefined;
        return data;
    };
    return _links7;
}());
var user11 = (function () {
    function user11(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user11.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user11.fromJS = function (data) {
        var result = new user11();
        result.init(data);
        return result;
    };
    user11.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user11;
}());
var _links8 = (function () {
    function _links8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links8.prototype.init = function (data) {
        if (data) {
            this.comments = data["comments"] ? comments.fromJS(data["comments"]) : undefined;
            this.html = data["html"] ? html3.fromJS(data["html"]) : undefined;
            this.review_comments = data["review_comments"] ? review_comments.fromJS(data["review_comments"]) : undefined;
            this.self = data["self"] ? self3.fromJS(data["self"]) : undefined;
        }
    };
    _links8.fromJS = function (data) {
        var result = new _links8();
        result.init(data);
        return result;
    };
    _links8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["comments"] = this.comments ? this.comments.toJSON() : undefined;
        data["html"] = this.html ? this.html.toJSON() : undefined;
        data["review_comments"] = this.review_comments ? this.review_comments.toJSON() : undefined;
        data["self"] = this.self ? this.self.toJSON() : undefined;
        return data;
    };
    return _links8;
}());
var base = (function () {
    function base(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    base.prototype.init = function (data) {
        if (data) {
            this.label = data["label"];
            this.ref = data["ref"];
            this.repo = data["repo"] ? repo4.fromJS(data["repo"]) : undefined;
            this.sha = data["sha"];
            this.user = data["user"] ? user20.fromJS(data["user"]) : undefined;
        }
    };
    base.fromJS = function (data) {
        var result = new base();
        result.init(data);
        return result;
    };
    base.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["label"] = this.label;
        data["ref"] = this.ref;
        data["repo"] = this.repo ? this.repo.toJSON() : undefined;
        data["sha"] = this.sha;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return base;
}());
var head = (function () {
    function head(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    head.prototype.init = function (data) {
        if (data) {
            this.label = data["label"];
            this.ref = data["ref"];
            this.repo = data["repo"] ? repo5.fromJS(data["repo"]) : undefined;
            this.sha = data["sha"];
            this.user = data["user"] ? user21.fromJS(data["user"]) : undefined;
        }
    };
    head.fromJS = function (data) {
        var result = new head();
        result.init(data);
        return result;
    };
    head.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["label"] = this.label;
        data["ref"] = this.ref;
        data["repo"] = this.repo ? this.repo.toJSON() : undefined;
        data["sha"] = this.sha;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    };
    return head;
}());
var state2;
(function (state2) {
    state2[state2["Open"] = "open"] = "Open";
    state2[state2["Closed"] = "closed"] = "Closed";
})(state2 || (state2 = {}));
var user12 = (function () {
    function user12(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user12.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user12.fromJS = function (data) {
        var result = new user12();
        result.init(data);
        return result;
    };
    user12.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user12;
}());
var assets = (function () {
    function assets(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    assets.prototype.init = function (data) {
        if (data) {
            this.content_type = data["content_type"];
            this.created_at = data["created_at"];
            this.download_count = data["download_count"];
            this.id = data["id"];
            this.label = data["label"];
            this.name = data["name"];
            this.size = data["size"];
            this.state = data["state"];
            this.updated_at = data["updated_at"];
            this.uploader = data["uploader"] ? uploader3.fromJS(data["uploader"]) : undefined;
            this.url = data["url"];
        }
    };
    assets.fromJS = function (data) {
        var result = new assets();
        result.init(data);
        return result;
    };
    assets.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content_type"] = this.content_type;
        data["created_at"] = this.created_at;
        data["download_count"] = this.download_count;
        data["id"] = this.id;
        data["label"] = this.label;
        data["name"] = this.name;
        data["size"] = this.size;
        data["state"] = this.state;
        data["updated_at"] = this.updated_at;
        data["uploader"] = this.uploader ? this.uploader.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return assets;
}());
var author7 = (function () {
    function author7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author7.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    author7.fromJS = function (data) {
        var result = new author7();
        result.init(data);
        return result;
    };
    author7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return author7;
}());
var uploader = (function () {
    function uploader(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    uploader.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    uploader.fromJS = function (data) {
        var result = new uploader();
        result.init(data);
        return result;
    };
    uploader.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return uploader;
}());
var author8 = (function () {
    function author8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author8.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    author8.fromJS = function (data) {
        var result = new author8();
        result.init(data);
        return result;
    };
    author8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return author8;
}());
var Weeks = (function () {
    function Weeks(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Weeks.prototype.init = function (data) {
        if (data) {
            this.a = data["a"];
            this.c = data["c"];
            this.d = data["d"];
            this.w = data["w"];
        }
    };
    Weeks.fromJS = function (data) {
        var result = new Weeks();
        result.init(data);
        return result;
    };
    Weeks.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["a"] = this.a;
        data["c"] = this.c;
        data["d"] = this.d;
        data["w"] = this.w;
        return data;
    };
    return Weeks;
}());
var creator4 = (function () {
    function creator4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    creator4.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    creator4.fromJS = function (data) {
        var result = new creator4();
        result.init(data);
        return result;
    };
    creator4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return creator4;
}());
var owner4 = (function () {
    function owner4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner4.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner4.fromJS = function (data) {
        var result = new owner4();
        result.init(data);
        return result;
    };
    owner4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner4;
}());
var Language = (function () {
    function Language(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Language.prototype.init = function (data) {
        if (data) {
        }
    };
    Language.fromJS = function (data) {
        var result = new Language();
        result.init(data);
        return result;
    };
    Language.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return Language;
}());
var owner5 = (function () {
    function owner5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner5.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner5.fromJS = function (data) {
        var result = new owner5();
        result.init(data);
        return result;
    };
    owner5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner5;
}());
var owner6 = (function () {
    function owner6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner6.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner6.fromJS = function (data) {
        var result = new owner6();
        result.init(data);
        return result;
    };
    owner6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner6;
}());
var organization2 = (function () {
    function organization2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    organization2.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    organization2.fromJS = function (data) {
        var result = new organization2();
        result.init(data);
        return result;
    };
    organization2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return organization2;
}());
var author9 = (function () {
    function author9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author9.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    author9.fromJS = function (data) {
        var result = new author9();
        result.init(data);
        return result;
    };
    author9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return author9;
}());
var commit8 = (function () {
    function commit8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit8.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author17.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer14.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.tree = data["tree"] ? tree9.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit8.fromJS = function (data) {
        var result = new commit8();
        result.init(data);
        return result;
    };
    commit8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit8;
}());
var committer6 = (function () {
    function committer6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer6.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    committer6.fromJS = function (data) {
        var result = new committer6();
        result.init(data);
        return result;
    };
    committer6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return committer6;
}());
var parents4 = (function () {
    function parents4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents4.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents4.fromJS = function (data) {
        var result = new parents4();
        result.init(data);
        return result;
    };
    parents4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents4;
}());
var author10 = (function () {
    function author10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author10.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author10.fromJS = function (data) {
        var result = new author10();
        result.init(data);
        return result;
    };
    author10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author10;
}());
var committer7 = (function () {
    function committer7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer7.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer7.fromJS = function (data) {
        var result = new committer7();
        result.init(data);
        return result;
    };
    committer7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer7;
}());
var tree4 = (function () {
    function tree4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree4.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree4.fromJS = function (data) {
        var result = new tree4();
        result.init(data);
        return result;
    };
    tree4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree4;
}());
var author11 = (function () {
    function author11(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author11.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    author11.fromJS = function (data) {
        var result = new author11();
        result.init(data);
        return result;
    };
    author11.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return author11;
}());
var commit9 = (function () {
    function commit9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit9.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author18.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer15.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.tree = data["tree"] ? tree10.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit9.fromJS = function (data) {
        var result = new commit9();
        result.init(data);
        return result;
    };
    commit9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit9;
}());
var committer8 = (function () {
    function committer8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer8.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    committer8.fromJS = function (data) {
        var result = new committer8();
        result.init(data);
        return result;
    };
    committer8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return committer8;
}());
var parents5 = (function () {
    function parents5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents5.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents5.fromJS = function (data) {
        var result = new parents5();
        result.init(data);
        return result;
    };
    parents5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents5;
}());
var author12 = (function () {
    function author12(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author12.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    author12.fromJS = function (data) {
        var result = new author12();
        result.init(data);
        return result;
    };
    author12.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return author12;
}());
var commit10 = (function () {
    function commit10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    commit10.prototype.init = function (data) {
        if (data) {
            this.author = data["author"] ? author19.fromJS(data["author"]) : undefined;
            this.committer = data["committer"] ? committer16.fromJS(data["committer"]) : undefined;
            this.message = data["message"];
            this.tree = data["tree"] ? tree11.fromJS(data["tree"]) : undefined;
            this.url = data["url"];
        }
    };
    commit10.fromJS = function (data) {
        var result = new commit10();
        result.init(data);
        return result;
    };
    commit10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["committer"] = this.committer ? this.committer.toJSON() : undefined;
        data["message"] = this.message;
        data["tree"] = this.tree ? this.tree.toJSON() : undefined;
        data["url"] = this.url;
        return data;
    };
    return commit10;
}());
var committer9 = (function () {
    function committer9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer9.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    committer9.fromJS = function (data) {
        var result = new committer9();
        result.init(data);
        return result;
    };
    committer9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return committer9;
}());
var parents6 = (function () {
    function parents6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents6.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents6.fromJS = function (data) {
        var result = new parents6();
        result.init(data);
        return result;
    };
    parents6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents6;
}());
var author13 = (function () {
    function author13(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author13.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author13.fromJS = function (data) {
        var result = new author13();
        result.init(data);
        return result;
    };
    author13.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author13;
}());
var committer10 = (function () {
    function committer10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer10.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer10.fromJS = function (data) {
        var result = new committer10();
        result.init(data);
        return result;
    };
    committer10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer10;
}());
var parents7 = (function () {
    function parents7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents7.prototype.init = function (data) {
        if (data) {
            this.html_url = data["html_url"];
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents7.fromJS = function (data) {
        var result = new parents7();
        result.init(data);
        return result;
    };
    parents7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["html_url"] = this.html_url;
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents7;
}());
var tree5 = (function () {
    function tree5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree5.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree5.fromJS = function (data) {
        var result = new tree5();
        result.init(data);
        return result;
    };
    tree5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree5;
}());
var _links9 = (function () {
    function _links9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    _links9.prototype.init = function (data) {
        if (data) {
            this.git = data["git"];
            this.html = data["html"];
            this.self = data["self"];
        }
    };
    _links9.fromJS = function (data) {
        var result = new _links9();
        result.init(data);
        return result;
    };
    _links9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["git"] = this.git;
        data["html"] = this.html;
        data["self"] = this.self;
        return data;
    };
    return _links9;
}());
var author14 = (function () {
    function author14(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author14.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author14.fromJS = function (data) {
        var result = new author14();
        result.init(data);
        return result;
    };
    author14.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author14;
}());
var committer11 = (function () {
    function committer11(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer11.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer11.fromJS = function (data) {
        var result = new committer11();
        result.init(data);
        return result;
    };
    committer11.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer11;
}());
var parents8 = (function () {
    function parents8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    parents8.prototype.init = function (data) {
        if (data) {
            this.html_url = data["html_url"];
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    parents8.fromJS = function (data) {
        var result = new parents8();
        result.init(data);
        return result;
    };
    parents8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["html_url"] = this.html_url;
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return parents8;
}());
var tree6 = (function () {
    function tree6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree6.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree6.fromJS = function (data) {
        var result = new tree6();
        result.init(data);
        return result;
    };
    tree6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree6;
}());
var assignee = (function () {
    function assignee(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    assignee.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    assignee.fromJS = function (data) {
        var result = new assignee();
        result.init(data);
        return result;
    };
    assignee.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return assignee;
}());
var labels = (function () {
    function labels(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    labels.prototype.init = function (data) {
        if (data) {
            this.color = data["color"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    labels.fromJS = function (data) {
        var result = new labels();
        result.init(data);
        return result;
    };
    labels.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["color"] = this.color;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return labels;
}());
var milestone2 = (function () {
    function milestone2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    milestone2.prototype.init = function (data) {
        if (data) {
            this.closed_issues = data["closed_issues"];
            this.created_at = data["created_at"];
            this.creator = data["creator"] ? creator6.fromJS(data["creator"]) : undefined;
            this.description = data["description"];
            this.due_on = data["due_on"];
            this.number = data["number"];
            this.open_issues = data["open_issues"];
            this.state = data["state"] ? Milestone2State.fromJS(data["state"]) : undefined;
            this.title = data["title"];
            this.url = data["url"];
        }
    };
    milestone2.fromJS = function (data) {
        var result = new milestone2();
        result.init(data);
        return result;
    };
    milestone2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["closed_issues"] = this.closed_issues;
        data["created_at"] = this.created_at;
        data["creator"] = this.creator ? this.creator.toJSON() : undefined;
        data["description"] = this.description;
        data["due_on"] = this.due_on;
        data["number"] = this.number;
        data["open_issues"] = this.open_issues;
        data["state"] = this.state ? this.state.toJSON() : undefined;
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    };
    return milestone2;
}());
var pull_request = (function () {
    function pull_request(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    pull_request.prototype.init = function (data) {
        if (data) {
            this.diff_url = data["diff_url"];
            this.html_url = data["html_url"];
            this.patch_url = data["patch_url"];
        }
    };
    pull_request.fromJS = function (data) {
        var result = new pull_request();
        result.init(data);
        return result;
    };
    pull_request.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["diff_url"] = this.diff_url;
        data["html_url"] = this.html_url;
        data["patch_url"] = this.patch_url;
        return data;
    };
    return pull_request;
}());
var IssueState;
(function (IssueState) {
    IssueState[IssueState["Open"] = "open"] = "Open";
    IssueState[IssueState["Closed"] = "closed"] = "Closed";
})(IssueState || (IssueState = {}));
var user13 = (function () {
    function user13(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user13.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user13.fromJS = function (data) {
        var result = new user13();
        result.init(data);
        return result;
    };
    user13.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user13;
}());
var Current_user = (function () {
    function Current_user(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Current_user.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
            this.type = data["type"];
        }
    };
    Current_user.fromJS = function (data) {
        var result = new Current_user();
        result.init(data);
        return result;
    };
    Current_user.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        data["type"] = this.type;
        return data;
    };
    return Current_user;
}());
var Current_user_actor = (function () {
    function Current_user_actor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Current_user_actor.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
            this.type = data["type"];
        }
    };
    Current_user_actor.fromJS = function (data) {
        var result = new Current_user_actor();
        result.init(data);
        return result;
    };
    Current_user_actor.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        data["type"] = this.type;
        return data;
    };
    return Current_user_actor;
}());
var Current_user_organization = (function () {
    function Current_user_organization(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Current_user_organization.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
            this.type = data["type"];
        }
    };
    Current_user_organization.fromJS = function (data) {
        var result = new Current_user_organization();
        result.init(data);
        return result;
    };
    Current_user_organization.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        data["type"] = this.type;
        return data;
    };
    return Current_user_organization;
}());
var Current_user_public = (function () {
    function Current_user_public(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Current_user_public.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
            this.type = data["type"];
        }
    };
    Current_user_public.fromJS = function (data) {
        var result = new Current_user_public();
        result.init(data);
        return result;
    };
    Current_user_public.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        data["type"] = this.type;
        return data;
    };
    return Current_user_public;
}());
var Timeline = (function () {
    function Timeline(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Timeline.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
            this.type = data["type"];
        }
    };
    Timeline.fromJS = function (data) {
        var result = new Timeline();
        result.init(data);
        return result;
    };
    Timeline.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        data["type"] = this.type;
        return data;
    };
    return Timeline;
}());
var user14 = (function () {
    function user14(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user14.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
            this.type = data["type"];
        }
    };
    user14.fromJS = function (data) {
        var result = new user14();
        result.init(data);
        return result;
    };
    user14.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        data["type"] = this.type;
        return data;
    };
    return user14;
}());
var RingErl = (function () {
    function RingErl(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RingErl.prototype.init = function (data) {
        if (data) {
            this.filename = data["filename"];
            this.raw_url = data["raw_url"];
            this.size = data["size"];
        }
    };
    RingErl.fromJS = function (data) {
        var result = new RingErl();
        result.init(data);
        return result;
    };
    RingErl.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["filename"] = this.filename;
        data["raw_url"] = this.raw_url;
        data["size"] = this.size;
        return data;
    };
    return RingErl;
}());
var user15 = (function () {
    function user15(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user15.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user15.fromJS = function (data) {
        var result = new user15();
        result.init(data);
        return result;
    };
    user15.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user15;
}());
var Change_status = (function () {
    function Change_status(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Change_status.prototype.init = function (data) {
        if (data) {
            this.additions = data["additions"];
            this.deletions = data["deletions"];
            this.total = data["total"];
        }
    };
    Change_status.fromJS = function (data) {
        var result = new Change_status();
        result.init(data);
        return result;
    };
    Change_status.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["additions"] = this.additions;
        data["deletions"] = this.deletions;
        data["total"] = this.total;
        return data;
    };
    return Change_status;
}());
var user16 = (function () {
    function user16(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user16.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user16.fromJS = function (data) {
        var result = new user16();
        result.init(data);
        return result;
    };
    user16.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user16;
}());
var author15 = (function () {
    function author15(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author15.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author15.fromJS = function (data) {
        var result = new author15();
        result.init(data);
        return result;
    };
    author15.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author15;
}());
var committer12 = (function () {
    function committer12(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer12.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer12.fromJS = function (data) {
        var result = new committer12();
        result.init(data);
        return result;
    };
    committer12.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer12;
}());
var tree7 = (function () {
    function tree7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree7.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree7.fromJS = function (data) {
        var result = new tree7();
        result.init(data);
        return result;
    };
    tree7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree7;
}());
var owner7 = (function () {
    function owner7(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner7.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner7.fromJS = function (data) {
        var result = new owner7();
        result.init(data);
        return result;
    };
    owner7.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner7;
}());
var File1Txt = (function () {
    function File1Txt(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    File1Txt.prototype.init = function (data) {
        if (data) {
            this.content = data["content"];
        }
    };
    File1Txt.fromJS = function (data) {
        var result = new File1Txt();
        result.init(data);
        return result;
    };
    File1Txt.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content"] = this.content;
        return data;
    };
    return File1Txt;
}());
var New_fileTxt = (function () {
    function New_fileTxt(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    New_fileTxt.prototype.init = function (data) {
        if (data) {
            this.content = data["content"];
        }
    };
    New_fileTxt.fromJS = function (data) {
        var result = new New_fileTxt();
        result.init(data);
        return result;
    };
    New_fileTxt.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content"] = this.content;
        return data;
    };
    return New_fileTxt;
}());
var Old_nameTxt = (function () {
    function Old_nameTxt(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Old_nameTxt.prototype.init = function (data) {
        if (data) {
            this.content = data["content"];
            this.filename = data["filename"];
        }
    };
    Old_nameTxt.fromJS = function (data) {
        var result = new Old_nameTxt();
        result.init(data);
        return result;
    };
    Old_nameTxt.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content"] = this.content;
        data["filename"] = this.filename;
        return data;
    };
    return Old_nameTxt;
}());
var file1Txt = (function () {
    function file1Txt(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    file1Txt.prototype.init = function (data) {
        if (data) {
            this.content = data["content"];
        }
    };
    file1Txt.fromJS = function (data) {
        var result = new file1Txt();
        result.init(data);
        return result;
    };
    file1Txt.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["content"] = this.content;
        return data;
    };
    return file1Txt;
}());
var Comments = (function () {
    function Comments(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Comments.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    Comments.fromJS = function (data) {
        var result = new Comments();
        result.init(data);
        return result;
    };
    Comments.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return Comments;
}());
var Html = (function () {
    function Html(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Html.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    Html.fromJS = function (data) {
        var result = new Html();
        result.init(data);
        return result;
    };
    Html.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return Html;
}());
var Review_comments = (function () {
    function Review_comments(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Review_comments.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    Review_comments.fromJS = function (data) {
        var result = new Review_comments();
        result.init(data);
        return result;
    };
    Review_comments.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return Review_comments;
}());
var Self = (function () {
    function Self(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Self.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    Self.fromJS = function (data) {
        var result = new Self();
        result.init(data);
        return result;
    };
    Self.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return Self;
}());
var repo2 = (function () {
    function repo2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    repo2.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner11.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    repo2.fromJS = function (data) {
        var result = new repo2();
        result.init(data);
        return result;
    };
    repo2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return repo2;
}());
var user17 = (function () {
    function user17(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user17.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user17.fromJS = function (data) {
        var result = new user17();
        result.init(data);
        return result;
    };
    user17.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user17;
}());
var repo3 = (function () {
    function repo3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    repo3.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner12.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    repo3.fromJS = function (data) {
        var result = new repo3();
        result.init(data);
        return result;
    };
    repo3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return repo3;
}());
var user18 = (function () {
    function user18(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user18.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user18.fromJS = function (data) {
        var result = new user18();
        result.init(data);
        return result;
    };
    user18.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user18;
}());
var html = (function () {
    function html(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    html.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    html.fromJS = function (data) {
        var result = new html();
        result.init(data);
        return result;
    };
    html.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return html;
}());
var pull_request2 = (function () {
    function pull_request2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    pull_request2.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    pull_request2.fromJS = function (data) {
        var result = new pull_request2();
        result.init(data);
        return result;
    };
    pull_request2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return pull_request2;
}());
var self = (function () {
    function self(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    self.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    self.fromJS = function (data) {
        var result = new self();
        result.init(data);
        return result;
    };
    self.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return self;
}());
var uploader2 = (function () {
    function uploader2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    uploader2.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    uploader2.fromJS = function (data) {
        var result = new uploader2();
        result.init(data);
        return result;
    };
    uploader2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return uploader2;
}());
var owner8 = (function () {
    function owner8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner8.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner8.fromJS = function (data) {
        var result = new owner8();
        result.init(data);
        return result;
    };
    owner8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner8;
}());
var owner9 = (function () {
    function owner9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner9.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner9.fromJS = function (data) {
        var result = new owner9();
        result.init(data);
        return result;
    };
    owner9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner9;
}());
var repository = (function () {
    function repository(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    repository.prototype.init = function (data) {
        if (data) {
            this.archive_url = data["archive_url"];
            this.assignees_url = data["assignees_url"];
            this.blobs_url = data["blobs_url"];
            this.branches_url = data["branches_url"];
            this.collaborators_url = data["collaborators_url"];
            this.comments_url = data["comments_url"];
            this.commits_url = data["commits_url"];
            this.compare_url = data["compare_url"];
            this.contents_url = data["contents_url"];
            this.contributors_url = data["contributors_url"];
            this.description = data["description"];
            this.downloads_url = data["downloads_url"];
            this.events_url = data["events_url"];
            this.fork = data["fork"];
            this.forks_url = data["forks_url"];
            this.full_name = data["full_name"];
            this.git_commits_url = data["git_commits_url"];
            this.git_refs_url = data["git_refs_url"];
            this.git_tags_url = data["git_tags_url"];
            this.hooks_url = data["hooks_url"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.issue_comment_url = data["issue_comment_url"];
            this.issue_events_url = data["issue_events_url"];
            this.issues_url = data["issues_url"];
            this.keys_url = data["keys_url"];
            this.labels_url = data["labels_url"];
            this.languages_url = data["languages_url"];
            this.merges_url = data["merges_url"];
            this.milestones_url = data["milestones_url"];
            this.name = data["name"];
            this.notifications_url = data["notifications_url"];
            this.owner = data["owner"] ? owner13.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pulls_url = data["pulls_url"];
            this.stargazers_url = data["stargazers_url"];
            this.statuses_url = data["statuses_url"];
            this.subscribers_url = data["subscribers_url"];
            this.subscription_url = data["subscription_url"];
            this.tags_url = data["tags_url"];
            this.teams_url = data["teams_url"];
            this.trees_url = data["trees_url"];
            this.url = data["url"];
        }
    };
    repository.fromJS = function (data) {
        var result = new repository();
        result.init(data);
        return result;
    };
    repository.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["archive_url"] = this.archive_url;
        data["assignees_url"] = this.assignees_url;
        data["blobs_url"] = this.blobs_url;
        data["branches_url"] = this.branches_url;
        data["collaborators_url"] = this.collaborators_url;
        data["comments_url"] = this.comments_url;
        data["commits_url"] = this.commits_url;
        data["compare_url"] = this.compare_url;
        data["contents_url"] = this.contents_url;
        data["contributors_url"] = this.contributors_url;
        data["description"] = this.description;
        data["downloads_url"] = this.downloads_url;
        data["events_url"] = this.events_url;
        data["fork"] = this.fork;
        data["forks_url"] = this.forks_url;
        data["full_name"] = this.full_name;
        data["git_commits_url"] = this.git_commits_url;
        data["git_refs_url"] = this.git_refs_url;
        data["git_tags_url"] = this.git_tags_url;
        data["hooks_url"] = this.hooks_url;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["issue_comment_url"] = this.issue_comment_url;
        data["issue_events_url"] = this.issue_events_url;
        data["issues_url"] = this.issues_url;
        data["keys_url"] = this.keys_url;
        data["labels_url"] = this.labels_url;
        data["languages_url"] = this.languages_url;
        data["merges_url"] = this.merges_url;
        data["milestones_url"] = this.milestones_url;
        data["name"] = this.name;
        data["notifications_url"] = this.notifications_url;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pulls_url"] = this.pulls_url;
        data["stargazers_url"] = this.stargazers_url;
        data["statuses_url"] = this.statuses_url;
        data["subscribers_url"] = this.subscribers_url;
        data["subscription_url"] = this.subscription_url;
        data["tags_url"] = this.tags_url;
        data["teams_url"] = this.teams_url;
        data["trees_url"] = this.trees_url;
        data["url"] = this.url;
        return data;
    };
    return repository;
}());
var assignee2 = (function () {
    function assignee2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    assignee2.prototype.init = function (data) {
        if (data) {
        }
    };
    assignee2.fromJS = function (data) {
        var result = new assignee2();
        result.init(data);
        return result;
    };
    assignee2.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return assignee2;
}());
var Closed_at = (function () {
    function Closed_at(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Closed_at.prototype.init = function (data) {
        if (data) {
        }
    };
    Closed_at.fromJS = function (data) {
        var result = new Closed_at();
        result.init(data);
        return result;
    };
    Closed_at.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return Closed_at;
}());
var labels2 = (function () {
    function labels2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    labels2.prototype.init = function (data) {
        if (data) {
            this.color = data["color"];
            this.name = data["name"];
            this.url = data["url"];
        }
    };
    labels2.fromJS = function (data) {
        var result = new labels2();
        result.init(data);
        return result;
    };
    labels2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["color"] = this.color;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    };
    return labels2;
}());
var milestone3 = (function () {
    function milestone3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    milestone3.prototype.init = function (data) {
        if (data) {
        }
    };
    milestone3.fromJS = function (data) {
        var result = new milestone3();
        result.init(data);
        return result;
    };
    milestone3.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return milestone3;
}());
var pull_request3 = (function () {
    function pull_request3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    pull_request3.prototype.init = function (data) {
        if (data) {
            this.diff_url = data["diff_url"];
            this.html_url = data["html_url"];
            this.patch_url = data["patch_url"];
        }
    };
    pull_request3.fromJS = function (data) {
        var result = new pull_request3();
        result.init(data);
        return result;
    };
    pull_request3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["diff_url"] = this.diff_url;
        data["html_url"] = this.html_url;
        data["patch_url"] = this.patch_url;
        return data;
    };
    return pull_request3;
}());
var user19 = (function () {
    function user19(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user19.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    user19.fromJS = function (data) {
        var result = new user19();
        result.init(data);
        return result;
    };
    user19.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return user19;
}());
var owner10 = (function () {
    function owner10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner10.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.received_events_url = data["received_events_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    owner10.fromJS = function (data) {
        var result = new owner10();
        result.init(data);
        return result;
    };
    owner10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["received_events_url"] = this.received_events_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return owner10;
}());
var Tree3Mode;
(function (Tree3Mode) {
    Tree3Mode[Tree3Mode["_100644"] = "100644"] = "_100644";
    Tree3Mode[Tree3Mode["_100755"] = "100755"] = "_100755";
    Tree3Mode[Tree3Mode["_040000"] = "040000"] = "_040000";
    Tree3Mode[Tree3Mode["_160000"] = "160000"] = "_160000";
    Tree3Mode[Tree3Mode["_120000"] = "120000"] = "_120000";
})(Tree3Mode || (Tree3Mode = {}));
var Tree3Type;
(function (Tree3Type) {
    Tree3Type[Tree3Type["Blob"] = "blob"] = "Blob";
    Tree3Type[Tree3Type["Tree"] = "tree"] = "Tree";
    Tree3Type[Tree3Type["Commit"] = "commit"] = "Commit";
})(Tree3Type || (Tree3Type = {}));
var ringErl = (function () {
    function ringErl(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ringErl.prototype.init = function (data) {
        if (data) {
            this.filename = data["filename"];
            this.raw_url = data["raw_url"];
            this.size = data["size"];
        }
    };
    ringErl.fromJS = function (data) {
        var result = new ringErl();
        result.init(data);
        return result;
    };
    ringErl.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["filename"] = this.filename;
        data["raw_url"] = this.raw_url;
        data["size"] = this.size;
        return data;
    };
    return ringErl;
}());
var creator5 = (function () {
    function creator5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    creator5.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    creator5.fromJS = function (data) {
        var result = new creator5();
        result.init(data);
        return result;
    };
    creator5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return creator5;
}());
var milestoneState;
(function (milestoneState) {
    milestoneState[milestoneState["Open"] = "open"] = "Open";
    milestoneState[milestoneState["Closed"] = "closed"] = "Closed";
})(milestoneState || (milestoneState = {}));
var author16 = (function () {
    function author16(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author16.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author16.fromJS = function (data) {
        var result = new author16();
        result.init(data);
        return result;
    };
    author16.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author16;
}());
var committer13 = (function () {
    function committer13(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer13.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer13.fromJS = function (data) {
        var result = new committer13();
        result.init(data);
        return result;
    };
    committer13.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer13;
}());
var tree8 = (function () {
    function tree8(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree8.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree8.fromJS = function (data) {
        var result = new tree8();
        result.init(data);
        return result;
    };
    tree8.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree8;
}());
var html2 = (function () {
    function html2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    html2.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    html2.fromJS = function (data) {
        var result = new html2();
        result.init(data);
        return result;
    };
    html2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return html2;
}());
var pull_request4 = (function () {
    function pull_request4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    pull_request4.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    pull_request4.fromJS = function (data) {
        var result = new pull_request4();
        result.init(data);
        return result;
    };
    pull_request4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return pull_request4;
}());
var self2 = (function () {
    function self2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    self2.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    self2.fromJS = function (data) {
        var result = new self2();
        result.init(data);
        return result;
    };
    self2.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return self2;
}());
var comments = (function () {
    function comments(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    comments.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    comments.fromJS = function (data) {
        var result = new comments();
        result.init(data);
        return result;
    };
    comments.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return comments;
}());
var html3 = (function () {
    function html3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    html3.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    html3.fromJS = function (data) {
        var result = new html3();
        result.init(data);
        return result;
    };
    html3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return html3;
}());
var review_comments = (function () {
    function review_comments(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    review_comments.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    review_comments.fromJS = function (data) {
        var result = new review_comments();
        result.init(data);
        return result;
    };
    review_comments.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return review_comments;
}());
var self3 = (function () {
    function self3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    self3.prototype.init = function (data) {
        if (data) {
            this.href = data["href"];
        }
    };
    self3.fromJS = function (data) {
        var result = new self3();
        result.init(data);
        return result;
    };
    self3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["href"] = this.href;
        return data;
    };
    return self3;
}());
var repo4 = (function () {
    function repo4(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    repo4.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner14.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    repo4.fromJS = function (data) {
        var result = new repo4();
        result.init(data);
        return result;
    };
    repo4.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return repo4;
}());
var user20 = (function () {
    function user20(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user20.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user20.fromJS = function (data) {
        var result = new user20();
        result.init(data);
        return result;
    };
    user20.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user20;
}());
var repo5 = (function () {
    function repo5(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    repo5.prototype.init = function (data) {
        if (data) {
            this.clone_url = data["clone_url"];
            this.created_at = data["created_at"];
            this.description = data["description"];
            this.fork = data["fork"];
            this.forks = data["forks"];
            this.forks_count = data["forks_count"];
            this.full_name = data["full_name"];
            this.git_url = data["git_url"];
            this.homepage = data["homepage"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.language = data["language"];
            this.master_branch = data["master_branch"];
            this.mirror_url = data["mirror_url"];
            this.name = data["name"];
            this.open_issues = data["open_issues"];
            this.open_issues_count = data["open_issues_count"];
            this.owner = data["owner"] ? owner15.fromJS(data["owner"]) : undefined;
            this.private = data["private"];
            this.pushed_at = data["pushed_at"];
            this.size = data["size"];
            this.ssh_url = data["ssh_url"];
            this.svn_url = data["svn_url"];
            this.updated_at = data["updated_at"];
            this.url = data["url"];
            this.watchers = data["watchers"];
            this.watchers_count = data["watchers_count"];
        }
    };
    repo5.fromJS = function (data) {
        var result = new repo5();
        result.init(data);
        return result;
    };
    repo5.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["clone_url"] = this.clone_url;
        data["created_at"] = this.created_at;
        data["description"] = this.description;
        data["fork"] = this.fork;
        data["forks"] = this.forks;
        data["forks_count"] = this.forks_count;
        data["full_name"] = this.full_name;
        data["git_url"] = this.git_url;
        data["homepage"] = this.homepage;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["language"] = this.language;
        data["master_branch"] = this.master_branch;
        data["mirror_url"] = this.mirror_url;
        data["name"] = this.name;
        data["open_issues"] = this.open_issues;
        data["open_issues_count"] = this.open_issues_count;
        data["owner"] = this.owner ? this.owner.toJSON() : undefined;
        data["private"] = this.private;
        data["pushed_at"] = this.pushed_at;
        data["size"] = this.size;
        data["ssh_url"] = this.ssh_url;
        data["svn_url"] = this.svn_url;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        data["watchers"] = this.watchers;
        data["watchers_count"] = this.watchers_count;
        return data;
    };
    return repo5;
}());
var user21 = (function () {
    function user21(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    user21.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    user21.fromJS = function (data) {
        var result = new user21();
        result.init(data);
        return result;
    };
    user21.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return user21;
}());
var uploader3 = (function () {
    function uploader3(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    uploader3.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.site_admin = data["site_admin"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    uploader3.fromJS = function (data) {
        var result = new uploader3();
        result.init(data);
        return result;
    };
    uploader3.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["site_admin"] = this.site_admin;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return uploader3;
}());
var author17 = (function () {
    function author17(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author17.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author17.fromJS = function (data) {
        var result = new author17();
        result.init(data);
        return result;
    };
    author17.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author17;
}());
var committer14 = (function () {
    function committer14(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer14.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer14.fromJS = function (data) {
        var result = new committer14();
        result.init(data);
        return result;
    };
    committer14.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer14;
}());
var tree9 = (function () {
    function tree9(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree9.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree9.fromJS = function (data) {
        var result = new tree9();
        result.init(data);
        return result;
    };
    tree9.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree9;
}());
var author18 = (function () {
    function author18(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author18.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author18.fromJS = function (data) {
        var result = new author18();
        result.init(data);
        return result;
    };
    author18.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author18;
}());
var committer15 = (function () {
    function committer15(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer15.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer15.fromJS = function (data) {
        var result = new committer15();
        result.init(data);
        return result;
    };
    committer15.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer15;
}());
var tree10 = (function () {
    function tree10(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree10.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree10.fromJS = function (data) {
        var result = new tree10();
        result.init(data);
        return result;
    };
    tree10.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree10;
}());
var author19 = (function () {
    function author19(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    author19.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    author19.fromJS = function (data) {
        var result = new author19();
        result.init(data);
        return result;
    };
    author19.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return author19;
}());
var committer16 = (function () {
    function committer16(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    committer16.prototype.init = function (data) {
        if (data) {
            this.date = data["date"];
            this.email = data["email"];
            this.name = data["name"];
        }
    };
    committer16.fromJS = function (data) {
        var result = new committer16();
        result.init(data);
        return result;
    };
    committer16.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        return data;
    };
    return committer16;
}());
var tree11 = (function () {
    function tree11(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    tree11.prototype.init = function (data) {
        if (data) {
            this.sha = data["sha"];
            this.url = data["url"];
        }
    };
    tree11.fromJS = function (data) {
        var result = new tree11();
        result.init(data);
        return result;
    };
    tree11.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    };
    return tree11;
}());
var creator6 = (function () {
    function creator6(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    creator6.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    creator6.fromJS = function (data) {
        var result = new creator6();
        result.init(data);
        return result;
    };
    creator6.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return creator6;
}());
var Milestone2State;
(function (Milestone2State) {
    Milestone2State[Milestone2State["Open"] = "open"] = "Open";
    Milestone2State[Milestone2State["Closed"] = "closed"] = "Closed";
})(Milestone2State || (Milestone2State = {}));
var language = (function () {
    function language(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    language.prototype.init = function (data) {
        if (data) {
        }
    };
    language.fromJS = function (data) {
        var result = new language();
        result.init(data);
        return result;
    };
    language.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return language;
}());
var owner11 = (function () {
    function owner11(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner11.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner11.fromJS = function (data) {
        var result = new owner11();
        result.init(data);
        return result;
    };
    owner11.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner11;
}());
var language2 = (function () {
    function language2(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    language2.prototype.init = function (data) {
        if (data) {
        }
    };
    language2.fromJS = function (data) {
        var result = new language2();
        result.init(data);
        return result;
    };
    language2.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return language2;
}());
var owner12 = (function () {
    function owner12(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner12.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner12.fromJS = function (data) {
        var result = new owner12();
        result.init(data);
        return result;
    };
    owner12.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner12;
}());
var owner13 = (function () {
    function owner13(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner13.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.events_url = data["events_url"];
            this.followers_url = data["followers_url"];
            this.following_url = data["following_url"];
            this.gists_url = data["gists_url"];
            this.gravatar_id = data["gravatar_id"];
            this.html_url = data["html_url"];
            this.id = data["id"];
            this.login = data["login"];
            this.organizations_url = data["organizations_url"];
            this.received_events_url = data["received_events_url"];
            this.repos_url = data["repos_url"];
            this.starred_url = data["starred_url"];
            this.subscriptions_url = data["subscriptions_url"];
            this.type = data["type"];
            this.url = data["url"];
        }
    };
    owner13.fromJS = function (data) {
        var result = new owner13();
        result.init(data);
        return result;
    };
    owner13.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["events_url"] = this.events_url;
        data["followers_url"] = this.followers_url;
        data["following_url"] = this.following_url;
        data["gists_url"] = this.gists_url;
        data["gravatar_id"] = this.gravatar_id;
        data["html_url"] = this.html_url;
        data["id"] = this.id;
        data["login"] = this.login;
        data["organizations_url"] = this.organizations_url;
        data["received_events_url"] = this.received_events_url;
        data["repos_url"] = this.repos_url;
        data["starred_url"] = this.starred_url;
        data["subscriptions_url"] = this.subscriptions_url;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    };
    return owner13;
}());
var Diff_url = (function () {
    function Diff_url(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Diff_url.prototype.init = function (data) {
        if (data) {
        }
    };
    Diff_url.fromJS = function (data) {
        var result = new Diff_url();
        result.init(data);
        return result;
    };
    Diff_url.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return Diff_url;
}());
var Html_url = (function () {
    function Html_url(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Html_url.prototype.init = function (data) {
        if (data) {
        }
    };
    Html_url.fromJS = function (data) {
        var result = new Html_url();
        result.init(data);
        return result;
    };
    Html_url.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return Html_url;
}());
var Patch_url = (function () {
    function Patch_url(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Patch_url.prototype.init = function (data) {
        if (data) {
        }
    };
    Patch_url.fromJS = function (data) {
        var result = new Patch_url();
        result.init(data);
        return result;
    };
    Patch_url.prototype.toJSON = function (data) {
        data = data ? data : {};
        return data;
    };
    return Patch_url;
}());
var owner14 = (function () {
    function owner14(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner14.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner14.fromJS = function (data) {
        var result = new owner14();
        result.init(data);
        return result;
    };
    owner14.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner14;
}());
var owner15 = (function () {
    function owner15(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    owner15.prototype.init = function (data) {
        if (data) {
            this.avatar_url = data["avatar_url"];
            this.gravatar_id = data["gravatar_id"];
            this.id = data["id"];
            this.login = data["login"];
            this.url = data["url"];
        }
    };
    owner15.fromJS = function (data) {
        var result = new owner15();
        result.init(data);
        return result;
    };
    owner15.prototype.toJSON = function (data) {
        data = data ? data : {};
        data["avatar_url"] = this.avatar_url;
        data["gravatar_id"] = this.gravatar_id;
        data["id"] = this.id;
        data["login"] = this.login;
        data["url"] = this.url;
        return data;
    };
    return owner15;
}());
var SwaggerException = (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, result) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.result = result;
        return _this;
    }
    return SwaggerException;
}(Error));
function throwException(message, status, response, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, null);
}
