namespace TestWebApiClient {
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    
    export class CompaniesClient {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
    
        get(): Promise<Company[]> {
            let url_ = this.baseUrl + "/api/Companies";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGet(_response);
            });
        }
    
        protected processGet(response: Response): Promise<Company[]> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Company[] = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Company.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Company[]>(<any>null);
        }
    }
    
    export class OrdersClient {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
    
        get(companyId: number, pageIndex?: number, pageSize?: number): Promise<Order[]> {
            let url_ = this.baseUrl + "/api/Orders/{companyId}?";
            if (companyId === undefined || companyId === null)
                throw new Error("The parameter 'companyId' must be defined.");
            url_ = url_.replace("{companyId}", encodeURIComponent("" + companyId)); 
            if (pageIndex === null)
                throw new Error("The parameter 'pageIndex' cannot be null.");
            else if (pageIndex !== undefined)
                url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
            if (pageSize === null)
                throw new Error("The parameter 'pageSize' cannot be null.");
            else if (pageSize !== undefined)
                url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGet(_response);
            });
        }
    
        protected processGet(response: Response): Promise<Order[]> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Order[] = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Order.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Order[]>(<any>null);
        }
    
        getItem(orderId: number): Promise<Order> {
            let url_ = this.baseUrl + "/api/Orders/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetItem(_response);
            });
        }
    
        protected processGetItem(response: Response): Promise<Order> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Order = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Order.fromJS(resultData200) : <any>null;
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Order>(<any>null);
        }
    
        put(orderId: number, order?: Order): Promise<FileResponse> {
            let url_ = this.baseUrl + "/api/Orders/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(order);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPut(_response);
            });
        }
    
        protected processPut(response: Response): Promise<FileResponse> {
            const status = response.status;
            if (status === 200 || status === 206) {
                const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                const fileNameMatch = contentDisposition ? /filename="?([^"]*)"?;/g.exec(contentDisposition) : undefined;
                const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                let headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => headers[k] = v); };
                return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: headers }; });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<FileResponse>(<any>null);
        }
    
        post(order?: Order): Promise<FileResponse> {
            let url_ = this.baseUrl + "/api/Orders";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(order);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPost(_response);
            });
        }
    
        protected processPost(response: Response): Promise<FileResponse> {
            const status = response.status;
            if (status === 200 || status === 206) {
                const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                const fileNameMatch = contentDisposition ? /filename="?([^"]*)"?;/g.exec(contentDisposition) : undefined;
                const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                let headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => headers[k] = v); };
                return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: headers }; });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<FileResponse>(<any>null);
        }
    
        delete(orderId: number): Promise<void> {
            let url_ = this.baseUrl + "/api/Orders/delete-{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processDelete(_response);
            });
        }
    
        protected processDelete(response: Response): Promise<void> {
            const status = response.status;
            if (status === 204) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    }
    
    export class Company implements ICompany {
        id: number;
        name?: string;
        owner?: string;
    
        constructor(data?: ICompany) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
                this.owner = data["Owner"] !== undefined ? data["Owner"] : <any>null;
            }
        }
    
        static fromJS(data: any): Company {
            let result = new Company();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Name"] = this.name !== undefined ? this.name : <any>null;
            data["Owner"] = this.owner !== undefined ? this.owner : <any>null;
            return data; 
        }
    }
    
    export interface ICompany {
        id: number;
        name?: string;
        owner?: string;
    }
    
    export class Order implements IOrder {
        id: number;
        number?: string;
        date: Date;
        companyId: number;
        orderItems?: OrderItem[];
    
        constructor(data?: IOrder) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.number = data["Number"] !== undefined ? data["Number"] : <any>null;
                this.date = data["Date"] ? new Date(data["Date"].toString()) : <any>null;
                this.companyId = data["CompanyId"] !== undefined ? data["CompanyId"] : <any>null;
                if (data["OrderItems"] && data["OrderItems"].constructor === Array) {
                    this.orderItems = [];
                    for (let item of data["OrderItems"])
                        this.orderItems.push(OrderItem.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): Order {
            let result = new Order();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Number"] = this.number !== undefined ? this.number : <any>null;
            data["Date"] = this.date ? this.date.toISOString() : <any>null;
            data["CompanyId"] = this.companyId !== undefined ? this.companyId : <any>null;
            if (this.orderItems && this.orderItems.constructor === Array) {
                data["OrderItems"] = [];
                for (let item of this.orderItems)
                    data["OrderItems"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface IOrder {
        id: number;
        number?: string;
        date: Date;
        companyId: number;
        orderItems?: OrderItem[];
    }
    
    export class OrderItem implements IOrderItem {
        id: number;
        text?: string;
        amount: number;
        discount?: number;
        isOnStock: boolean;
    
        constructor(data?: IOrderItem) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.text = data["Text"] !== undefined ? data["Text"] : <any>null;
                this.amount = data["Amount"] !== undefined ? data["Amount"] : <any>null;
                this.discount = data["Discount"] !== undefined ? data["Discount"] : <any>null;
                this.isOnStock = data["IsOnStock"] !== undefined ? data["IsOnStock"] : <any>null;
            }
        }
    
        static fromJS(data: any): OrderItem {
            let result = new OrderItem();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Text"] = this.text !== undefined ? this.text : <any>null;
            data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
            data["Discount"] = this.discount !== undefined ? this.discount : <any>null;
            data["IsOnStock"] = this.isOnStock !== undefined ? this.isOnStock : <any>null;
            return data; 
        }
    }
    
    export interface IOrderItem {
        id: number;
        text?: string;
        amount: number;
        discount?: number;
        isOnStock: boolean;
    }
    
    export interface FileResponse {
        data: Blob;
    	status: number;
        fileName?: string;
    	headers?: { [name: string]: any };
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        result: any; 
    
        constructor(message: string, status: number, response: string, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.result = result;
        }
    }
    
    function throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
