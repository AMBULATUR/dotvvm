var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DotVVM;
(function (DotVVM) {
    var Samples;
    (function (Samples) {
        var Common;
        (function (Common) {
            var Api;
            (function (Api) {
                var Owin;
                (function (Owin) {
                    var ClientBase = (function () {
                        function ClientBase() {
                        }
                        ClientBase.prototype.transformOptions = function (options) {
                            options.credentials = "same-origin";
                            return Promise.resolve(options);
                        };
                        return ClientBase;
                    }());
                    /* tslint:disable */
                    //----------------------
                    // <auto-generated>
                    //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
                    // </auto-generated>
                    //----------------------
                    // ReSharper disable InconsistentNaming
                    var CompaniesClient = (function (_super) {
                        __extends(CompaniesClient, _super);
                        function CompaniesClient(baseUrl, http) {
                            var _this = _super.call(this) || this;
                            _this.jsonParseReviver = undefined;
                            _this.http = http ? http : window;
                            _this.baseUrl = baseUrl ? baseUrl : "http://localhost:61453";
                            return _this;
                        }
                        /**
                         * @return OK
                         */
                        CompaniesClient.prototype.get = function () {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/companies";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGet(_response);
                            });
                        };
                        CompaniesClient.prototype.processGet = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                                            var item = resultData200_1[_i];
                                            result200.push(Company.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @sortingOptions (optional)
                         * @sortingOptions_SortDescending (optional)
                         * @sortingOptions_SortExpression (optional)
                         * @return OK
                         */
                        CompaniesClient.prototype.getWithSorting = function (sortingOptions) {
                            var _this = this;
                            var sortingOptions_SortDescending = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortDescending : null;
                            var sortingOptions_SortExpression = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortExpression : null;
                            var url_ = this.baseUrl + "/api/companies/sorted?";
                            if (sortingOptions_SortDescending !== undefined)
                                url_ += "sortingOptions.SortDescending=" + encodeURIComponent("" + sortingOptions_SortDescending) + "&";
                            if (sortingOptions_SortExpression !== undefined)
                                url_ += "sortingOptions.SortExpression=" + encodeURIComponent("" + sortingOptions_SortExpression) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetWithSorting(_response);
                            });
                        };
                        CompaniesClient.prototype.processGetWithSorting = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? GridViewDataSetOfCompany.fromJS(resultData200) : new GridViewDataSetOfCompany();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @pagingOptions (optional)
                         * @pagingOptions_PageIndex (optional)
                         * @pagingOptions_PageSize (optional)
                         * @pagingOptions_TotalItemsCount (optional)
                         * @return OK
                         */
                        CompaniesClient.prototype.getWithPaging = function (pagingOptions) {
                            var _this = this;
                            var pagingOptions_PageIndex = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageIndex : null;
                            var pagingOptions_PageSize = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageSize : null;
                            var pagingOptions_TotalItemsCount = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.TotalItemsCount : null;
                            var url_ = this.baseUrl + "/api/companies/paged?";
                            if (pagingOptions_PageIndex !== undefined)
                                url_ += "pagingOptions.PageIndex=" + encodeURIComponent("" + pagingOptions_PageIndex) + "&";
                            if (pagingOptions_PageSize !== undefined)
                                url_ += "pagingOptions.PageSize=" + encodeURIComponent("" + pagingOptions_PageSize) + "&";
                            if (pagingOptions_TotalItemsCount !== undefined)
                                url_ += "pagingOptions.TotalItemsCount=" + encodeURIComponent("" + pagingOptions_TotalItemsCount) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetWithPaging(_response);
                            });
                        };
                        CompaniesClient.prototype.processGetWithPaging = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? GridViewDataSetOfCompany.fromJS(resultData200) : new GridViewDataSetOfCompany();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @sortingOptions (optional)
                         * @sortingOptions_SortDescending (optional)
                         * @sortingOptions_SortExpression (optional)
                         * @pagingOptions (optional)
                         * @pagingOptions_PageIndex (optional)
                         * @pagingOptions_PageSize (optional)
                         * @pagingOptions_TotalItemsCount (optional)
                         * @return OK
                         */
                        CompaniesClient.prototype.getWithSortingAndPaging = function (sortingOptions, pagingOptions) {
                            var _this = this;
                            var sortingOptions_SortDescending = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortDescending : null;
                            var sortingOptions_SortExpression = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortExpression : null;
                            var pagingOptions_PageIndex = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageIndex : null;
                            var pagingOptions_PageSize = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageSize : null;
                            var pagingOptions_TotalItemsCount = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.TotalItemsCount : null;
                            var url_ = this.baseUrl + "/api/companies/sortedandpaged?";
                            if (sortingOptions_SortDescending !== undefined)
                                url_ += "sortingOptions.SortDescending=" + encodeURIComponent("" + sortingOptions_SortDescending) + "&";
                            if (sortingOptions_SortExpression !== undefined)
                                url_ += "sortingOptions.SortExpression=" + encodeURIComponent("" + sortingOptions_SortExpression) + "&";
                            if (pagingOptions_PageIndex !== undefined)
                                url_ += "pagingOptions.PageIndex=" + encodeURIComponent("" + pagingOptions_PageIndex) + "&";
                            if (pagingOptions_PageSize !== undefined)
                                url_ += "pagingOptions.PageSize=" + encodeURIComponent("" + pagingOptions_PageSize) + "&";
                            if (pagingOptions_TotalItemsCount !== undefined)
                                url_ += "pagingOptions.TotalItemsCount=" + encodeURIComponent("" + pagingOptions_TotalItemsCount) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetWithSortingAndPaging(_response);
                            });
                        };
                        CompaniesClient.prototype.processGetWithSortingAndPaging = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? GridViewDataSetOfCompany.fromJS(resultData200) : new GridViewDataSetOfCompany();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        return CompaniesClient;
                    }(ClientBase));
                    Owin.CompaniesClient = CompaniesClient;
                    var OrdersClient = (function (_super) {
                        __extends(OrdersClient, _super);
                        function OrdersClient(baseUrl, http) {
                            var _this = _super.call(this) || this;
                            _this.jsonParseReviver = undefined;
                            _this.http = http ? http : window;
                            _this.baseUrl = baseUrl ? baseUrl : "http://localhost:61453";
                            return _this;
                        }
                        /**
                         * @pageIndex (optional)
                         * @pageSize (optional)
                         * @return OK
                         */
                        OrdersClient.prototype.get = function (companyId, pageIndex, pageSize) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/orders?";
                            if (companyId === undefined || companyId === null)
                                throw new Error("The parameter 'companyId' must be defined and cannot be null.");
                            else
                                url_ += "companyId=" + encodeURIComponent("" + companyId) + "&";
                            if (pageIndex !== undefined)
                                url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                            if (pageSize !== undefined)
                                url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGet(_response);
                            });
                        };
                        OrdersClient.prototype.processGet = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                                            var item = resultData200_2[_i];
                                            result200.push(Order.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return OK
                         */
                        OrdersClient.prototype.post = function (order) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/orders";
                            url_ = url_.replace(/[?&]$/, "");
                            var content_ = JSON.stringify(order);
                            var options_ = {
                                body: content_,
                                method: "POST",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processPost(_response);
                            });
                        };
                        OrdersClient.prototype.processPost = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200) {
                                        result200 = {};
                                        for (var key in resultData200) {
                                            if (resultData200.hasOwnProperty(key))
                                                result200[key] = resultData200[key];
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return OK
                         */
                        OrdersClient.prototype.getItem = function (orderId) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/orders/{orderId}";
                            if (orderId === undefined || orderId === null)
                                throw new Error("The parameter 'orderId' must be defined.");
                            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetItem(_response);
                            });
                        };
                        OrdersClient.prototype.processGetItem = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return OK
                         */
                        OrdersClient.prototype.put = function (orderId, order) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/orders/{orderId}";
                            if (orderId === undefined || orderId === null)
                                throw new Error("The parameter 'orderId' must be defined.");
                            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
                            url_ = url_.replace(/[?&]$/, "");
                            var content_ = JSON.stringify(order);
                            var options_ = {
                                body: content_,
                                method: "PUT",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processPut(_response);
                            });
                        };
                        OrdersClient.prototype.processPut = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200) {
                                        result200 = {};
                                        for (var key in resultData200) {
                                            if (resultData200.hasOwnProperty(key))
                                                result200[key] = resultData200[key];
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return No Content
                         */
                        OrdersClient.prototype["delete"] = function (orderId) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/orders/delete/{orderId}";
                            if (orderId === undefined || orderId === null)
                                throw new Error("The parameter 'orderId' must be defined.");
                            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "DELETE",
                                headers: new Headers({
                                    "Content-Type": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processDelete(_response);
                            });
                        };
                        OrdersClient.prototype.processDelete = function (response) {
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 204) {
                                return response.text().then(function (_responseText) {
                                    return;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        return OrdersClient;
                    }(ClientBase));
                    Owin.OrdersClient = OrdersClient;
                    var Company = (function () {
                        function Company(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        Company.prototype.init = function (data) {
                            if (data) {
                                this.id = data["Id"] !== undefined ? data["Id"] : null;
                                this.name = data["Name"] !== undefined ? data["Name"] : null;
                                this.owner = data["Owner"] !== undefined ? data["Owner"] : null;
                            }
                        };
                        Company.fromJS = function (data) {
                            var result = new Company();
                            result.init(data);
                            return result;
                        };
                        Company.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.id !== undefined ? this.id : null;
                            data["Name"] = this.name !== undefined ? this.name : null;
                            data["Owner"] = this.owner !== undefined ? this.owner : null;
                            return data;
                        };
                        return Company;
                    }());
                    Owin.Company = Company;
                    var SortingOptions = (function () {
                        function SortingOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        SortingOptions.prototype.init = function (data) {
                            if (data) {
                                this.sortDescending = data["SortDescending"] !== undefined ? data["SortDescending"] : null;
                                this.sortExpression = data["SortExpression"] !== undefined ? data["SortExpression"] : null;
                            }
                        };
                        SortingOptions.fromJS = function (data) {
                            var result = new SortingOptions();
                            result.init(data);
                            return result;
                        };
                        SortingOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["SortDescending"] = this.sortDescending !== undefined ? this.sortDescending : null;
                            data["SortExpression"] = this.sortExpression !== undefined ? this.sortExpression : null;
                            return data;
                        };
                        return SortingOptions;
                    }());
                    Owin.SortingOptions = SortingOptions;
                    var GridViewDataSetOfCompany = (function () {
                        function GridViewDataSetOfCompany(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        GridViewDataSetOfCompany.prototype.init = function (data) {
                            if (data) {
                                this.isRefreshRequired = data["IsRefreshRequired"] !== undefined ? data["IsRefreshRequired"] : null;
                                if (data["Items"] && data["Items"].constructor === Array) {
                                    this.items = [];
                                    for (var _i = 0, _a = data["Items"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.items.push(Company.fromJS(item));
                                    }
                                }
                                this.pagingOptions = data["PagingOptions"] ? IPagingOptions.fromJS(data["PagingOptions"]) : null;
                                this.rowEditOptions = data["RowEditOptions"] ? IRowEditOptions.fromJS(data["RowEditOptions"]) : null;
                                this.sortingOptions = data["SortingOptions"] ? ISortingOptions.fromJS(data["SortingOptions"]) : null;
                            }
                        };
                        GridViewDataSetOfCompany.fromJS = function (data) {
                            var result = new GridViewDataSetOfCompany();
                            result.init(data);
                            return result;
                        };
                        GridViewDataSetOfCompany.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["IsRefreshRequired"] = this.isRefreshRequired !== undefined ? this.isRefreshRequired : null;
                            if (this.items && this.items.constructor === Array) {
                                data["Items"] = [];
                                for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["Items"].push(item.toJSON());
                                }
                            }
                            data["PagingOptions"] = this.pagingOptions ? this.pagingOptions.toJSON() : null;
                            data["RowEditOptions"] = this.rowEditOptions ? this.rowEditOptions.toJSON() : null;
                            data["SortingOptions"] = this.sortingOptions ? this.sortingOptions.toJSON() : null;
                            return data;
                        };
                        return GridViewDataSetOfCompany;
                    }());
                    Owin.GridViewDataSetOfCompany = GridViewDataSetOfCompany;
                    var IPagingOptions = (function () {
                        function IPagingOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        IPagingOptions.prototype.init = function (data) {
                            if (data) {
                                this.pageIndex = data["PageIndex"] !== undefined ? data["PageIndex"] : null;
                                this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
                                this.totalItemsCount = data["TotalItemsCount"] !== undefined ? data["TotalItemsCount"] : null;
                                this.isFirstPage = data["IsFirstPage"] !== undefined ? data["IsFirstPage"] : null;
                                this.isLastPage = data["IsLastPage"] !== undefined ? data["IsLastPage"] : null;
                                this.pagesCount = data["PagesCount"] !== undefined ? data["PagesCount"] : null;
                                if (data["NearPageIndexes"] && data["NearPageIndexes"].constructor === Array) {
                                    this.nearPageIndexes = [];
                                    for (var _i = 0, _a = data["NearPageIndexes"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.nearPageIndexes.push(item);
                                    }
                                }
                            }
                        };
                        IPagingOptions.fromJS = function (data) {
                            var result = new IPagingOptions();
                            result.init(data);
                            return result;
                        };
                        IPagingOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["PageIndex"] = this.pageIndex !== undefined ? this.pageIndex : null;
                            data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
                            data["TotalItemsCount"] = this.totalItemsCount !== undefined ? this.totalItemsCount : null;
                            data["IsFirstPage"] = this.isFirstPage !== undefined ? this.isFirstPage : null;
                            data["IsLastPage"] = this.isLastPage !== undefined ? this.isLastPage : null;
                            data["PagesCount"] = this.pagesCount !== undefined ? this.pagesCount : null;
                            if (this.nearPageIndexes && this.nearPageIndexes.constructor === Array) {
                                data["NearPageIndexes"] = [];
                                for (var _i = 0, _a = this.nearPageIndexes; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["NearPageIndexes"].push(item);
                                }
                            }
                            return data;
                        };
                        return IPagingOptions;
                    }());
                    Owin.IPagingOptions = IPagingOptions;
                    var IRowEditOptions = (function () {
                        function IRowEditOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        IRowEditOptions.prototype.init = function (data) {
                            if (data) {
                                this.primaryKeyPropertyName = data["PrimaryKeyPropertyName"] !== undefined ? data["PrimaryKeyPropertyName"] : null;
                                if (data["EditRowId"]) {
                                    this.editRowId = {};
                                    for (var key in data["EditRowId"]) {
                                        if (data["EditRowId"].hasOwnProperty(key))
                                            this.editRowId[key] = data["EditRowId"][key];
                                    }
                                }
                            }
                        };
                        IRowEditOptions.fromJS = function (data) {
                            var result = new IRowEditOptions();
                            result.init(data);
                            return result;
                        };
                        IRowEditOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["PrimaryKeyPropertyName"] = this.primaryKeyPropertyName !== undefined ? this.primaryKeyPropertyName : null;
                            if (this.editRowId) {
                                data["EditRowId"] = {};
                                for (var key in this.editRowId) {
                                    if (this.editRowId.hasOwnProperty(key))
                                        data["EditRowId"][key] = this.editRowId[key] !== undefined ? this.editRowId[key] : null;
                                }
                            }
                            return data;
                        };
                        return IRowEditOptions;
                    }());
                    Owin.IRowEditOptions = IRowEditOptions;
                    var ISortingOptions = (function () {
                        function ISortingOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        ISortingOptions.prototype.init = function (data) {
                            if (data) {
                                this.sortDescending = data["SortDescending"] !== undefined ? data["SortDescending"] : null;
                                this.sortExpression = data["SortExpression"] !== undefined ? data["SortExpression"] : null;
                            }
                        };
                        ISortingOptions.fromJS = function (data) {
                            var result = new ISortingOptions();
                            result.init(data);
                            return result;
                        };
                        ISortingOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["SortDescending"] = this.sortDescending !== undefined ? this.sortDescending : null;
                            data["SortExpression"] = this.sortExpression !== undefined ? this.sortExpression : null;
                            return data;
                        };
                        return ISortingOptions;
                    }());
                    Owin.ISortingOptions = ISortingOptions;
                    var PagingOptions = (function () {
                        function PagingOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        PagingOptions.prototype.init = function (data) {
                            if (data) {
                                if (data["NearPageIndexesProvider"]) {
                                    this.nearPageIndexesProvider = {};
                                    for (var key in data["NearPageIndexesProvider"]) {
                                        if (data["NearPageIndexesProvider"].hasOwnProperty(key))
                                            this.nearPageIndexesProvider[key] = data["NearPageIndexesProvider"][key];
                                    }
                                }
                                this.isFirstPage = data["IsFirstPage"] !== undefined ? data["IsFirstPage"] : null;
                                this.isLastPage = data["IsLastPage"] !== undefined ? data["IsLastPage"] : null;
                                this.pagesCount = data["PagesCount"] !== undefined ? data["PagesCount"] : null;
                                this.pageIndex = data["PageIndex"] !== undefined ? data["PageIndex"] : null;
                                this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
                                this.totalItemsCount = data["TotalItemsCount"] !== undefined ? data["TotalItemsCount"] : null;
                                if (data["NearPageIndexes"] && data["NearPageIndexes"].constructor === Array) {
                                    this.nearPageIndexes = [];
                                    for (var _i = 0, _a = data["NearPageIndexes"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.nearPageIndexes.push(item);
                                    }
                                }
                            }
                        };
                        PagingOptions.fromJS = function (data) {
                            var result = new PagingOptions();
                            result.init(data);
                            return result;
                        };
                        PagingOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            if (this.nearPageIndexesProvider) {
                                data["NearPageIndexesProvider"] = {};
                                for (var key in this.nearPageIndexesProvider) {
                                    if (this.nearPageIndexesProvider.hasOwnProperty(key))
                                        data["NearPageIndexesProvider"][key] = this.nearPageIndexesProvider[key] !== undefined ? this.nearPageIndexesProvider[key] : null;
                                }
                            }
                            data["IsFirstPage"] = this.isFirstPage !== undefined ? this.isFirstPage : null;
                            data["IsLastPage"] = this.isLastPage !== undefined ? this.isLastPage : null;
                            data["PagesCount"] = this.pagesCount !== undefined ? this.pagesCount : null;
                            data["PageIndex"] = this.pageIndex !== undefined ? this.pageIndex : null;
                            data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
                            data["TotalItemsCount"] = this.totalItemsCount !== undefined ? this.totalItemsCount : null;
                            if (this.nearPageIndexes && this.nearPageIndexes.constructor === Array) {
                                data["NearPageIndexes"] = [];
                                for (var _i = 0, _a = this.nearPageIndexes; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["NearPageIndexes"].push(item);
                                }
                            }
                            return data;
                        };
                        return PagingOptions;
                    }());
                    Owin.PagingOptions = PagingOptions;
                    var Order = (function () {
                        function Order(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        Order.prototype.init = function (data) {
                            if (data) {
                                this.id = data["Id"] !== undefined ? data["Id"] : null;
                                this.number = data["Number"] !== undefined ? data["Number"] : null;
                                this.date = data["Date"] ? new Date(data["Date"].toString()) : null;
                                this.companyId = data["CompanyId"] !== undefined ? data["CompanyId"] : null;
                                if (data["OrderItems"] && data["OrderItems"].constructor === Array) {
                                    this.orderItems = [];
                                    for (var _i = 0, _a = data["OrderItems"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.orderItems.push(OrderItem.fromJS(item));
                                    }
                                }
                            }
                        };
                        Order.fromJS = function (data) {
                            var result = new Order();
                            result.init(data);
                            return result;
                        };
                        Order.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.id !== undefined ? this.id : null;
                            data["Number"] = this.number !== undefined ? this.number : null;
                            data["Date"] = this.date ? this.date.toISOString() : null;
                            data["CompanyId"] = this.companyId !== undefined ? this.companyId : null;
                            if (this.orderItems && this.orderItems.constructor === Array) {
                                data["OrderItems"] = [];
                                for (var _i = 0, _a = this.orderItems; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["OrderItems"].push(item.toJSON());
                                }
                            }
                            return data;
                        };
                        return Order;
                    }());
                    Owin.Order = Order;
                    var OrderItem = (function () {
                        function OrderItem(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        OrderItem.prototype.init = function (data) {
                            if (data) {
                                this.id = data["Id"] !== undefined ? data["Id"] : null;
                                this.text = data["Text"] !== undefined ? data["Text"] : null;
                                this.amount = data["Amount"] !== undefined ? data["Amount"] : null;
                                this.discount = data["Discount"] !== undefined ? data["Discount"] : null;
                                this.isOnStock = data["IsOnStock"] !== undefined ? data["IsOnStock"] : null;
                            }
                        };
                        OrderItem.fromJS = function (data) {
                            var result = new OrderItem();
                            result.init(data);
                            return result;
                        };
                        OrderItem.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.id !== undefined ? this.id : null;
                            data["Text"] = this.text !== undefined ? this.text : null;
                            data["Amount"] = this.amount !== undefined ? this.amount : null;
                            data["Discount"] = this.discount !== undefined ? this.discount : null;
                            data["IsOnStock"] = this.isOnStock !== undefined ? this.isOnStock : null;
                            return data;
                        };
                        return OrderItem;
                    }());
                    Owin.OrderItem = OrderItem;
                    var SwaggerException = (function (_super) {
                        __extends(SwaggerException, _super);
                        function SwaggerException(message, status, response, headers, result) {
                            var _this = _super.call(this) || this;
                            _this.isSwaggerException = true;
                            _this.message = message;
                            _this.status = status;
                            _this.response = response;
                            _this.headers = headers;
                            _this.result = result;
                            return _this;
                        }
                        SwaggerException.isSwaggerException = function (obj) {
                            return obj.isSwaggerException === true;
                        };
                        return SwaggerException;
                    }(Error));
                    Owin.SwaggerException = SwaggerException;
                    function throwException(message, status, response, headers, result) {
                        if (result !== null && result !== undefined)
                            throw result;
                        else
                            throw new SwaggerException(message, status, response, headers, null);
                    }
                })(Owin = Api.Owin || (Api.Owin = {}));
            })(Api = Common.Api || (Common.Api = {}));
        })(Common = Samples.Common || (Samples.Common = {}));
    })(Samples = DotVVM.Samples || (DotVVM.Samples = {}));
})(DotVVM || (DotVVM = {}));
