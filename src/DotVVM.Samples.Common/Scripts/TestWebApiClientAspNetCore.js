var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DotVVM;
(function (DotVVM) {
    var Samples;
    (function (Samples) {
        var Common;
        (function (Common) {
            var Api;
            (function (Api) {
                var AspNetCore;
                (function (AspNetCore) {
                    var ClientBase = /** @class */ (function () {
                        function ClientBase() {
                        }
                        ClientBase.prototype.transformOptions = function (options) {
                            options.credentials = "same-origin";
                            return Promise.resolve(options);
                        };
                        return ClientBase;
                    }());
                    /* tslint:disable */
                    //----------------------
                    // <auto-generated>
                    //     Generated using the NSwag toolchain v11.14.1.0 (NJsonSchema v9.10.24.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
                    // </auto-generated>
                    //----------------------
                    // ReSharper disable InconsistentNaming
                    var TestWebApiClientAspNetCore = /** @class */ (function (_super) {
                        __extends(TestWebApiClientAspNetCore, _super);
                        function TestWebApiClientAspNetCore(baseUrl, http) {
                            var _this = _super.call(this) || this;
                            _this.jsonParseReviver = undefined;
                            _this.http = http ? http : window;
                            _this.baseUrl = baseUrl ? baseUrl : "http://localhost:5001";
                            return _this;
                        }
                        /**
                         * @category (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.bindingSharingGetGet = function (category) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/BindingSharing/get?";
                            if (category !== undefined)
                                url_ += "category=" + encodeURIComponent("" + category) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processBindingSharingGetGet(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processBindingSharingGetGet = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                                            var item = resultData200_1[_i];
                                            result200.push(BindingSharingItemDTO.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.bindingSharingGetGetWithRouteParam = function (category) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/BindingSharing/getWithRouteParam/{category}";
                            if (category === undefined || category === null)
                                throw new Error("The parameter 'category' must be defined.");
                            url_ = url_.replace("{category}", encodeURIComponent("" + category));
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processBindingSharingGetGetWithRouteParam(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processBindingSharingGetGetWithRouteParam = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                                            var item = resultData200_2[_i];
                                            result200.push(BindingSharingItemDTO.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @category (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.bindingSharingPostPost = function (category) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/BindingSharing/post?";
                            if (category !== undefined)
                                url_ += "category=" + encodeURIComponent("" + category) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "POST",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processBindingSharingPostPost(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processBindingSharingPostPost = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                                            var item = resultData200_3[_i];
                                            result200.push(BindingSharingItemDTO.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.getCompanies = function () {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/Companies";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetCompanies(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processGetCompanies = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                                            var item = resultData200_4[_i];
                                            result200.push(CompanyOfString.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @sortingOptions (optional)
                         * @sortingOptions_SortDescending (optional)
                         * @sortingOptions_SortExpression (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.companiesGetSorted = function (sortingOptions) {
                            var _this = this;
                            var sortingOptions_SortDescending = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortDescending : null;
                            var sortingOptions_SortExpression = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortExpression : null;
                            var url_ = this.baseUrl + "/api/Companies/sorted?";
                            if (sortingOptions_SortDescending !== undefined)
                                url_ += "sortingOptions.SortDescending=" + encodeURIComponent("" + sortingOptions_SortDescending) + "&";
                            if (sortingOptions_SortExpression !== undefined)
                                url_ += "sortingOptions.SortExpression=" + encodeURIComponent("" + sortingOptions_SortExpression) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processCompaniesGetSorted(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processCompaniesGetSorted = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? GridViewDataSetOfCompanyOfBoolean.fromJS(resultData200) : new GridViewDataSetOfCompanyOfBoolean();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @pagingOptions (optional)
                         * @pagingOptions_PageIndex (optional)
                         * @pagingOptions_PageSize (optional)
                         * @pagingOptions_TotalItemsCount (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.companiesGetPaged = function (pagingOptions) {
                            var _this = this;
                            var pagingOptions_PageIndex = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageIndex : null;
                            var pagingOptions_PageSize = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageSize : null;
                            var pagingOptions_TotalItemsCount = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.TotalItemsCount : null;
                            var url_ = this.baseUrl + "/api/Companies/paged?";
                            if (pagingOptions_PageIndex !== undefined)
                                url_ += "pagingOptions.PageIndex=" + encodeURIComponent("" + pagingOptions_PageIndex) + "&";
                            if (pagingOptions_PageSize !== undefined)
                                url_ += "pagingOptions.PageSize=" + encodeURIComponent("" + pagingOptions_PageSize) + "&";
                            if (pagingOptions_TotalItemsCount !== undefined)
                                url_ += "pagingOptions.TotalItemsCount=" + encodeURIComponent("" + pagingOptions_TotalItemsCount) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processCompaniesGetPaged(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processCompaniesGetPaged = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? GridViewDataSetOfCompanyOfString.fromJS(resultData200) : new GridViewDataSetOfCompanyOfString();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @sortingOptions (optional)
                         * @sortingOptions_SortDescending (optional)
                         * @sortingOptions_SortExpression (optional)
                         * @pagingOptions (optional)
                         * @pagingOptions_PageIndex (optional)
                         * @pagingOptions_PageSize (optional)
                         * @pagingOptions_TotalItemsCount (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.companiesGetSortedandpaged = function (sortingOptions, pagingOptions) {
                            var _this = this;
                            var sortingOptions_SortDescending = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortDescending : null;
                            var sortingOptions_SortExpression = (sortingOptions !== null && typeof sortingOptions === 'object') ? sortingOptions.SortExpression : null;
                            var pagingOptions_PageIndex = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageIndex : null;
                            var pagingOptions_PageSize = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.PageSize : null;
                            var pagingOptions_TotalItemsCount = (pagingOptions !== null && typeof pagingOptions === 'object') ? pagingOptions.TotalItemsCount : null;
                            var url_ = this.baseUrl + "/api/Companies/sortedandpaged?";
                            if (sortingOptions_SortDescending !== undefined)
                                url_ += "sortingOptions.SortDescending=" + encodeURIComponent("" + sortingOptions_SortDescending) + "&";
                            if (sortingOptions_SortExpression !== undefined)
                                url_ += "sortingOptions.SortExpression=" + encodeURIComponent("" + sortingOptions_SortExpression) + "&";
                            if (pagingOptions_PageIndex !== undefined)
                                url_ += "pagingOptions.PageIndex=" + encodeURIComponent("" + pagingOptions_PageIndex) + "&";
                            if (pagingOptions_PageSize !== undefined)
                                url_ += "pagingOptions.PageSize=" + encodeURIComponent("" + pagingOptions_PageSize) + "&";
                            if (pagingOptions_TotalItemsCount !== undefined)
                                url_ += "pagingOptions.TotalItemsCount=" + encodeURIComponent("" + pagingOptions_TotalItemsCount) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processCompaniesGetSortedandpaged(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processCompaniesGetSortedandpaged = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? GridViewDataSetOfCompanyOfString.fromJS(resultData200) : new GridViewDataSetOfCompanyOfString();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @companyId (optional)
                         * @pageIndex (optional)
                         * @pageSize (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.getOrdersAll = function (companyId, pageIndex, pageSize) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/Orders?";
                            if (companyId !== undefined)
                                url_ += "companyId=" + encodeURIComponent("" + companyId) + "&";
                            if (pageIndex !== undefined)
                                url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                            if (pageSize !== undefined)
                                url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetOrdersAll(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processGetOrdersAll = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    if (resultData200 && resultData200.constructor === Array) {
                                        result200 = [];
                                        for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                                            var item = resultData200_5[_i];
                                            result200.push(Order.fromJS(item));
                                        }
                                    }
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @body (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.postOrders = function (body) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/Orders";
                            url_ = url_.replace(/[?&]$/, "");
                            var content_ = JSON.stringify(body);
                            var options_ = {
                                body: content_,
                                method: "POST",
                                headers: new Headers({
                                    "Content-Type": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processPostOrders(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processPostOrders = function (response) {
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    return;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.getOrders = function (orderId) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/Orders/{orderId}";
                            if (orderId === undefined || orderId === null)
                                throw new Error("The parameter 'orderId' must be defined.");
                            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "GET",
                                headers: new Headers({
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processGetOrders(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processGetOrders = function (response) {
                            var _this = this;
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    var result200 = null;
                                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                    result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                                    return result200;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @body (optional)
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.putOrders = function (orderId, body) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/Orders/{orderId}";
                            if (orderId === undefined || orderId === null)
                                throw new Error("The parameter 'orderId' must be defined.");
                            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
                            url_ = url_.replace(/[?&]$/, "");
                            var content_ = JSON.stringify(body);
                            var options_ = {
                                body: content_,
                                method: "PUT",
                                headers: new Headers({
                                    "Content-Type": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processPutOrders(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processPutOrders = function (response) {
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    return;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        /**
                         * @return Success
                         */
                        TestWebApiClientAspNetCore.prototype.ordersDeleteDelete = function (orderId) {
                            var _this = this;
                            var url_ = this.baseUrl + "/api/Orders/delete/{orderId}";
                            if (orderId === undefined || orderId === null)
                                throw new Error("The parameter 'orderId' must be defined.");
                            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
                            url_ = url_.replace(/[?&]$/, "");
                            var options_ = {
                                method: "DELETE",
                                headers: new Headers({
                                    "Content-Type": "application/json"
                                })
                            };
                            return this.transformOptions(options_).then(function (transformedOptions_) {
                                return _this.http.fetch(url_, transformedOptions_);
                            }).then(function (_response) {
                                return _this.processOrdersDeleteDelete(_response);
                            });
                        };
                        TestWebApiClientAspNetCore.prototype.processOrdersDeleteDelete = function (response) {
                            var status = response.status;
                            var _headers = {};
                            if (response.headers && response.headers.forEach) {
                                response.headers.forEach(function (v, k) { return _headers[k] = v; });
                            }
                            ;
                            if (status === 200) {
                                return response.text().then(function (_responseText) {
                                    return;
                                });
                            }
                            else if (status !== 200 && status !== 204) {
                                return response.text().then(function (_responseText) {
                                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                                });
                            }
                            return Promise.resolve(null);
                        };
                        return TestWebApiClientAspNetCore;
                    }(ClientBase));
                    AspNetCore.TestWebApiClientAspNetCore = TestWebApiClientAspNetCore;
                    var BindingSharingItemDTO = /** @class */ (function () {
                        function BindingSharingItemDTO(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        BindingSharingItemDTO.prototype.init = function (data) {
                            if (data) {
                                this.Id = data["Id"] !== undefined ? data["Id"] : null;
                                this.Name = data["Name"] !== undefined ? data["Name"] : null;
                            }
                        };
                        BindingSharingItemDTO.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new BindingSharingItemDTO();
                            result.init(data);
                            return result;
                        };
                        BindingSharingItemDTO.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.Id !== undefined ? this.Id : null;
                            data["Name"] = this.Name !== undefined ? this.Name : null;
                            return data;
                        };
                        return BindingSharingItemDTO;
                    }());
                    AspNetCore.BindingSharingItemDTO = BindingSharingItemDTO;
                    var CompanyOfString = /** @class */ (function () {
                        function CompanyOfString(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        CompanyOfString.prototype.init = function (data) {
                            if (data) {
                                this.Id = data["Id"] !== undefined ? data["Id"] : null;
                                this.Name = data["Name"] !== undefined ? data["Name"] : null;
                                this.Owner = data["Owner"] !== undefined ? data["Owner"] : null;
                                this.Department = data["Department"] !== undefined ? data["Department"] : null;
                            }
                        };
                        CompanyOfString.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new CompanyOfString();
                            result.init(data);
                            return result;
                        };
                        CompanyOfString.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.Id !== undefined ? this.Id : null;
                            data["Name"] = this.Name !== undefined ? this.Name : null;
                            data["Owner"] = this.Owner !== undefined ? this.Owner : null;
                            data["Department"] = this.Department !== undefined ? this.Department : null;
                            return data;
                        };
                        return CompanyOfString;
                    }());
                    AspNetCore.CompanyOfString = CompanyOfString;
                    var CompanyOfBoolean = /** @class */ (function () {
                        function CompanyOfBoolean(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        CompanyOfBoolean.prototype.init = function (data) {
                            if (data) {
                                this.Id = data["Id"] !== undefined ? data["Id"] : null;
                                this.Name = data["Name"] !== undefined ? data["Name"] : null;
                                this.Owner = data["Owner"] !== undefined ? data["Owner"] : null;
                                this.Department = data["Department"] !== undefined ? data["Department"] : null;
                            }
                        };
                        CompanyOfBoolean.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new CompanyOfBoolean();
                            result.init(data);
                            return result;
                        };
                        CompanyOfBoolean.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.Id !== undefined ? this.Id : null;
                            data["Name"] = this.Name !== undefined ? this.Name : null;
                            data["Owner"] = this.Owner !== undefined ? this.Owner : null;
                            data["Department"] = this.Department !== undefined ? this.Department : null;
                            return data;
                        };
                        return CompanyOfBoolean;
                    }());
                    AspNetCore.CompanyOfBoolean = CompanyOfBoolean;
                    var IPagingOptions = /** @class */ (function () {
                        function IPagingOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        IPagingOptions.prototype.init = function (data) {
                            if (data) {
                                this.PageIndex = data["PageIndex"] !== undefined ? data["PageIndex"] : null;
                                this.PageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
                                this.TotalItemsCount = data["TotalItemsCount"] !== undefined ? data["TotalItemsCount"] : null;
                                this.IsFirstPage = data["IsFirstPage"] !== undefined ? data["IsFirstPage"] : null;
                                this.IsLastPage = data["IsLastPage"] !== undefined ? data["IsLastPage"] : null;
                                this.PagesCount = data["PagesCount"] !== undefined ? data["PagesCount"] : null;
                                if (data["NearPageIndexes"] && data["NearPageIndexes"].constructor === Array) {
                                    this.NearPageIndexes = [];
                                    for (var _i = 0, _a = data["NearPageIndexes"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.NearPageIndexes.push(item);
                                    }
                                }
                            }
                        };
                        IPagingOptions.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new IPagingOptions();
                            result.init(data);
                            return result;
                        };
                        IPagingOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["PageIndex"] = this.PageIndex !== undefined ? this.PageIndex : null;
                            data["PageSize"] = this.PageSize !== undefined ? this.PageSize : null;
                            data["TotalItemsCount"] = this.TotalItemsCount !== undefined ? this.TotalItemsCount : null;
                            data["IsFirstPage"] = this.IsFirstPage !== undefined ? this.IsFirstPage : null;
                            data["IsLastPage"] = this.IsLastPage !== undefined ? this.IsLastPage : null;
                            data["PagesCount"] = this.PagesCount !== undefined ? this.PagesCount : null;
                            if (this.NearPageIndexes && this.NearPageIndexes.constructor === Array) {
                                data["NearPageIndexes"] = [];
                                for (var _i = 0, _a = this.NearPageIndexes; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["NearPageIndexes"].push(item);
                                }
                            }
                            return data;
                        };
                        return IPagingOptions;
                    }());
                    AspNetCore.IPagingOptions = IPagingOptions;
                    var IRowEditOptions = /** @class */ (function () {
                        function IRowEditOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        IRowEditOptions.prototype.init = function (data) {
                            if (data) {
                                this.PrimaryKeyPropertyName = data["PrimaryKeyPropertyName"] !== undefined ? data["PrimaryKeyPropertyName"] : null;
                                if (data["EditRowId"]) {
                                    this.EditRowId = {};
                                    for (var key in data["EditRowId"]) {
                                        if (data["EditRowId"].hasOwnProperty(key))
                                            this.EditRowId[key] = data["EditRowId"][key];
                                    }
                                }
                            }
                        };
                        IRowEditOptions.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new IRowEditOptions();
                            result.init(data);
                            return result;
                        };
                        IRowEditOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["PrimaryKeyPropertyName"] = this.PrimaryKeyPropertyName !== undefined ? this.PrimaryKeyPropertyName : null;
                            if (this.EditRowId) {
                                data["EditRowId"] = {};
                                for (var key in this.EditRowId) {
                                    if (this.EditRowId.hasOwnProperty(key))
                                        data["EditRowId"][key] = this.EditRowId[key] !== undefined ? this.EditRowId[key] : null;
                                }
                            }
                            return data;
                        };
                        return IRowEditOptions;
                    }());
                    AspNetCore.IRowEditOptions = IRowEditOptions;
                    var ISortingOptions = /** @class */ (function () {
                        function ISortingOptions(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        ISortingOptions.prototype.init = function (data) {
                            if (data) {
                                this.SortDescending = data["SortDescending"] !== undefined ? data["SortDescending"] : null;
                                this.SortExpression = data["SortExpression"] !== undefined ? data["SortExpression"] : null;
                            }
                        };
                        ISortingOptions.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new ISortingOptions();
                            result.init(data);
                            return result;
                        };
                        ISortingOptions.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["SortDescending"] = this.SortDescending !== undefined ? this.SortDescending : null;
                            data["SortExpression"] = this.SortExpression !== undefined ? this.SortExpression : null;
                            return data;
                        };
                        return ISortingOptions;
                    }());
                    AspNetCore.ISortingOptions = ISortingOptions;
                    var GridViewDataSetOfCompanyOfBoolean = /** @class */ (function () {
                        function GridViewDataSetOfCompanyOfBoolean(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        GridViewDataSetOfCompanyOfBoolean.prototype.init = function (data) {
                            if (data) {
                                this.IsRefreshRequired = data["IsRefreshRequired"] !== undefined ? data["IsRefreshRequired"] : null;
                                if (data["Items"] && data["Items"].constructor === Array) {
                                    this.Items = [];
                                    for (var _i = 0, _a = data["Items"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.Items.push(CompanyOfBoolean.fromJS(item));
                                    }
                                }
                                this.PagingOptions = data["PagingOptions"] ? IPagingOptions.fromJS(data["PagingOptions"]) : null;
                                this.RowEditOptions = data["RowEditOptions"] ? IRowEditOptions.fromJS(data["RowEditOptions"]) : null;
                                this.SortingOptions = data["SortingOptions"] ? ISortingOptions.fromJS(data["SortingOptions"]) : null;
                            }
                        };
                        GridViewDataSetOfCompanyOfBoolean.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new GridViewDataSetOfCompanyOfBoolean();
                            result.init(data);
                            return result;
                        };
                        GridViewDataSetOfCompanyOfBoolean.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["IsRefreshRequired"] = this.IsRefreshRequired !== undefined ? this.IsRefreshRequired : null;
                            if (this.Items && this.Items.constructor === Array) {
                                data["Items"] = [];
                                for (var _i = 0, _a = this.Items; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["Items"].push(item.toJSON());
                                }
                            }
                            data["PagingOptions"] = this.PagingOptions ? this.PagingOptions.toJSON() : null;
                            data["RowEditOptions"] = this.RowEditOptions ? this.RowEditOptions.toJSON() : null;
                            data["SortingOptions"] = this.SortingOptions ? this.SortingOptions.toJSON() : null;
                            return data;
                        };
                        return GridViewDataSetOfCompanyOfBoolean;
                    }());
                    AspNetCore.GridViewDataSetOfCompanyOfBoolean = GridViewDataSetOfCompanyOfBoolean;
                    var GridViewDataSetOfCompanyOfString = /** @class */ (function () {
                        function GridViewDataSetOfCompanyOfString(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        GridViewDataSetOfCompanyOfString.prototype.init = function (data) {
                            if (data) {
                                this.IsRefreshRequired = data["IsRefreshRequired"] !== undefined ? data["IsRefreshRequired"] : null;
                                if (data["Items"] && data["Items"].constructor === Array) {
                                    this.Items = [];
                                    for (var _i = 0, _a = data["Items"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.Items.push(CompanyOfString.fromJS(item));
                                    }
                                }
                                this.PagingOptions = data["PagingOptions"] ? IPagingOptions.fromJS(data["PagingOptions"]) : null;
                                this.RowEditOptions = data["RowEditOptions"] ? IRowEditOptions.fromJS(data["RowEditOptions"]) : null;
                                this.SortingOptions = data["SortingOptions"] ? ISortingOptions.fromJS(data["SortingOptions"]) : null;
                            }
                        };
                        GridViewDataSetOfCompanyOfString.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new GridViewDataSetOfCompanyOfString();
                            result.init(data);
                            return result;
                        };
                        GridViewDataSetOfCompanyOfString.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["IsRefreshRequired"] = this.IsRefreshRequired !== undefined ? this.IsRefreshRequired : null;
                            if (this.Items && this.Items.constructor === Array) {
                                data["Items"] = [];
                                for (var _i = 0, _a = this.Items; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["Items"].push(item.toJSON());
                                }
                            }
                            data["PagingOptions"] = this.PagingOptions ? this.PagingOptions.toJSON() : null;
                            data["RowEditOptions"] = this.RowEditOptions ? this.RowEditOptions.toJSON() : null;
                            data["SortingOptions"] = this.SortingOptions ? this.SortingOptions.toJSON() : null;
                            return data;
                        };
                        return GridViewDataSetOfCompanyOfString;
                    }());
                    AspNetCore.GridViewDataSetOfCompanyOfString = GridViewDataSetOfCompanyOfString;
                    var OrderItem = /** @class */ (function () {
                        function OrderItem(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        OrderItem.prototype.init = function (data) {
                            if (data) {
                                this.Id = data["Id"] !== undefined ? data["Id"] : null;
                                this.Text = data["Text"] !== undefined ? data["Text"] : null;
                                this.Amount = data["Amount"] !== undefined ? data["Amount"] : null;
                                this.Discount = data["Discount"] !== undefined ? data["Discount"] : null;
                                this.IsOnStock = data["IsOnStock"] !== undefined ? data["IsOnStock"] : null;
                            }
                        };
                        OrderItem.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new OrderItem();
                            result.init(data);
                            return result;
                        };
                        OrderItem.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.Id !== undefined ? this.Id : null;
                            data["Text"] = this.Text !== undefined ? this.Text : null;
                            data["Amount"] = this.Amount !== undefined ? this.Amount : null;
                            data["Discount"] = this.Discount !== undefined ? this.Discount : null;
                            data["IsOnStock"] = this.IsOnStock !== undefined ? this.IsOnStock : null;
                            return data;
                        };
                        return OrderItem;
                    }());
                    AspNetCore.OrderItem = OrderItem;
                    var Order = /** @class */ (function () {
                        function Order(data) {
                            if (data) {
                                for (var property in data) {
                                    if (data.hasOwnProperty(property))
                                        this[property] = data[property];
                                }
                            }
                        }
                        Order.prototype.init = function (data) {
                            if (data) {
                                this.Id = data["Id"] !== undefined ? data["Id"] : null;
                                this.Number = data["Number"] !== undefined ? data["Number"] : null;
                                this.Date = data["Date"] ? new Date(data["Date"].toString()) : null;
                                this.CompanyId = data["CompanyId"] !== undefined ? data["CompanyId"] : null;
                                if (data["OrderItems"] && data["OrderItems"].constructor === Array) {
                                    this.OrderItems = [];
                                    for (var _i = 0, _a = data["OrderItems"]; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        this.OrderItems.push(OrderItem.fromJS(item));
                                    }
                                }
                            }
                        };
                        Order.fromJS = function (data) {
                            data = typeof data === 'object' ? data : {};
                            var result = new Order();
                            result.init(data);
                            return result;
                        };
                        Order.prototype.toJSON = function (data) {
                            data = typeof data === 'object' ? data : {};
                            data["Id"] = this.Id !== undefined ? this.Id : null;
                            data["Number"] = this.Number !== undefined ? this.Number : null;
                            data["Date"] = this.Date ? this.Date.toISOString() : null;
                            data["CompanyId"] = this.CompanyId !== undefined ? this.CompanyId : null;
                            if (this.OrderItems && this.OrderItems.constructor === Array) {
                                data["OrderItems"] = [];
                                for (var _i = 0, _a = this.OrderItems; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    data["OrderItems"].push(item.toJSON());
                                }
                            }
                            return data;
                        };
                        return Order;
                    }());
                    AspNetCore.Order = Order;
                    var SwaggerException = /** @class */ (function (_super) {
                        __extends(SwaggerException, _super);
                        function SwaggerException(message, status, response, headers, result) {
                            var _this = _super.call(this) || this;
                            _this.isSwaggerException = true;
                            _this.message = message;
                            _this.status = status;
                            _this.response = response;
                            _this.headers = headers;
                            _this.result = result;
                            return _this;
                        }
                        SwaggerException.isSwaggerException = function (obj) {
                            return obj.isSwaggerException === true;
                        };
                        return SwaggerException;
                    }(Error));
                    AspNetCore.SwaggerException = SwaggerException;
                    function throwException(message, status, response, headers, result) {
                        if (result !== null && result !== undefined)
                            throw result;
                        else
                            throw new SwaggerException(message, status, response, headers, null);
                    }
                })(AspNetCore = Api.AspNetCore || (Api.AspNetCore = {}));
            })(Api = Common.Api || (Common.Api = {}));
        })(Common = Samples.Common || (Samples.Common = {}));
    })(Samples = DotVVM.Samples || (DotVVM.Samples = {}));
})(DotVVM || (DotVVM = {}));
