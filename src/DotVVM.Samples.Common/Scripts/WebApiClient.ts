namespace WebApiClient {
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    
    export class CountriesClient {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "http://localhost:60142";
        }
    
        getCountries(): Promise<Country[]> {
            let url_ = this.baseUrl + "/api/Countries";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetCountries(_response);
            });
        }
    
        protected processGetCountries(response: Response): Promise<Country[]> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Country[] = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Country.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Country[]>(<any>null);
        }
    
        getCountry(id: number): Promise<Country> {
            let url_ = this.baseUrl + "/api/Countries/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetCountry(_response);
            });
        }
    
        protected processGetCountry(response: Response): Promise<Country> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Country = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Country.fromJS(resultData200) : <any>null;
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Country>(<any>null);
        }
    }
    
    export class ValuesClient {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "http://localhost:60142";
        }
    
        getAll(): Promise<Data[]> {
            let url_ = this.baseUrl + "/api/Values";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetAll(_response);
            });
        }
    
        protected processGetAll(response: Response): Promise<Data[]> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: Data[] = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Data.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<Data[]>(<any>null);
        }
    
        post(value: string): Promise<void> {
            let url_ = this.baseUrl + "/api/Values";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(value);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPost(_response);
            });
        }
    
        protected processPost(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        get(id: number): Promise<string> {
            let url_ = this.baseUrl + "/api/Values/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGet(_response);
            });
        }
    
        protected processGet(response: Response): Promise<string> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: string = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<string>(<any>null);
        }
    
        put(id: number, value: string): Promise<void> {
            let url_ = this.baseUrl + "/api/Values/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(value);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPut(_response);
            });
        }
    
        protected processPut(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        delete(id: number): Promise<void> {
            let url_ = this.baseUrl + "/api/Values/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processDelete(_response);
            });
        }
    
        protected processDelete(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    }
    
    export class Country implements ICountry {
        name?: string;
        region?: Region[];
    
        constructor(data?: ICountry) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.name = data["name"] !== undefined ? data["name"] : <any>null;
                if (data["region"] && data["region"].constructor === Array) {
                    this.region = [];
                    for (let item of data["region"])
                        this.region.push(Region.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): Country {
            let result = new Country();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.name !== undefined ? this.name : <any>null;
            if (this.region && this.region.constructor === Array) {
                data["region"] = [];
                for (let item of this.region)
                    data["region"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface ICountry {
        name?: string;
        region?: Region[];
    }
    
    export class Region implements IRegion {
        id: number;
        name?: string;
    
        constructor(data?: IRegion) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : <any>null;
                this.name = data["name"] !== undefined ? data["name"] : <any>null;
            }
        }
    
        static fromJS(data: any): Region {
            let result = new Region();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : <any>null;
            data["name"] = this.name !== undefined ? this.name : <any>null;
            return data; 
        }
    }
    
    export interface IRegion {
        id: number;
        name?: string;
    }
    
    export class Data implements IData {
        value?: string;
    
        constructor(data?: IData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.value = data["value"] !== undefined ? data["value"] : <any>null;
            }
        }
    
        static fromJS(data: any): Data {
            let result = new Data();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["value"] = this.value !== undefined ? this.value : <any>null;
            return data; 
        }
    }
    
    export interface IData {
        value?: string;
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        result: any; 
    
        constructor(message: string, status: number, response: string, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.result = result;
        }
    }
    
    function throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
