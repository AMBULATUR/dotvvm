namespace DotVVM.Samples.Common.Api.Owin {
    class ClientBase {
        public transformOptions(options: RequestInit) {
            options.credentials = "same-origin";
            return Promise.resolve(options);
        }
    }
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    export class CompaniesClient extends ClientBase {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            super();
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "http://localhost:61453";
        }
    
        /**
         * @return OK
         */
        get(): Promise<Company[]> {
            let url_ = this.baseUrl + "/api/companies";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGet(_response);
            });
        }
    
        protected processGet(response: Response): Promise<Company[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Company.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<Company[]>(<any>null);
        }
    
        /**
         * @sortingOptions (optional) 
         * @sortingOptions_SortDescending (optional) 
         * @sortingOptions_SortExpression (optional) 
         * @return OK
         */
        getWithSorting(sortingOptions?: any): Promise<GridViewDataSetOfCompany> {
            let sortingOptions_SortDescending = sortingOptions !== undefined ? sortingOptions.SortDescending : sortingOptions;
            let sortingOptions_SortExpression = sortingOptions !== undefined ? sortingOptions.SortExpression : sortingOptions;
            let url_ = this.baseUrl + "/api/companies/sorted?";
            if (sortingOptions !== undefined)
                url_ += "sortingOptions=" + encodeURIComponent("" + sortingOptions) + "&"; 
            if (sortingOptions_SortDescending !== undefined)
                url_ += "sortingOptions.SortDescending=" + encodeURIComponent("" + sortingOptions_SortDescending) + "&"; 
            if (sortingOptions_SortExpression !== undefined)
                url_ += "sortingOptions.SortExpression=" + encodeURIComponent("" + sortingOptions_SortExpression) + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetWithSorting(_response);
            });
        }
    
        protected processGetWithSorting(response: Response): Promise<GridViewDataSetOfCompany> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? GridViewDataSetOfCompany.fromJS(resultData200) : new GridViewDataSetOfCompany();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<GridViewDataSetOfCompany>(<any>null);
        }
    
        /**
         * @pagingOptions (optional) 
         * @pagingOptions_PageIndex (optional) 
         * @pagingOptions_PageSize (optional) 
         * @pagingOptions_TotalItemsCount (optional) 
         * @return OK
         */
        getWithPaging(pagingOptions?: any): Promise<GridViewDataSetOfCompany> {
            let pagingOptions_PageIndex = pagingOptions !== undefined ? pagingOptions.PageIndex : pagingOptions;
            let pagingOptions_PageSize = pagingOptions !== undefined ? pagingOptions.PageSize : pagingOptions;
            let pagingOptions_TotalItemsCount = pagingOptions !== undefined ? pagingOptions.TotalItemsCount : pagingOptions;
            let url_ = this.baseUrl + "/api/companies/paged?";
            if (pagingOptions !== undefined)
                url_ += "pagingOptions=" + encodeURIComponent("" + pagingOptions) + "&"; 
            if (pagingOptions_PageIndex !== undefined)
                url_ += "pagingOptions.PageIndex=" + encodeURIComponent("" + pagingOptions_PageIndex) + "&"; 
            if (pagingOptions_PageSize !== undefined)
                url_ += "pagingOptions.PageSize=" + encodeURIComponent("" + pagingOptions_PageSize) + "&"; 
            if (pagingOptions_TotalItemsCount !== undefined)
                url_ += "pagingOptions.TotalItemsCount=" + encodeURIComponent("" + pagingOptions_TotalItemsCount) + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetWithPaging(_response);
            });
        }
    
        protected processGetWithPaging(response: Response): Promise<GridViewDataSetOfCompany> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? GridViewDataSetOfCompany.fromJS(resultData200) : new GridViewDataSetOfCompany();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<GridViewDataSetOfCompany>(<any>null);
        }
    
        /**
         * @sortingOptions (optional) 
         * @sortingOptions_SortDescending (optional) 
         * @sortingOptions_SortExpression (optional) 
         * @pagingOptions (optional) 
         * @pagingOptions_PageIndex (optional) 
         * @pagingOptions_PageSize (optional) 
         * @pagingOptions_TotalItemsCount (optional) 
         * @return OK
         */
        getWithSortingAndPaging(sortingOptions?: any, pagingOptions?: any): Promise<GridViewDataSetOfCompany> {
            let sortingOptions_SortDescending = sortingOptions !== undefined ? sortingOptions.SortDescending : sortingOptions;
            let sortingOptions_SortExpression = sortingOptions !== undefined ? sortingOptions.SortExpression : sortingOptions;
            let pagingOptions_PageIndex = pagingOptions !== undefined ? pagingOptions.PageIndex : pagingOptions;
            let pagingOptions_PageSize = pagingOptions !== undefined ? pagingOptions.PageSize : pagingOptions;
            let pagingOptions_TotalItemsCount = pagingOptions !== undefined ? pagingOptions.TotalItemsCount : pagingOptions;
            let url_ = this.baseUrl + "/api/companies/sortedandpaged?";
            if (sortingOptions !== undefined)
                url_ += "sortingOptions=" + encodeURIComponent("" + sortingOptions) + "&"; 
            if (sortingOptions_SortDescending !== undefined)
                url_ += "sortingOptions.SortDescending=" + encodeURIComponent("" + sortingOptions_SortDescending) + "&"; 
            if (sortingOptions_SortExpression !== undefined)
                url_ += "sortingOptions.SortExpression=" + encodeURIComponent("" + sortingOptions_SortExpression) + "&"; 
            if (pagingOptions !== undefined)
                url_ += "pagingOptions=" + encodeURIComponent("" + pagingOptions) + "&"; 
            if (pagingOptions_PageIndex !== undefined)
                url_ += "pagingOptions.PageIndex=" + encodeURIComponent("" + pagingOptions_PageIndex) + "&"; 
            if (pagingOptions_PageSize !== undefined)
                url_ += "pagingOptions.PageSize=" + encodeURIComponent("" + pagingOptions_PageSize) + "&"; 
            if (pagingOptions_TotalItemsCount !== undefined)
                url_ += "pagingOptions.TotalItemsCount=" + encodeURIComponent("" + pagingOptions_TotalItemsCount) + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetWithSortingAndPaging(_response);
            });
        }
    
        protected processGetWithSortingAndPaging(response: Response): Promise<GridViewDataSetOfCompany> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? GridViewDataSetOfCompany.fromJS(resultData200) : new GridViewDataSetOfCompany();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<GridViewDataSetOfCompany>(<any>null);
        }
    }
    
    export class OrdersClient extends ClientBase {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            super();
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "http://localhost:61453";
        }
    
        /**
         * @pageIndex (optional) 
         * @pageSize (optional) 
         * @return OK
         */
        get(companyId: number, pageIndex?: number, pageSize?: number): Promise<Order[]> {
            let url_ = this.baseUrl + "/api/orders?";
            if (companyId === undefined || companyId === null)
                throw new Error("The parameter 'companyId' must be defined and cannot be null.");
            else
                url_ += "companyId=" + encodeURIComponent("" + companyId) + "&"; 
            if (pageIndex !== undefined)
                url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
            if (pageSize !== undefined)
                url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGet(_response);
            });
        }
    
        protected processGet(response: Response): Promise<Order[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Order.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<Order[]>(<any>null);
        }
    
        /**
         * @return OK
         */
        post(order: Order): Promise<any> {
            let url_ = this.baseUrl + "/api/orders";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(order);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processPost(_response);
            });
        }
    
        protected processPost(response: Response): Promise<any> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200) {
                    result200 = {};
                    for (let key in resultData200) {
                        if (resultData200.hasOwnProperty(key))
                            result200[key] = resultData200[key];
                    }
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<any>(<any>null);
        }
    
        /**
         * @return OK
         */
        getItem(orderId: number): Promise<Order> {
            let url_ = this.baseUrl + "/api/orders/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetItem(_response);
            });
        }
    
        protected processGetItem(response: Response): Promise<Order> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<Order>(<any>null);
        }
    
        /**
         * @return OK
         */
        put(orderId: number, order: Order): Promise<any> {
            let url_ = this.baseUrl + "/api/orders/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(order);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processPut(_response);
            });
        }
    
        protected processPut(response: Response): Promise<any> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200) {
                    result200 = {};
                    for (let key in resultData200) {
                        if (resultData200.hasOwnProperty(key))
                            result200[key] = resultData200[key];
                    }
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<any>(<any>null);
        }
    
        /**
         * @return No Content
         */
        delete(orderId: number): Promise<void> {
            let url_ = this.baseUrl + "/api/orders/delete/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "DELETE",
                headers: new Headers({
                    "Content-Type": "application/json", 
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processDelete(_response);
            });
        }
    
        protected processDelete(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 204) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    }
    
    export class Company implements ICompany {
        id?: number;
        name?: string;
        owner?: string;
    
        constructor(data?: ICompany) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
                this.owner = data["Owner"] !== undefined ? data["Owner"] : <any>null;
            }
        }
    
        static fromJS(data: any): Company {
            let result = new Company();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Name"] = this.name !== undefined ? this.name : <any>null;
            data["Owner"] = this.owner !== undefined ? this.owner : <any>null;
            return data; 
        }
    }
    
    export interface ICompany {
        id?: number;
        name?: string;
        owner?: string;
    }
    
    export class SortingOptions implements ISortingOptions {
        sortDescending?: boolean;
        sortExpression?: string;
    
        constructor(data?: ISortingOptions) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.sortDescending = data["SortDescending"] !== undefined ? data["SortDescending"] : <any>null;
                this.sortExpression = data["SortExpression"] !== undefined ? data["SortExpression"] : <any>null;
            }
        }
    
        static fromJS(data: any): SortingOptions {
            let result = new SortingOptions();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["SortDescending"] = this.sortDescending !== undefined ? this.sortDescending : <any>null;
            data["SortExpression"] = this.sortExpression !== undefined ? this.sortExpression : <any>null;
            return data; 
        }
    }
    
    export interface ISortingOptions {
        sortDescending?: boolean;
        sortExpression?: string;
    }
    
    export class GridViewDataSetOfCompany implements IGridViewDataSetOfCompany {
        isRefreshRequired?: boolean;
        items?: Company[];
        pagingOptions?: IPagingOptions;
        rowEditOptions?: IRowEditOptions;
        sortingOptions?: ISortingOptions;
    
        constructor(data?: IGridViewDataSetOfCompany) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.isRefreshRequired = data["IsRefreshRequired"] !== undefined ? data["IsRefreshRequired"] : <any>null;
                if (data["Items"] && data["Items"].constructor === Array) {
                    this.items = [];
                    for (let item of data["Items"])
                        this.items.push(Company.fromJS(item));
                }
                this.pagingOptions = data["PagingOptions"] ? IPagingOptions.fromJS(data["PagingOptions"]) : <any>null;
                this.rowEditOptions = data["RowEditOptions"] ? IRowEditOptions.fromJS(data["RowEditOptions"]) : <any>null;
                this.sortingOptions = data["SortingOptions"] ? ISortingOptions.fromJS(data["SortingOptions"]) : <any>null;
            }
        }
    
        static fromJS(data: any): GridViewDataSetOfCompany {
            let result = new GridViewDataSetOfCompany();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["IsRefreshRequired"] = this.isRefreshRequired !== undefined ? this.isRefreshRequired : <any>null;
            if (this.items && this.items.constructor === Array) {
                data["Items"] = [];
                for (let item of this.items)
                    data["Items"].push(item.toJSON());
            }
            data["PagingOptions"] = this.pagingOptions ? this.pagingOptions.toJSON() : <any>null;
            data["RowEditOptions"] = this.rowEditOptions ? this.rowEditOptions.toJSON() : <any>null;
            data["SortingOptions"] = this.sortingOptions ? this.sortingOptions.toJSON() : <any>null;
            return data; 
        }
    }
    
    export interface IGridViewDataSetOfCompany {
        isRefreshRequired?: boolean;
        items?: Company[];
        pagingOptions?: IPagingOptions;
        rowEditOptions?: IRowEditOptions;
        sortingOptions?: ISortingOptions;
    }
    
    export class IPagingOptions implements IIPagingOptions {
        pageIndex?: number;
        pageSize?: number;
        totalItemsCount?: number;
        isFirstPage?: boolean;
        isLastPage?: boolean;
        pagesCount?: number;
        nearPageIndexes?: number[];
    
        constructor(data?: IIPagingOptions) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.pageIndex = data["PageIndex"] !== undefined ? data["PageIndex"] : <any>null;
                this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : <any>null;
                this.totalItemsCount = data["TotalItemsCount"] !== undefined ? data["TotalItemsCount"] : <any>null;
                this.isFirstPage = data["IsFirstPage"] !== undefined ? data["IsFirstPage"] : <any>null;
                this.isLastPage = data["IsLastPage"] !== undefined ? data["IsLastPage"] : <any>null;
                this.pagesCount = data["PagesCount"] !== undefined ? data["PagesCount"] : <any>null;
                if (data["NearPageIndexes"] && data["NearPageIndexes"].constructor === Array) {
                    this.nearPageIndexes = [];
                    for (let item of data["NearPageIndexes"])
                        this.nearPageIndexes.push(item);
                }
            }
        }
    
        static fromJS(data: any): IPagingOptions {
            let result = new IPagingOptions();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["PageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
            data["PageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
            data["TotalItemsCount"] = this.totalItemsCount !== undefined ? this.totalItemsCount : <any>null;
            data["IsFirstPage"] = this.isFirstPage !== undefined ? this.isFirstPage : <any>null;
            data["IsLastPage"] = this.isLastPage !== undefined ? this.isLastPage : <any>null;
            data["PagesCount"] = this.pagesCount !== undefined ? this.pagesCount : <any>null;
            if (this.nearPageIndexes && this.nearPageIndexes.constructor === Array) {
                data["NearPageIndexes"] = [];
                for (let item of this.nearPageIndexes)
                    data["NearPageIndexes"].push(item);
            }
            return data; 
        }
    }
    
    export interface IIPagingOptions {
        pageIndex?: number;
        pageSize?: number;
        totalItemsCount?: number;
        isFirstPage?: boolean;
        isLastPage?: boolean;
        pagesCount?: number;
        nearPageIndexes?: number[];
    }
    
    export class IRowEditOptions implements IIRowEditOptions {
        primaryKeyPropertyName?: string;
        editRowId?: any;
    
        constructor(data?: IIRowEditOptions) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.primaryKeyPropertyName = data["PrimaryKeyPropertyName"] !== undefined ? data["PrimaryKeyPropertyName"] : <any>null;
                if (data["EditRowId"]) {
                    this.editRowId = {};
                    for (let key in data["EditRowId"]) {
                        if (data["EditRowId"].hasOwnProperty(key))
                            this.editRowId[key] = data["EditRowId"][key];
                    }
                }
            }
        }
    
        static fromJS(data: any): IRowEditOptions {
            let result = new IRowEditOptions();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["PrimaryKeyPropertyName"] = this.primaryKeyPropertyName !== undefined ? this.primaryKeyPropertyName : <any>null;
            if (this.editRowId) {
                data["EditRowId"] = {};
                for (let key in this.editRowId) {
                    if (this.editRowId.hasOwnProperty(key))
                        data["EditRowId"][key] = this.editRowId[key] !== undefined ? this.editRowId[key] : <any>null;
                }
            }
            return data; 
        }
    }
    
    export interface IIRowEditOptions {
        primaryKeyPropertyName?: string;
        editRowId?: any;
    }
    
    export class ISortingOptions implements IISortingOptions {
        sortDescending?: boolean;
        sortExpression?: string;
    
        constructor(data?: IISortingOptions) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.sortDescending = data["SortDescending"] !== undefined ? data["SortDescending"] : <any>null;
                this.sortExpression = data["SortExpression"] !== undefined ? data["SortExpression"] : <any>null;
            }
        }
    
        static fromJS(data: any): ISortingOptions {
            let result = new ISortingOptions();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["SortDescending"] = this.sortDescending !== undefined ? this.sortDescending : <any>null;
            data["SortExpression"] = this.sortExpression !== undefined ? this.sortExpression : <any>null;
            return data; 
        }
    }
    
    export interface IISortingOptions {
        sortDescending?: boolean;
        sortExpression?: string;
    }
    
    export class PagingOptions implements IPagingOptions {
        nearPageIndexesProvider?: any;
        isFirstPage?: boolean;
        isLastPage?: boolean;
        pagesCount?: number;
        pageIndex?: number;
        pageSize?: number;
        totalItemsCount?: number;
        nearPageIndexes?: number[];
    
        constructor(data?: IPagingOptions) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                if (data["NearPageIndexesProvider"]) {
                    this.nearPageIndexesProvider = {};
                    for (let key in data["NearPageIndexesProvider"]) {
                        if (data["NearPageIndexesProvider"].hasOwnProperty(key))
                            this.nearPageIndexesProvider[key] = data["NearPageIndexesProvider"][key];
                    }
                }
                this.isFirstPage = data["IsFirstPage"] !== undefined ? data["IsFirstPage"] : <any>null;
                this.isLastPage = data["IsLastPage"] !== undefined ? data["IsLastPage"] : <any>null;
                this.pagesCount = data["PagesCount"] !== undefined ? data["PagesCount"] : <any>null;
                this.pageIndex = data["PageIndex"] !== undefined ? data["PageIndex"] : <any>null;
                this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : <any>null;
                this.totalItemsCount = data["TotalItemsCount"] !== undefined ? data["TotalItemsCount"] : <any>null;
                if (data["NearPageIndexes"] && data["NearPageIndexes"].constructor === Array) {
                    this.nearPageIndexes = [];
                    for (let item of data["NearPageIndexes"])
                        this.nearPageIndexes.push(item);
                }
            }
        }
    
        static fromJS(data: any): PagingOptions {
            let result = new PagingOptions();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            if (this.nearPageIndexesProvider) {
                data["NearPageIndexesProvider"] = {};
                for (let key in this.nearPageIndexesProvider) {
                    if (this.nearPageIndexesProvider.hasOwnProperty(key))
                        data["NearPageIndexesProvider"][key] = this.nearPageIndexesProvider[key] !== undefined ? this.nearPageIndexesProvider[key] : <any>null;
                }
            }
            data["IsFirstPage"] = this.isFirstPage !== undefined ? this.isFirstPage : <any>null;
            data["IsLastPage"] = this.isLastPage !== undefined ? this.isLastPage : <any>null;
            data["PagesCount"] = this.pagesCount !== undefined ? this.pagesCount : <any>null;
            data["PageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
            data["PageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
            data["TotalItemsCount"] = this.totalItemsCount !== undefined ? this.totalItemsCount : <any>null;
            if (this.nearPageIndexes && this.nearPageIndexes.constructor === Array) {
                data["NearPageIndexes"] = [];
                for (let item of this.nearPageIndexes)
                    data["NearPageIndexes"].push(item);
            }
            return data; 
        }
    }
    
    export interface IPagingOptions {
        nearPageIndexesProvider?: any;
        isFirstPage?: boolean;
        isLastPage?: boolean;
        pagesCount?: number;
        pageIndex?: number;
        pageSize?: number;
        totalItemsCount?: number;
        nearPageIndexes?: number[];
    }
    
    export class Order implements IOrder {
        id?: number;
        number?: string;
        date?: Date;
        companyId?: number;
        orderItems?: OrderItem[];
    
        constructor(data?: IOrder) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.number = data["Number"] !== undefined ? data["Number"] : <any>null;
                this.date = data["Date"] ? new Date(data["Date"].toString()) : <any>null;
                this.companyId = data["CompanyId"] !== undefined ? data["CompanyId"] : <any>null;
                if (data["OrderItems"] && data["OrderItems"].constructor === Array) {
                    this.orderItems = [];
                    for (let item of data["OrderItems"])
                        this.orderItems.push(OrderItem.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): Order {
            let result = new Order();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Number"] = this.number !== undefined ? this.number : <any>null;
            data["Date"] = this.date ? this.date.toISOString() : <any>null;
            data["CompanyId"] = this.companyId !== undefined ? this.companyId : <any>null;
            if (this.orderItems && this.orderItems.constructor === Array) {
                data["OrderItems"] = [];
                for (let item of this.orderItems)
                    data["OrderItems"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface IOrder {
        id?: number;
        number?: string;
        date?: Date;
        companyId?: number;
        orderItems?: OrderItem[];
    }
    
    export class OrderItem implements IOrderItem {
        id?: number;
        text?: string;
        amount?: number;
        discount?: number;
        isOnStock?: boolean;
    
        constructor(data?: IOrderItem) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
                this.text = data["Text"] !== undefined ? data["Text"] : <any>null;
                this.amount = data["Amount"] !== undefined ? data["Amount"] : <any>null;
                this.discount = data["Discount"] !== undefined ? data["Discount"] : <any>null;
                this.isOnStock = data["IsOnStock"] !== undefined ? data["IsOnStock"] : <any>null;
            }
        }
    
        static fromJS(data: any): OrderItem {
            let result = new OrderItem();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : <any>null;
            data["Text"] = this.text !== undefined ? this.text : <any>null;
            data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
            data["Discount"] = this.discount !== undefined ? this.discount : <any>null;
            data["IsOnStock"] = this.isOnStock !== undefined ? this.isOnStock : <any>null;
            return data; 
        }
    }
    
    export interface IOrderItem {
        id?: number;
        text?: string;
        amount?: number;
        discount?: number;
        isOnStock?: boolean;
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        headers: { [key: string]: any; };
        result: any; 
    
        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
    
        protected isSwaggerException = true;
    
        static isSwaggerException(obj: any): obj is SwaggerException {
            return obj.isSwaggerException === true;
        }
    }
    
    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
}
