// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Redwood.Samples.Tests.Sample1UIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class Sample1UIMap
    {
        
        /// <summary>
        /// AddTask - Use 'AddTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddTask()
        {
            #region Variable Declarations
            HtmlEdit uIItemEdit = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodDocument.UIItemEdit;
            HtmlInputButton uICreateButton = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodDocument.UICreateButton;
            #endregion

            // Type 'ASP.NET Rocks!!!' in text box
            uIItemEdit.Text = this.AddTaskParams.UIItemEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(39, 16));
        }
        
        /// <summary>
        /// CloseBrowser
        /// </summary>
        public void CloseBrowser()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodInteTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 10));
        }
        
        /// <summary>
        /// FinishFirstTask
        /// </summary>
        public void FinishFirstTask()
        {
            #region Variable Declarations
            HtmlHyperlink uIDoneHyperlink2 = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodDocument.UIDoneHyperlink2;
            #endregion

            // Click 'done' link
            Mouse.Click(uIDoneHyperlink2, new Point(19, 5));
        }
        
        /// <summary>
        /// FinishLastTask
        /// </summary>
        public void FinishLastTask()
        {
            #region Variable Declarations
            HtmlHyperlink uIDoneHyperlink = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodDocument.UIDoneHyperlink;
            #endregion

            // Click 'done' link
            Mouse.Click(uIDoneHyperlink, new Point(6, 7));
        }
        
        /// <summary>
        /// LaunchSample - Use 'LaunchSampleParams' to pass parameters into this method.
        /// </summary>
        public void LaunchSample()
        {
            #region Variable Declarations
            BrowserWindow uIRedwoodSamplesHomePaWindow = this.UIRedwoodSamplesHomePaWindow;
            HtmlHyperlink uISample1TaskListHyperlink = this.UIRedwoodSamplesHomePaWindow.UIRedwoodSamplesHomePaDocument.UISample1TaskListHyperlink;
            #endregion

            // Go to web page 'http://localhost:8628/' using new browser instance
            this.UIRedwoodSamplesHomePaWindow.LaunchUrl(new System.Uri(this.LaunchSampleParams.UIRedwoodSamplesHomePaWindowUrl));

            // Maximize window 'Redwood Samples HomePage - Internet Explorer'
            uIRedwoodSamplesHomePaWindow.Maximized = this.LaunchSampleParams.UIRedwoodSamplesHomePaWindowMaximized;

            // Click 'Sample 1 - Task List' link
            Mouse.Click(uISample1TaskListHyperlink, new Point(69, 7));
        }
        
        /// <summary>
        /// VerifyFirstTaskFinished - Use 'VerifyFirstTaskFinishedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyFirstTaskFinished()
        {
            #region Variable Declarations
            HtmlRow uIItemRow = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodDocument.UIItemTable.UIItemRow;
            #endregion

            // Verify that the 'Class' property of row equals 'completed'
            Assert.AreEqual(this.VerifyFirstTaskFinishedExpectedValues.UIItemRowClass, uIItemRow.Class);
        }
        
        /// <summary>
        /// VerifyLastTaskFinished - Use 'VerifyLastTaskFinishedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyLastTaskFinished()
        {
            #region Variable Declarations
            HtmlHyperlink uIDoneHyperlink1 = this.UIHellofromRedwoodInteWindow.UIHellofromRedwoodDocument.UIDoneHyperlink1;
            #endregion

            // Verify that the 'ControlDefinition' property of 'done' link contains 'display: none'
            StringAssert.Contains(uIDoneHyperlink1.ControlDefinition, this.VerifyLastTaskFinishedExpectedValues.UIDoneHyperlink1ControlDefinition);
        }
        
        #region Properties
        public virtual AddTaskParams AddTaskParams
        {
            get
            {
                if ((this.mAddTaskParams == null))
                {
                    this.mAddTaskParams = new AddTaskParams();
                }
                return this.mAddTaskParams;
            }
        }
        
        public virtual LaunchSampleParams LaunchSampleParams
        {
            get
            {
                if ((this.mLaunchSampleParams == null))
                {
                    this.mLaunchSampleParams = new LaunchSampleParams();
                }
                return this.mLaunchSampleParams;
            }
        }
        
        public virtual VerifyFirstTaskFinishedExpectedValues VerifyFirstTaskFinishedExpectedValues
        {
            get
            {
                if ((this.mVerifyFirstTaskFinishedExpectedValues == null))
                {
                    this.mVerifyFirstTaskFinishedExpectedValues = new VerifyFirstTaskFinishedExpectedValues();
                }
                return this.mVerifyFirstTaskFinishedExpectedValues;
            }
        }
        
        public virtual VerifyLastTaskFinishedExpectedValues VerifyLastTaskFinishedExpectedValues
        {
            get
            {
                if ((this.mVerifyLastTaskFinishedExpectedValues == null))
                {
                    this.mVerifyLastTaskFinishedExpectedValues = new VerifyLastTaskFinishedExpectedValues();
                }
                return this.mVerifyLastTaskFinishedExpectedValues;
            }
        }
        
        public UIRedwoodSamplesHomePaWindow UIRedwoodSamplesHomePaWindow
        {
            get
            {
                if ((this.mUIRedwoodSamplesHomePaWindow == null))
                {
                    this.mUIRedwoodSamplesHomePaWindow = new UIRedwoodSamplesHomePaWindow();
                }
                return this.mUIRedwoodSamplesHomePaWindow;
            }
        }
        
        public UIHellofromRedwoodInteWindow UIHellofromRedwoodInteWindow
        {
            get
            {
                if ((this.mUIHellofromRedwoodInteWindow == null))
                {
                    this.mUIHellofromRedwoodInteWindow = new UIHellofromRedwoodInteWindow();
                }
                return this.mUIHellofromRedwoodInteWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddTaskParams mAddTaskParams;
        
        private LaunchSampleParams mLaunchSampleParams;
        
        private VerifyFirstTaskFinishedExpectedValues mVerifyFirstTaskFinishedExpectedValues;
        
        private VerifyLastTaskFinishedExpectedValues mVerifyLastTaskFinishedExpectedValues;
        
        private UIRedwoodSamplesHomePaWindow mUIRedwoodSamplesHomePaWindow;
        
        private UIHellofromRedwoodInteWindow mUIHellofromRedwoodInteWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AddTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'ASP.NET Rocks!!!' in text box
        /// </summary>
        public string UIItemEditText = "ASP.NET Rocks!!!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LaunchSample'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LaunchSampleParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:8628/' using new browser instance
        /// </summary>
        public string UIRedwoodSamplesHomePaWindowUrl = "http://localhost:8628/";
        
        /// <summary>
        /// Maximize window 'Redwood Samples HomePage - Internet Explorer'
        /// </summary>
        public bool UIRedwoodSamplesHomePaWindowMaximized = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyFirstTaskFinished'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class VerifyFirstTaskFinishedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Class' property of row equals 'completed'
        /// </summary>
        public string UIItemRowClass = "completed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyLastTaskFinished'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class VerifyLastTaskFinishedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlDefinition' property of 'done' link contains 'display: none'
        /// </summary>
        public string UIDoneHyperlink1ControlDefinition = "display: none";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRedwoodSamplesHomePaWindow : BrowserWindow
    {
        
        public UIRedwoodSamplesHomePaWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Redwood Samples HomePage";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Redwood Samples HomePage");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIRedwoodSamplesHomePaDocument UIRedwoodSamplesHomePaDocument
        {
            get
            {
                if ((this.mUIRedwoodSamplesHomePaDocument == null))
                {
                    this.mUIRedwoodSamplesHomePaDocument = new UIRedwoodSamplesHomePaDocument(this);
                }
                return this.mUIRedwoodSamplesHomePaDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIRedwoodSamplesHomePaDocument mUIRedwoodSamplesHomePaDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRedwoodSamplesHomePaDocument : HtmlDocument
    {
        
        public UIRedwoodSamplesHomePaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Redwood Samples HomePage";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:8628/";
            this.WindowTitles.Add("Redwood Samples HomePage");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UISample1TaskListHyperlink
        {
            get
            {
                if ((this.mUISample1TaskListHyperlink == null))
                {
                    this.mUISample1TaskListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUISample1TaskListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUISample1TaskListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUISample1TaskListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUISample1TaskListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Sample 1 - Task List";
                    this.mUISample1TaskListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Sample1";
                    this.mUISample1TaskListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUISample1TaskListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:8628/Sample1";
                    this.mUISample1TaskListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUISample1TaskListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Sample1\"";
                    this.mUISample1TaskListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUISample1TaskListHyperlink.WindowTitles.Add("Redwood Samples HomePage");
                    #endregion
                }
                return this.mUISample1TaskListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUISample1TaskListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHellofromRedwoodInteWindow : BrowserWindow
    {
        
        public UIHellofromRedwoodInteWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Hello from Redwood!";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Hello from Redwood!");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHellofromRedwoodDocument UIHellofromRedwoodDocument
        {
            get
            {
                if ((this.mUIHellofromRedwoodDocument == null))
                {
                    this.mUIHellofromRedwoodDocument = new UIHellofromRedwoodDocument(this);
                }
                return this.mUIHellofromRedwoodDocument;
            }
        }
        
        public UIHellofromRedwoodInteTitleBar UIHellofromRedwoodInteTitleBar
        {
            get
            {
                if ((this.mUIHellofromRedwoodInteTitleBar == null))
                {
                    this.mUIHellofromRedwoodInteTitleBar = new UIHellofromRedwoodInteTitleBar(this);
                }
                return this.mUIHellofromRedwoodInteTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIHellofromRedwoodDocument mUIHellofromRedwoodDocument;
        
        private UIHellofromRedwoodInteTitleBar mUIHellofromRedwoodInteTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHellofromRedwoodDocument : HtmlDocument
    {
        
        public UIHellofromRedwoodDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Hello from Redwood!";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Sample1";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:8628/Sample1";
            this.WindowTitles.Add("Hello from Redwood!");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUIItemEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mUIItemEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIItemEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIItemEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIItemEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIItemEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "type=\"text\" data-bind=\"value: NewTaskTit";
                    this.mUIItemEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIItemEdit.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "onclick=\"redwood.postBack(\'root\', this, ";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUICreateButton.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "TBODY";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = "data-bind=\"foreach: Tasks\"";
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public HtmlHyperlink UIDoneHyperlink
        {
            get
            {
                if ((this.mUIDoneHyperlink == null))
                {
                    this.mUIDoneHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDoneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDoneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDoneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDoneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "done";
                    this.mUIDoneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Sample1";
                    this.mUIDoneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDoneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:8628/Sample1#";
                    this.mUIDoneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDoneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "onclick=\"redwood.postBack(\'root\', this, ";
                    this.mUIDoneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIDoneHyperlink.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUIDoneHyperlink;
            }
        }
        
        public HtmlHyperlink UIDoneHyperlink1
        {
            get
            {
                if ((this.mUIDoneHyperlink1 == null))
                {
                    this.mUIDoneHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDoneHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDoneHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDoneHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDoneHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "done";
                    this.mUIDoneHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Sample1";
                    this.mUIDoneHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDoneHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:8628/Sample1#";
                    this.mUIDoneHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDoneHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"display: none;\" onclick=\"redwood.";
                    this.mUIDoneHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIDoneHyperlink1.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUIDoneHyperlink1;
            }
        }
        
        public HtmlHyperlink UIDoneHyperlink2
        {
            get
            {
                if ((this.mUIDoneHyperlink2 == null))
                {
                    this.mUIDoneHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDoneHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDoneHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDoneHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDoneHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "done";
                    this.mUIDoneHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Sample1";
                    this.mUIDoneHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDoneHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:8628/Sample1#";
                    this.mUIDoneHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDoneHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "onclick=\"redwood.postBack(\'root\', this, ";
                    this.mUIDoneHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIDoneHyperlink2.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUIDoneHyperlink2;
            }
        }
        
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIItemEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlCustom mUIItemCustom;
        
        private HtmlHyperlink mUIDoneHyperlink;
        
        private HtmlHyperlink mUIDoneHyperlink1;
        
        private HtmlHyperlink mUIDoneHyperlink2;
        
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "\r\n                        Do the laundrydone\r\n                        Wash the ca" +
                "rdone\r\n                      ";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Hello from Redwood!");
            #endregion
        }
        
        #region Properties
        public HtmlRow UIItemRow
        {
            get
            {
                if ((this.mUIItemRow == null))
                {
                    this.mUIItemRow = new HtmlRow(this);
                    #region Search Criteria
                    this.mUIItemRow.SearchProperties[HtmlRow.PropertyNames.Id] = null;
                    this.mUIItemRow.SearchProperties[HtmlRow.PropertyNames.Name] = null;
                    this.mUIItemRow.SearchProperties[HtmlRow.PropertyNames.MaxDepth] = "2";
                    this.mUIItemRow.FilterProperties[HtmlRow.PropertyNames.InnerText] = "Do the laundrydone ";
                    this.mUIItemRow.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "class=\"completed\" data-bind=\'attr: {class: IsCompleted() ? \"completed\" : \"\"}\'";
                    this.mUIItemRow.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "0";
                    this.mUIItemRow.FilterProperties[HtmlRow.PropertyNames.Class] = "completed";
                    this.mUIItemRow.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "1";
                    this.mUIItemRow.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUIItemRow;
            }
        }
        #endregion
        
        #region Fields
        private HtmlRow mUIItemRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHellofromRedwoodInteTitleBar : WinTitleBar
    {
        
        public UIHellofromRedwoodInteTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Hello from Redwood!");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Hello from Redwood!");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
