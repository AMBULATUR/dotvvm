<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
var types = new[] { 
	typeof(byte), typeof(sbyte), typeof(short), typeof(ushort), 
	typeof(int), typeof(uint), typeof(long), typeof(ulong), 
	typeof(float), typeof(double), typeof(decimal) 
};
var unsignedTypes = new[] { typeof (byte), typeof (ushort), typeof (uint), typeof (ulong) };
var nonIntegerTypes = new[] { typeof (float), typeof (double), typeof (decimal) };
#>


using System;

namespace DotVVM.Framework.Binding 
{

    public class NumberUtils
	{
			
		// operator methods

<# foreach (var type in types) { #>
		public static <#= type.Name #> Add(<#= type.Name #> a, <#= type.Name #> b) 
		{
			return (<#= type.Name #>)(a + b);
		}

		public static <#= type.Name #> Subtract(<#= type.Name #> a, <#= type.Name #> b) 
		{
			return (<#= type.Name #>)(a - b);
		}

		public static <#= type.Name #> Multiply(<#= type.Name #> a, <#= type.Name #> b) 
		{
			return (<#= type.Name #>)(a * b);
		}

		public static <#= type.Name #> Divide(<#= type.Name #> a, <#= type.Name #> b) 
		{
			return (<#= type.Name #>)(a / b);
		}

		public static <#= type.Name #> Negate(<#= type.Name #> a) 
		{
<# if (Array.IndexOf(unsignedTypes, type) < 0) { #>
			return (<#= type.Name #>)(-a);
<# } else { #>
			throw new NotSupportedException("Cannot negate unsigned types!");
<# } #>
		}


<# } #>

 
		// object methods
		public static object Negate(object value) 
		{
<# foreach (var type in types) { #>
			if (value is <#= type.Name #>) return Negate((<#= type.Name #>)value);
<# } #>
			throw new NotSupportedException("Specified value is not a number!");
		}

<# foreach (var method in new[] { "Add", "Subtract", "Multiply", "Divide" }) { #>

		public static object <#= method #>(object a, object b) 
		{
<# foreach (var type in types) { #>
			if (a is <#= type.Name #>) 
			{
<# foreach (var type2 in types) { 
    var bestType = Array.IndexOf(types, type) > Array.IndexOf(types, type2) ? type : type2;
#>
				if (b is <#= type2.Name #>) return <#= method #>((<#= bestType.Name #>)(<#= type.Name #>)a, (<#= bestType.Name #>)(<#= type2.Name #>)b);
<# } #>		
			}
<# } #>			
			throw new NotSupportedException("Specified value is not a number!");
		}

<# } #>		

		public static object Mod(object a, object b) 
		{
<# foreach (var type in types.Except(nonIntegerTypes)) { #>
			if (a is <#= type.Name #>) 
			{
<# foreach (var type2 in types.Except(nonIntegerTypes)) { 
    var bestType = Array.IndexOf(types, type) > Array.IndexOf(types, type2) ? type : type2;
#>
				if (b is <#= type2.Name #>) return Mod((<#= bestType.Name #>)(<#= type.Name #>)a, (<#= bestType.Name #>)(<#= type2.Name #>)b);
<# } #>		
			}
<# } #>			
			throw new NotSupportedException("Specified value is not a number!");
		}	

	}
}